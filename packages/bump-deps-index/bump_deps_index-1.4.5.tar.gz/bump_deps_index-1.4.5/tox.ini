[tox]
requires =
    tox>=4.2
    tox-uv>=1.11.3
env_list =
    fix
    docs
    type
    readme
    3.13
    3.12
    3.11
skip_missing_interpreters = true

[testenv]
description = run the unit tests with pytest under {basepython}
package = wheel
wheel_build_env = .pkg
extras =
    test
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{/}.coverage.{envname}}
commands =
    pytest {tty:--color=yes} {posargs: \
      --cov {envsitepackagesdir}{/}bump_deps_index --cov {toxinidir}{/}tests --cov-config=pyproject.toml \
      --junitxml {toxworkdir}{/}junit.{envname}.xml  --no-cov-on-fail --cov-report term-missing:skip-covered \
      --cov-report html:{envtmpdir}{/}htmlcov --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      tests}

[testenv:fix]
description = run static analysis and style check using flake8
skip_install = true
deps =
    pre-commit-uv>=4.1
pass_env =
    HOMEPATH
    PROGRAMDATA
commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:docs]
extras =
    docs
commands =
    python -c 'import glob; import subprocess; subprocess.call(["proselint"] + glob.glob("docs/*.rst"))'
    sphinx-build -d "{envtmpdir}/doctree" docs "{toxworkdir}/docs_out" --color -b html {posargs}
    python -c 'import pathlib; print("documentation available under \{0\}".format((pathlib.Path(r"{toxworkdir}") / "docs_out" / "index.html").as_uri()))'

[testenv:type]
description = run type check on code base
deps =
    mypy==1.11.2
    types-PyYaml>=6.0.12.20240808
commands =
    mypy --strict src
    mypy --strict tests

[testenv:readme]
description = check that the long description is valid
skip_install = true
deps =
    build[uv]>=1.2.2
    check-wheel-contents>=0.6
    twine>=5.1.1
commands =
    pyproject-build --installer uv --outdir {envtmpdir} --sdist --wheel .
    twine check {envtmpdir}{/}*
    check-wheel-contents --no-config {envtmpdir}

[testenv:dev]
description = generate a DEV environment
package = editable
extras =
    test
commands =
    uv pip tree
    python -c 'import sys; print(sys.executable)'
