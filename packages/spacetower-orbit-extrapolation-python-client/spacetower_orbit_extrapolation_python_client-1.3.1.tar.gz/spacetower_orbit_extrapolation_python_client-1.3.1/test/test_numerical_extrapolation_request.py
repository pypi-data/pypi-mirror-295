# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 1.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.numerical_extrapolation_request import NumericalExtrapolationRequest

class TestNumericalExtrapolationRequest(unittest.TestCase):
    """NumericalExtrapolationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalExtrapolationRequest:
        """Test NumericalExtrapolationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalExtrapolationRequest`
        """
        model = NumericalExtrapolationRequest()
        if include_optional:
            return NumericalExtrapolationRequest(
                target_date = '2024-01-01T00:00Z',
                initial_orbit = spacetower_orbit_extrapolation_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                initial_covariance_matrix = spacetower_orbit_extrapolation_python_client.models.orbital_covariance_matrix.OrbitalCovarianceMatrix(
                    covariance_orbit_type = 'KEPLERIAN', ),
                attitude_sequence = spacetower_orbit_extrapolation_python_client.models.attitude_sequence.AttitudeSequence(
                    celestial_body_configuration = spacetower_orbit_extrapolation_python_client.models.celestial_body_configuration.CelestialBodyConfiguration(
                        bodies = [
                            spacetower_orbit_extrapolation_python_client.models.celestial_body.CelestialBody(
                                body_name = 'SUN', )
                            ], ), 
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_orbit_extrapolation_python_client.models.attitude_law.AttitudeLaw(
                        attitude_law_type = 'LOCAL_FRAME_ATTITUDE', ), ),
                space_object = spacetower_orbit_extrapolation_python_client.models.space_object.SpaceObject(
                    mass = 1.337, 
                    solar_array_system = spacetower_orbit_extrapolation_python_client.models.solar_array_system.SolarArraySystem(
                        solar_array_power = 1.337, ), 
                    propulsion_system = spacetower_orbit_extrapolation_python_client.models.propulsion_system.PropulsionSystem(
                        active_propulsion_power_consumption = 1.337, 
                        thruster = spacetower_orbit_extrapolation_python_client.models.thruster.Thruster(
                            thrust = 1.337, 
                            specific_impulse = 1.337, 
                            axis_in_space_object_frame = spacetower_orbit_extrapolation_python_client.models.vector3_d.Vector3D(
                                x = 1.337, 
                                y = 1.337, 
                                z = 1.337, ), ), ), 
                    space_object_type = 'ISOTROPIC', 
                    drag_coefficient = 1.337, ),
                battery_model = spacetower_orbit_extrapolation_python_client.models.battery_model.BatteryModel(
                    nominal_capacity = 1.337, 
                    depth_of_discharge = 1.337, 
                    initial_charge = 1.337, 
                    minimum_charge_when_firing = 1.337, ),
                reference_frames_configuration = spacetower_orbit_extrapolation_python_client.models.reference_frames_configuration.ReferenceFramesConfiguration(
                    inertial_frame_id = 'GCRF', 
                    earth_fixed_frame_id = 'ITRF2020', 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, ),
                perturbations_configuration = spacetower_orbit_extrapolation_python_client.models.perturbations_configuration.PerturbationsConfiguration(
                    celestial_body_configuration = spacetower_orbit_extrapolation_python_client.models.celestial_body_configuration.CelestialBodyConfiguration(
                        bodies = [
                            spacetower_orbit_extrapolation_python_client.models.celestial_body.CelestialBody(
                                body_name = 'SUN', )
                            ], ), 
                    perturbations = [
                        spacetower_orbit_extrapolation_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'EARTH_POTENTIAL', )
                        ], ),
                maneuver_schedule = spacetower_orbit_extrapolation_python_client.models.maneuver_schedule.ManeuverSchedule(
                    maneuver_schedule_type = 'LOCAL_FRAME_BASED_MANEUVER_SCHEDULE', ),
                integrator_configuration = spacetower_orbit_extrapolation_python_client.models.integrator_configuration.IntegratorConfiguration(
                    integrator_type = 'FIXED_STEP', ),
                event_generation_requests = [
                    spacetower_orbit_extrapolation_python_client.models.event_generation_request.EventGenerationRequest(
                        time_span = spacetower_orbit_extrapolation_python_client.models.time_span.TimeSpan(
                            start_date = '2024-01-01T00:00Z', 
                            end_date = '2024-01-02T00:00Z', ), 
                        event_type = 'ORBITAL', 
                        event_detection_type = 'LOG_ALL', )
                    ],
                ephemeris_generation_requests = [
                    spacetower_orbit_extrapolation_python_client.models.ephemeris_generation_request.EphemerisGenerationRequest(
                        ephemeris_type = 'ATTITUDE', 
                        step = 1.337, 
                        start_date = '2024-01-01T00:00Z', 
                        end_date = '2024-01-01T00:00Z', )
                    ],
                data = {
                    'key' : ''
                    }
            )
        else:
            return NumericalExtrapolationRequest(
                target_date = '2024-01-01T00:00Z',
                initial_orbit = spacetower_orbit_extrapolation_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                integrator_configuration = spacetower_orbit_extrapolation_python_client.models.integrator_configuration.IntegratorConfiguration(
                    integrator_type = 'FIXED_STEP', ),
        )
        """

    def testNumericalExtrapolationRequest(self):
        """Test NumericalExtrapolationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
