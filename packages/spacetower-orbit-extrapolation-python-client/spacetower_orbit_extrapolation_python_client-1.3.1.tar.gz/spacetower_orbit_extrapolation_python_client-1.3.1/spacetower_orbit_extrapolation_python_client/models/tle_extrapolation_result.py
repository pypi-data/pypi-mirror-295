# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 1.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_orbit_extrapolation_python_client.models.closest_approach_event_log import ClosestApproachEventLog
from spacetower_orbit_extrapolation_python_client.models.field_of_view_event_log import FieldOfViewEventLog
from spacetower_orbit_extrapolation_python_client.models.geodetic_ephemeris import GeodeticEphemeris
from spacetower_orbit_extrapolation_python_client.models.mean_orbit_ephemeris import MeanOrbitEphemeris
from spacetower_orbit_extrapolation_python_client.models.orbital_event_log import OrbitalEventLog
from spacetower_orbit_extrapolation_python_client.models.osculating_orbit_ephemeris import OsculatingOrbitEphemeris
from spacetower_orbit_extrapolation_python_client.models.position_velocity_ephemeris import PositionVelocityEphemeris
from spacetower_orbit_extrapolation_python_client.models.station_visibility_event_log import StationVisibilityEventLog
from typing import Optional, Set
from typing_extensions import Self

class TleExtrapolationResult(BaseModel):
    """
    TleExtrapolationResult
    """ # noqa: E501
    osculating_orbit_ephemeris: Optional[OsculatingOrbitEphemeris] = Field(default=None, alias="osculatingOrbitEphemeris")
    mean_orbit_ephemeris: Optional[MeanOrbitEphemeris] = Field(default=None, alias="meanOrbitEphemeris")
    geodetic_ephemeris: Optional[GeodeticEphemeris] = Field(default=None, alias="geodeticEphemeris")
    position_velocity_ephemeris: Optional[PositionVelocityEphemeris] = Field(default=None, alias="positionVelocityEphemeris")
    orbital_event_logs: Optional[List[OrbitalEventLog]] = Field(default=None, description="The computed orbital elements ephemeris", alias="orbitalEventLogs")
    station_event_logs: Optional[List[StationVisibilityEventLog]] = Field(default=None, description="The computed orbital elements ephemeris", alias="stationEventLogs")
    field_of_view_event_logs: Optional[List[FieldOfViewEventLog]] = Field(default=None, description="The computed field of view events from on-board sensors", alias="fieldOfViewEventLogs")
    closest_approach_event_logs: Optional[List[ClosestApproachEventLog]] = Field(default=None, description="The computed conjunction events", alias="closestApproachEventLogs")
    __properties: ClassVar[List[str]] = ["osculatingOrbitEphemeris", "meanOrbitEphemeris", "geodeticEphemeris", "positionVelocityEphemeris", "orbitalEventLogs", "stationEventLogs", "fieldOfViewEventLogs", "closestApproachEventLogs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TleExtrapolationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of osculating_orbit_ephemeris
        if self.osculating_orbit_ephemeris:
            _dict['osculatingOrbitEphemeris'] = self.osculating_orbit_ephemeris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mean_orbit_ephemeris
        if self.mean_orbit_ephemeris:
            _dict['meanOrbitEphemeris'] = self.mean_orbit_ephemeris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geodetic_ephemeris
        if self.geodetic_ephemeris:
            _dict['geodeticEphemeris'] = self.geodetic_ephemeris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_velocity_ephemeris
        if self.position_velocity_ephemeris:
            _dict['positionVelocityEphemeris'] = self.position_velocity_ephemeris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in orbital_event_logs (list)
        _items = []
        if self.orbital_event_logs:
            for _item in self.orbital_event_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orbitalEventLogs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in station_event_logs (list)
        _items = []
        if self.station_event_logs:
            for _item in self.station_event_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stationEventLogs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in field_of_view_event_logs (list)
        _items = []
        if self.field_of_view_event_logs:
            for _item in self.field_of_view_event_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fieldOfViewEventLogs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in closest_approach_event_logs (list)
        _items = []
        if self.closest_approach_event_logs:
            for _item in self.closest_approach_event_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['closestApproachEventLogs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TleExtrapolationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "osculatingOrbitEphemeris": OsculatingOrbitEphemeris.from_dict(obj["osculatingOrbitEphemeris"]) if obj.get("osculatingOrbitEphemeris") is not None else None,
            "meanOrbitEphemeris": MeanOrbitEphemeris.from_dict(obj["meanOrbitEphemeris"]) if obj.get("meanOrbitEphemeris") is not None else None,
            "geodeticEphemeris": GeodeticEphemeris.from_dict(obj["geodeticEphemeris"]) if obj.get("geodeticEphemeris") is not None else None,
            "positionVelocityEphemeris": PositionVelocityEphemeris.from_dict(obj["positionVelocityEphemeris"]) if obj.get("positionVelocityEphemeris") is not None else None,
            "orbitalEventLogs": [OrbitalEventLog.from_dict(_item) for _item in obj["orbitalEventLogs"]] if obj.get("orbitalEventLogs") is not None else None,
            "stationEventLogs": [StationVisibilityEventLog.from_dict(_item) for _item in obj["stationEventLogs"]] if obj.get("stationEventLogs") is not None else None,
            "fieldOfViewEventLogs": [FieldOfViewEventLog.from_dict(_item) for _item in obj["fieldOfViewEventLogs"]] if obj.get("fieldOfViewEventLogs") is not None else None,
            "closestApproachEventLogs": [ClosestApproachEventLog.from_dict(_item) for _item in obj["closestApproachEventLogs"]] if obj.get("closestApproachEventLogs") is not None else None
        })
        return _obj


