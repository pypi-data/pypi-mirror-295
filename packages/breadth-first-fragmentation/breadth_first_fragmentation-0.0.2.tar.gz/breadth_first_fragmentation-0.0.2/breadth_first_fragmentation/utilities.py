"""Utilities module"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/utilities.ipynb.

# %% auto 0
__all__ = ['canonicalize', 'mol_from_smiles', 'mol_to_smiles', 'root_smiles']

# %% ../nbs/utilities.ipynb 3
from rdkit import Chem

# %% ../nbs/utilities.ipynb 4
def canonicalize(smi:str, # input molecule
                 clear_stereo:bool=False, # if True, clears stereochemistry of the molecule (remove the @@)
                 ) -> str: # canonicalised molecule
    """This function returns the canonicalised smiles representation and has the option to clear stereochemistry"""
    mol = Chem.MolFromSmiles(smi)
    if clear_stereo:
        Chem.RemoveStereochemistry(mol)
    return Chem.MolToSmiles(mol, isomericSmiles=True)

# %% ../nbs/utilities.ipynb 11
def mol_from_smiles(smi:str, # Input molecule in SMILES.
                    )->Chem.rdchem.Mol: # Output molecule.
    "This function converts a SMILES string to a molecule."
    return Chem.MolFromSmiles(Chem.CanonSmiles(smi))

# %% ../nbs/utilities.ipynb 15
def mol_to_smiles(mol:Chem.rdchem.Mol, # molecule to convert into SMILES string
                  rootedAtAtom:int=None, # SMILES string rooted at the input atom
                  ) -> str: # canonicalized SMILES string
    """This function converts a molecule to a SMILES string."""
    if rootedAtAtom:
        return Chem.MolToSmiles(Chem.MolFromSmiles(canonicalize(Chem.MolToSmiles(mol))), rootedAtAtom=rootedAtAtom)
    else:
        return canonicalize(Chem.MolToSmiles(mol))
    

# %% ../nbs/utilities.ipynb 22
def root_smiles(smi:str, # Input molecule in SMILES
                rootedAtAtom:int, # SMILES string rooted at the input atom
                )->str:
    'Root molecule in smiles format at a defined atom'
    return Chem.MolToSmiles(mol_from_smiles(smi),rootedAtAtom = rootedAtAtom)
