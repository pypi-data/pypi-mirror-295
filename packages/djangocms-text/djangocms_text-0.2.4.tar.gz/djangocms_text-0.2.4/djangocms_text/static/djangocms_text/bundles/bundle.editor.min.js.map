{"version":3,"file":"static/djangocms_text/bundles/bundle.editor.min.js","mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,kCAAkC;AAClC,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF;AACnF;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;;AAErB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,4FAA4F;AAC5F,uGAAuG;AACvG;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB,GAAG,qCAAqC;AACvF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,GAAG,qCAAqC;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,2BAA2B,GAAG,qCAAqC;;AAE1F,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,yCAAyC;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yBAAyB,mDAAmD;AAC5E,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA","sources":["webpack://djangocms-text/./private/js/cms.editor.js"],"sourcesContent":["/* eslint-env es6 */\n/* jshint esversion: 6 */\n/* global window, document, fetch, IntersectionObserver, URLSearchParams, console */\n\n// #############################################################################\n// CMS Editor\n// #############################################################################\n\nclass CMSEditor {\n\n    // CMS Editor: constructor\n    // Initialize the editor object\n    constructor() {\n        this._editors = [];\n        this._options = {};\n        this._editor_settings = {};\n\n        // Get the CMS object from the parent window\n        if (window.CMS !== undefined && window.CMS.config !== undefined) {\n            this.mainWindow = window;\n            this.CMS = window.CMS;\n        } else {\n            this.mainWindow = window.parent;\n            this.CMS = window.parent.CMS;\n        }\n\n        document.addEventListener('DOMContentLoaded', () => this.initAll());\n        if (this.CMS) {\n            // Only needs to happen on the main window.\n            this.CMS.$(window).on('cms-content-refresh', () => this._resetInlineEditors());\n        }\n    }\n\n    // CMS Editor: init\n    // Initialize a single editor\n    init (el) {\n        const editor_type = el.dataset.type || 'HTMLField';\n        let content;\n\n        // Get content: json > textarea > innerHTML\n        if (el.dataset.json) {\n            content = JSON.parse(el.dataset.json);\n        } else  {\n            content = el.innerHTML;\n        }\n        if (el.tagName === 'TEXTAREA') {\n            el.visible = false;\n            content = el.value;\n            // el = el.insertAdjacentElement('afterend', document.createElement('div'));\n        }\n        if (!el.id) {\n            el.id = \"cms-edit-\" + Math.random().toString(36).slice(2, 9);\n        }\n        const settings = this.getSettings(el);\n        // Element options overwrite\n        settings.options = Object.assign({},\n            this._options[editor_type],\n            settings.options || {},\n            JSON.parse(el.dataset.options || '{}')\n        );\n\n        // Add event listener to delete data on modal cancel\n        if (settings.revert_on_cancel) {\n            const CMS = this.CMS;\n            const csrf = CMS.config.csrf;\n            CMS.API.Helpers.addEventListener(\n                'modal-close.text-plugin.text-plugin-' + settings.plugin_id,\n                function(e, opts) {\n                    if (!settings.revert_on_cancel || !settings.cancel_plugin_url) {\n                        return;\n                    }\n                    CMS.$.ajax({\n                        method: 'POST',\n                        url: settings.cancel_plugin_url,\n                        data: {\n                            token: settings.action_token,\n                            csrfmiddlewaretoken: csrf\n                        },\n                    }).done(function () {\n                        CMS.API.Helpers.removeEventListener(\n                            'modal-close.text-plugin.text-plugin-' + settings.plugin_id\n                        );\n                        opts.instance.close();\n                    }).fail(function (res) {\n                        CMS.API.Messages.open({\n                            message: res.responseText + ' | ' + res.status + ' ' + res.statusText,\n                            delay: 0,\n                            error: true\n                        });\n                    });\n\n                }\n            );\n        }\n        const inModal = !!document.querySelector(\n            '.app-djangocms_text.model-text.change-form #' + el.id\n        );\n\n        // Create editor\n        window.cms_editor_plugin.create(\n            el,\n            inModal,\n            content, settings,\n            el.tagName !== 'TEXTAREA' ? () => this.saveData(el) : () => {}\n        );\n        this._editors.push(el);\n    }\n\n    // CMS Editor: initInlineEditors\n    // Register all plugins on the page for inline editing\n    // This is called from init_all\n    initInlineEditors() {\n        if (this.CMS === undefined || this.CMS._plugins === undefined) {\n            // Check the CMS frontend for plugins\n            // no plugins -> no inline editors\n            return;\n        }\n        const plugins = this.CMS._plugins;\n\n        this.observer = this.observer || new IntersectionObserver( (entries) => {\n            entries.forEach((entry) => {\n                if (entry.isIntersecting) {\n                    this.init(entry.target);\n                }\n            }, this);\n        }, {\n            root: null,\n            threshold: 0.05\n        });\n\n        plugins.forEach(function (plugin) {\n            if (plugin[1].plugin_type === 'TextPlugin') {\n                const url = plugin[1].urls.edit_plugin;\n                const id = plugin[1].plugin_id;\n                const elements = document.querySelectorAll('.cms-plugin.cms-plugin-' + id);\n                let wrapper;\n\n                if (elements.length > 0) {\n                    if (elements.length === 1 && elements[0].tagName === 'DIV') {  // already wrapped?\n                        wrapper = elements[0];\n                        wrapper.classList.add('cms-editor-inline-wrapper');\n                    } else {  // no, wrap now!\n                        wrapper = document.createElement('div');\n                        wrapper.classList.add('cms-editor-inline-wrapper', 'wrapped');\n                        wrapper = this._wrapAll(elements, wrapper);\n                        wrapper.classList.add('cms-plugin', 'cms-plugin-' + id);\n                        for (let child of wrapper.children) {\n                            child.classList.remove('cms-plugin', 'cms-plugin-' + id);\n                        }\n                    }\n                    wrapper.dataset.cmsEditUrl = url;\n                    wrapper.dataset.cmsPluginId = id;\n\n                    // Catch CMS single click event to highlight the plugin\n                    // Catch CMS double click event if present, since double click is needed by Editor\n                    if (this.CMS) {\n                        this.CMS.$(wrapper).on('dblclick.cms-editor', function (event) {\n                            event.stopPropagation();\n                        });\n                        wrapper.addEventListener('focusin.cms-editor',  () => {\n                            this._highlightTextplugin(id);\n                        }, true);\n                    }\n\n                    // Prevent tooltip on hover\n                    document.addEventListener('pointerover.cms-editor', (event) => {\n                        // use time out to let other event handlers (CMS' !) run first.\n                        setTimeout(function () {\n                            // do not show tooltip on inline editing text fields.\n                            this.CMS.API.Tooltip.displayToggle(false, event.target, '', id);\n                        }, 0);\n                    });\n\n                    this.observer.observe(wrapper);\n                }\n            }\n        }, this);\n\n        window.addEventListener('beforeunload', (event) =>  {\n            if (document.querySelector('.cms-editor-inline-wrapper[data-changed=\"true\"]')) {\n                event.preventDefault();\n                event.returnValue = true;\n                return 'Do you really want to leave this page?';\n            }\n        });\n    }\n\n    /**\n     * Retrieves the settings for the given editor.\n     * If the element is a string, it will be treated as an element's ID.\n     * Reads settings from a json script element.\n     *\n     * @param {string|HTMLElement} el - The element or element's ID to retrieve the settings for.\n     *\n     * @return {Object} - The settings object for the element.\n     */\n    getSettings(el) {\n        if (typeof el === \"string\") {\n            if (this._editor_settings[el]) {\n                return this._editor_settings[el];\n            }\n            el = document.getElementById(el);\n        }\n        const settings_el = (\n            document.getElementById(el.dataset.settings) ||\n            document.getElementById('cms-cfg-' + el.dataset.cmsPluginId)\n        );\n        if (settings_el) {\n            this._editor_settings[el.id] = JSON.parse(settings_el.textContent);\n            return this._editor_settings[el.id];\n        }\n        return {};\n    }\n\n    /**\n     * Retrieves the list of installed plugins. (Returns empty list of no editor has been initialized.)\n     *\n     * @returns {Array} - The list of installed plugins.\n     */\n    getInstalledPlugins() {\n        if (this._editor_settings) {\n            return this.getSettings(Object.keys(this._editor_settings)[0]).installed_plugins;\n        }\n        return [];\n    }\n\n    // CMS Editor: init_all\n    initAll () {\n        // Save the active element\n        const active = document.activeElement;\n        // Get global options from script element\n        try {\n            this._options = JSON.parse(document.getElementById('cms-editor-cfg').textContent);\n        } catch (e) {\n            this._options = {};\n        }\n        // All textareas with class CMS_Editor: typically on admin site\n        document.querySelectorAll('textarea.CMS_Editor').forEach(\n            (el) => this.init(el), this\n        );\n        // Register all plugins on the page for inline editing\n        this.initInlineEditors();\n        // Re-focus the active element\n        if (active) {\n            active.focus();\n        }\n    }\n\n    // CMS Editor: destroy\n    destroyAll() {\n        while (this._editors.length) {\n            window.cms_editor_plugin.destroyEditor(this._editors.pop());\n        }\n    }\n\n\n    saveData(el, action) {\n        if (el && el.dataset.changed === \"true\") {\n            const html = window.cms_editor_plugin.getHTML(el),\n                json = window.cms_editor_plugin.getJSON(el);\n\n            let url = el.dataset.cmsEditUrl;\n            let csrf = el.dataset.cmsCsrfToken;\n            if (this.CMS) {\n                this.CMS.API.Toolbar.showLoader();\n                url = this.CMS.API.Helpers.updateUrlWithPath(url);\n                csrf = this.CMS.config.csrf;\n            }\n\n            fetch(url, {\n                method: 'POST',\n                body: new URLSearchParams({\n                    csrfmiddlewaretoken: csrf,\n                    body: html,\n                    json: JSON.stringify(json) || '',\n                    _save: 'Save'\n                }),\n            })\n                .then(response => {\n                        el.dataset.changed = 'false';\n                        if (action !== undefined) {\n                            action(el, response);\n                        }\n                        if (this.CMS) {\n                            this.CMS.API.Toolbar.hideLoader();\n                        }\n                        return response.text();\n                }).then(body => {\n                    // Read the CMS databridge values from the response, either directly or from a script tag or\n                    //  from the response using regex.\n                    // This depends on the exact format django CMS core returns it. This will need to be adjusted\n                    // if the format changes.\n                    // Fallback solution is to reload the page as djagocms-text-ckeditor used to do.\n                    const dom = document.createElement('div');\n                    dom.innerHTML = body;\n                    const script = dom.querySelector('script#data-bridge');\n                    if (script) {\n                        this.CMS.API.Helpers.dataBridge = JSON.parse(script.textContent);\n                    } else {\n                        const regex1 = /^\\s*Window\\.CMS\\.API\\.Helpers\\.dataBridge\\s=\\s(.*?);$/gmu.exec(body);\n                        const regex2 = /^\\s*Window\\.CMS\\.API\\.Helpers\\.dataBridge\\.structure\\s=\\s(.*?);$/gmu.exec(body);\n                        if (regex1 && regex2 && this.CMS) {\n                            this.CMS.API.Helpers.dataBridge = JSON.parse(regex1[1]);\n                            this.CMS.API.Helpers.dataBridge.structure = JSON.parse(regex2[1]);\n                        } else {\n                            // No databridge found\n                            // Reload\n                            this.CMS.API.Helpers.reloadBrowser('REFRESH_PAGE');\n                            return;\n                        }\n                    }\n                    this.CMS.API.StructureBoard.handleEditPlugin(this.CMS.API.Helpers.dataBridge);\n                    this._loadToolbar();\n                })\n                .catch(error => {\n                        el.dataset.changed = 'true';\n                    if (this.CMS) {\n                        this.CMS.API.Toolbar.hideLoader();\n                        this.CMS.API.Messages.open({\n                            message: error.message,\n                            error: true,\n                            delay: -1,\n                        });\n                    }\n                    window.console.error(error.message);\n                });\n        }\n    }\n\n    // CMS Editor: addPluginForm\n    // Get form for a new child plugin\n    addPluginForm (plugin_type, iframe, el , onLoad, onSave) {\n        const settings = this.getSettings(el);\n        const data = {\n            placeholder_id: settings.placeholder_id,\n            plugin_type: plugin_type,\n            plugin_parent: settings.plugin_id,\n            plugin_language: settings.plugin_language,\n            plugin_position: settings.plugin_position + 1,\n            cms_path: window.parent.location.pathname,\n            cms_history: 0,\n        };\n        const url = `${settings.add_plugin_url}?${new URLSearchParams(data).toString()}`;\n        return this.loadForm(url, iframe, el, onLoad, onSave);\n    }\n\n    // CMS Editor: addPluginForm\n    // Get form for a new child plugin\n    editPluginForm (plugin_id, iframe, el, onLoad, onSave) {\n        let url = el.dataset.cmsEditUrl || window.location.href;\n        url = url.replace(/\\/edit-plugin\\/\\d+/, '/edit-plugin/' + plugin_id);\n        const data = {\n            '_popup': 1,\n            cms_path: window.parent.location.pathname,\n            cms_history: 0,\n        };\n        url = `${url}?${new URLSearchParams(data).toString()}`;\n        return this.loadForm(url, iframe, el, onLoad, onSave);\n    }\n\n    loadForm (url, iframe, el, onLoad, onSave) {\n        iframe.addEventListener('load', () => {\n            const form = iframe.contentDocument;\n            const heading = form.querySelector('#content h1');\n            const submitrow = form.querySelector('.submit-row');\n\n            // Remove submit button and heading\n            if (submitrow) {\n                submitrow.style.display = 'none';\n            }\n            if (heading) {\n                heading.style.display = 'none';\n            }\n\n            //\n            let saveSuccess = !!form.querySelector('.messagelist :not(.error)');\n            if (!saveSuccess) {\n                saveSuccess =\n                    !!form.querySelector('.dashboard #content-main') &&\n                    !form.querySelector('.messagelist .error');\n            }\n            if (saveSuccess) {\n                // Mark document and child as changed\n                el.dataset.changed = 'true';\n                // Hook into the django CMS dataBridge to get the details of the newly created or saved\n                // plugin. For new plugins we need their id to get the content.\n                if (!this.CMS.API.Helpers.dataBridge) {\n                    // The dataBridge sets a timer, so typically it will not yet be present\n                    setTimeout(() => {\n                        // Needed to update StructureBoard\n                        if (onSave) {\n                            onSave(el, form, this.CMS.API.Helpers.dataBridge);\n                        }\n                    }, 100);\n                } else {\n                    // Needed to update StructureBoard\n                    if (onSave) {\n                        onSave(el, form, this.CMS.API.Helpers.dataBridge);\n                    }\n                }\n                //  Do callback\n            } else if (onLoad) {\n                onLoad(el, form, heading, submitrow);\n            }\n            // Editor-specific dialog setup goes into the callback\n        });\n        iframe.setAttribute('src', url);\n\n    }\n\n    // CMS Editor: requestPluginMarkup\n    // Get HTML markup for a child plugin\n    requestPluginMarkup (plugin_id, el) {\n        const settings = this.getSettings(el);\n        const data = {\n            plugin: plugin_id,\n            token: settings.action_token,\n        };\n\n        const url = `${settings.render_plugin_url}?${new URLSearchParams(data).toString()}`;\n\n        return fetch(url, {method: 'GET'})\n            .then(response => {\n                if (response.status === 200) {\n                    return response.text();\n                }\n                else if (response.status === 204)\n                {\n                    return null;\n                }\n            });\n     }\n\n    // CMS Editor: resetInlineEditors\n    _resetInlineEditors () {\n        this.destroyAll();\n        this.initAll();\n    }\n\n    // CMS Editor: loadToolbar\n    // Load the toolbar after saving for update\n    _loadToolbar () {\n        if (this.CMS) {\n            const $ = this.CMS.$;\n            this.CMS.API.StructureBoard._loadToolbar()\n                .done((newToolbar) => {\n                    this.CMS.API.Toolbar._refreshMarkup($(newToolbar).find('.cms-toolbar'));\n                })\n                .fail(() => this.CMS.API.Helpers.reloadBrowser());\n        }\n    }\n\n    _highlightTextplugin (pluginId) {\n        const HIGHLIGHT_TIMEOUT = 800;\n\n        if (this.CMS) {\n            const $ = this.CMS.$;\n            const draggable = $('.cms-draggable-' + pluginId);\n            const doc = $(document);\n            const currentExpandmode = doc.data('expandmode');\n\n\n            // expand necessary parents\n            doc.data('expandmode', false);\n            draggable\n                .parents('.cms-draggable')\n                .find('> .cms-dragitem-collapsable:not(\".cms-dragitem-expanded\") > .cms-dragitem-text')\n                .each((i, el) => {\n                    $(el).triggerHandler(this.CMS.Plugin.click);\n                });\n            if (draggable.length > 0) {  // Expanded elements available\n                setTimeout(function () {\n                    doc.data('expandmode', currentExpandmode);\n                });\n                setTimeout( () => {\n                    this.CMS.Plugin._highlightPluginStructure(draggable.find('.cms-dragitem:first'),\n                        {successTimeout: 200, delay: 2000, seeThrough: true});\n                }, HIGHLIGHT_TIMEOUT);\n            }\n        }\n    }\n\n    // Wrap wrapper around nodes\n    // Just pass a collection of nodes, and a wrapper element\n    _wrapAll (nodes, wrapper) {\n        // Cache the current parent and previous sibling of the first node.\n        const parent = nodes[0].parentNode;\n        const previousSibling = nodes[0].previousSibling;\n\n        // Place each node in wrapper.\n        //  - If nodes is an array, we must increment the index we grab from\n        //    after each loop.\n        //  - If nodes is a NodeList, each node is automatically removed from\n        //    the NodeList when it is removed from its parent with appendChild.\n        for (let i = 0; nodes.length - i; wrapper.firstChild === nodes[0] && i++) {\n            wrapper.appendChild(nodes[i]);\n        }\n\n        // Place the wrapper just after the cached previousSibling,\n        // or if that is null, just before the first child.\n        const nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\n        parent.insertBefore(wrapper, nextSibling);\n\n        return wrapper;\n    }\n}\n\n// Create global editor object\nwindow.CMS_Editor = new CMSEditor();\n\n"],"names":[],"sourceRoot":""}