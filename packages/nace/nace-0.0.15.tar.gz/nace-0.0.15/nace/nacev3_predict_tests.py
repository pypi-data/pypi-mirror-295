from agent_module import Agent
from nace_v3 import _plan, _predict_next_world_state
from world_module import left, right, up, down
from world_module_numpy import NPWorld


def t1():
    """
    Check a known world, that we will go for the food over short distance.

    @return:
    """

    world_str_list = [
        ['oooooooooooo',
         'o   o fx   o',
         'o          o',
         'o   oooooooo',
         'o       u  o',
         'o          o',
         'oooooooooooo'], (), ['25.0,25.0,25.0,23.0,24.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,',
                               '25.0,25.0,25.0,23.0,24.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,',
                               '20.0,21.0,22.0,23.0,24.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,',
                               '20.0,21.0,22.0,23.0,24.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,',
                               '20.0,21.0,22.0,23.0,24.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,',
                               '19.0,19.0,19.0,19.0,19.0,19.0,19.0,16.0,15.0,14.0,13.0,12.0,',
                               '18.0,18.0,18.0,18.0,18.0,18.0,18.0,16.0,15.0,14.0,13.0,12.0,']]
    rules = {((left, (), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0,))),
             ((left, (), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0,))),
             ((up, (), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0,))),
             ((down, (), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0,))),
             ((up, (), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0,))),
             ((up, (), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0,))),
             ((right, (), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0,))),
             ((up, (), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0,))),
             ((right, (), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0,))),
             ((down, (), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0,))),
             ((down, (), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0,))),
             ((down, (), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0,))),
             ((right, (), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0,))),
             ((left, (), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0,))),
             ((down, (), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0,))),
             ((right, (), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0,))),
             ((right, (), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0,))),
             ((left, (), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0,))),
             ((left, (), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0,))),
             ((up, (), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0,))),

             ((left, (), (0, 0, 'f'), (0, 1, 'x')), (0, 0, 'x', (1,))),
             ((up, (), (0, 0, 'f'), (1, 0, 'x')), (0, 0, 'x', (1,))),
             ((left, (), (0, -1, 'f'), (0, 0, 'x')), (0, 0, ' ', (1,))),
             ((down, (), (0, 0, 'x'), (1, 0, 'f')), (0, 0, ' ', (1,))),
             ((down, (), (-1, 0, 'x'), (0, 0, 'f')), (0, 0, 'x', (1,))),
             ((up, (), (-1, 0, 'f'), (0, 0, 'x')), (0, 0, ' ', (1,))),
             ((right, (), (0, 0, 'x'), (0, 1, 'f')), (0, 0, ' ', (1,))),
             ((right, (), (0, -1, 'x'), (0, 0, 'f')), (0, 0, 'x', (1,))),
             }

    focus_set = {'f': 1, 'u': 1, 'x': 9}
    agent = Agent((8, 1), 0, ())

    world = NPWorld.from_string_list(world_str_list)

    action = left

    (newworld, AIRIS_confidence, age, value_deltas_inc_score,  # delta of all values including score
    score_delta ) = _predict_next_world_state(focus_set, world, action, rules,
                              agent)

    assert score_delta > 0.0
    assert AIRIS_confidence == float('-inf')



if __name__ == "__main__":
    t1()
