import unittest
from unittest.mock import patch, MagicMock

from nace.agent_module import Agent
# Assuming the _observe function is in a module named `observation`
from nace.nace_v3 import _observe
from nace.world_module import left, right, up, down
from nace.world_module_numpy import NPWorld


# class TestObserveFunction(unittest.TestCase):
#
#     @patch('nace.nace_v3._build_change_sets')
#     @patch('nace.nace_v3.Hypothesis_ValidCondition')
#     @patch('nace.nace_v3.Hypothesis_Confirmed')
#     @patch('nace.nace_v3._match_hypotheses')
#     @patch('nace.nace_v3._is_presently_observed')
#     @patch('nace.nace_v3.Hypothesis_Contradicted')
#     def test_observe_basic(self, mock_contradicted, mock_observed, mock_match, mock_confirmed, mock_valid, mock_build):
#         # Mock the return values for the patched functions
#         mock_build.return_value = ({}, [], 3)
#         mock_valid.return_value = True
#         mock_confirmed.return_value = ({}, [])
#         mock_match.return_value = ({}, 0)
#         mock_observed.return_value = True
#         mock_contradicted.return_value = ({}, [], [])
#
#         # Mock inputs
#         focus_set = {'T': 0, 'u': 7, 'x': 35}
#         rule_evidence = {((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (1, 0),
#                          ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (1, 0),
#                          ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))): (1, 0),
#                          ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))): (1, 0),
#                          ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
#                          ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
#                          ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
#                          ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
#                          ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
#                          ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
#                          ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (2, 0),
#                          ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0),
#                          ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
#                          ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0)}
#         oldworld = MagicMock()
#         oldworld.get_char_at.return_value = 'A'
#         oldworld.get_height_width.return_value = (10, 10)
#         action = 'move'
#         newworld = MagicMock()
#         newworld.get_char_at.return_value = 'B'
#         newworld.get_newest_time.return_value = 1
#         oldrules = {((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))),
#                     ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
#                     ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
#                     ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))),
#                     ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
#                     ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
#                     ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
#                     ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))),
#                     ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
#                     ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))),
#                     ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
#                     ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
#                     ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
#                     ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))),
#                     ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
#                     ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
#                     ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
#                     ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))),
#                     ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
#                     ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0)))}
#         oldnegrules = []
#         predictedworld = MagicMock()
#         pre_action_agent = MagicMock()
#         pre_action_agent.get_values_exc_score.return_value = [0]
#         pre_action_agent.get_values_inc_score.return_value = [0, 0]
#         ground_truth_post_action_agent = MagicMock()
#         ground_truth_post_action_agent.get_score.return_value = 1
#         ground_truth_post_action_agent.get_values_inc_score.return_value = [1, 0]
#         unobserved_code = '.'
#         object_count_threshold = 5
#
#         # Call the function
#         focus_set, rule_evidence, new_rules, new_negrules = _observe(
#             focus_set, rule_evidence, oldworld, action, newworld, oldrules, oldnegrules,
#             predictedworld, pre_action_agent, ground_truth_post_action_agent, unobserved_code, object_count_threshold
#         )
#
#         # Assertions to check the function behavior
#         self.assertEqual(new_rules, [])  # Check that new_rules is an empty list
#         # Add more assertions based on expected behavior


class TestObserveFunction2(unittest.TestCase):
    # inputs
    original_focus_set = {'u': 2, 'x': 14, 'T': 0}
    original_rule_evidence = {((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))): (1, 0),
                              ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (4, 0),
                              ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (2, 0),
                              ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))): (7, 0),
                              ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (4, 0),
                              ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (2, 0),
                              ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (7, 0),
                              ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (2, 0),
                              ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0),
                              ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
                              ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))): (2, 0),
                              ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0)}

    oldworld_str_list = [
        ['.oooooooooo.',
         '.          .',
         'o   u      .',
         'o    xooooT.',
         'o          .',
         'o        ...',
         'oooooooo....'],
        (),  # 0,0
        ['-inf, 12, 12, 12, 12, 12, 12, 12, 11, 10, 9, -inf,',
         '-inf, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '-1, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '2, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '2, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '2, 13, 15, 15, 15, 15, 15, 15, 15, -inf, -inf, -inf,',
         '2, 4, 4, 4, 4, 4, 4, 4, -inf, -inf, -inf, -inf,']]
    oldworld = NPWorld.from_string_list(oldworld_str_list, view_dist_x=12, view_dist_y=5)
    old_agent = Agent(xy_loc=[5, 3], score=0, values_exc_score=[0])
    action = up

    newworld_str_list = [
        ['.oooooooooo.',
         '.          .',
         'o   ux     .',
         'o     ooooT.',
         'o          .',
         'o        ...',
         'oooooooo....'],
        (),  # 0,0
        ['-inf, 12, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '-inf, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '-1, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '2, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '2, 13, 15, 15, 15, 15, 15, 15, 15, 10, 9, -inf,',
         '2, 13, 14, 14, 14, 14, 14, 14, 14, -inf, -inf, -inf,',
         '2, 4, 4, 4, 4, 4, 4, 4, -inf, -inf, -inf, -inf,']]

    newworld = NPWorld.from_string_list(newworld_str_list, view_dist_x=12, view_dist_y=5)
    new_agent = Agent(xy_loc=[5, 2], score=0, values_exc_score=[0])

    oldrules = {((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))),
                ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))),
                ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))),
                ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0)))}
    oldnegrules = set()
    # outputs
    focus_set = {'u': 2, 'x': 15, 'T': 0}
    rule_evidence = {((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))): (1, 0),
                     ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (4, 0),
                     ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (3, 0),
                     ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))): (7, 0),
                     ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (4, 0),
                     ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (3, 0),
                     ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (7, 0),
                     ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (2, 0),
                     ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0),
                     ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
                     ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))): (2, 0),
                     ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0)}
    newrules = {((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))),
                ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))),
                ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))),
                ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0)))}
    newnegrules = set()

    # Call the function
    calculated_focus_set, calculated_rule_evidence, calculated_new_rules, calculated_new_negrules = _observe(
        focus_set, rule_evidence, oldworld, action, newworld, oldrules, oldnegrules,
        newworld, pre_action_agent=old_agent, ground_truth_post_action_agent=new_agent, unobserved_code='.',
        object_count_threshold=1
    )

    # Assertions to check the function behavior
    assert calculated_focus_set == focus_set
    assert calculated_rule_evidence == rule_evidence

    assert calculated_new_rules == newrules
    assert calculated_new_negrules == newnegrules
    pass


class TestObserveFunction3(unittest.TestCase):
    original_focus_set = {'u': 1, 'x': 6}
    original_rule_evidence = {((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))): (2, 0),
                              ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))): (2, 0),
                              ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (1, 0),
                              ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (2, 0),
                              ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (2, 0),
                              ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (2, 0),
                              ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (2, 0),
                              ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                              ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                              ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0),
                              ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
                              ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
                              ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0)}
    oldworld_string_list = (
    ['.ooooooo....',
     '.       ....',
     'o   x   ....', 'o   u oo....', 'o       ....', 'o       ....', 'oooooooo....'],
    (0, 0), ['-inf,7,7,7,7,7,7,7,-inf,-inf,-inf,-inf,', '-inf,7,7,7,7,7,7,7,-inf,-inf,-inf,-inf,',
             '3,7,7,7,7,7,7,7,-inf,-inf,-inf,-inf,', '3,7,7,7,7,7,7,7,-inf,-inf,-inf,-inf,',
             '3,7,7,7,7,7,7,7,-inf,-inf,-inf,-inf,', '3,5,5,5,5,5,5,5,-inf,-inf,-inf,-inf,',
             '3,4,4,4,4,4,4,4,-inf,-inf,-inf,-inf,'])
    oldworld = NPWorld.from_string_list(oldworld_string_list, view_dist_x=12, view_dist_y=5)
    old_agent = Agent(xy_loc=[4, 2], score=0, values_exc_score=[0])

    action = right
    newworld_string_list = (
    ['.oooooooo...',
     '.        ...',
     'o    x   ...', 'o   u ooo...', 'o        ...', 'o       ....', 'oooooooo....'],
    (0, 0), ['-inf,6,7,7,7,7,7,7,7,-inf,-inf,-inf,', '-inf,6,7,7,7,7,7,7,7,-inf,-inf,-inf,',
             '3,6,7,7,7,7,7,7,7,-inf,-inf,-inf,', '3,6,7,7,7,7,7,7,7,-inf,-inf,-inf,',
             '3,6,7,7,7,7,7,7,7,-inf,-inf,-inf,', '3,5,5,5,5,5,5,5,-inf,-inf,-inf,-inf,',
             '3,4,4,4,4,4,4,4,-inf,-inf,-inf,-inf,'])
    newworld = NPWorld.from_string_list(newworld_string_list, view_dist_x=12, view_dist_y=5)
    new_agent = Agent(xy_loc=[5, 2], score=0, values_exc_score=[0])

    oldrules = {((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))),
                ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))),
                ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0)))}
    oldnegrules = set()
    # outputs
    focus_set = {'u': 1, 'x': 7}
    rule_evidence = {((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))): (3, 0),
                     ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))): (2, 0),
                     ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (1, 0),
                     ((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))): (2, 0),
                     ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (3, 0),
                     ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))): (2, 0),
                     ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (2, 0),
                     ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))): (1, 0),
                     ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0))): (1, 0),
                     ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0),
                     ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
                     ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))): (1, 0),
                     ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))): (1, 0)}
    newrules = {((up, (0,), (-1, 0, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((up, (0,), (-1, 0, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, 'u'), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, ' '), (1, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, -1, 'o'), (0, 0, 'x')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, 0, ' '), (0, 1, 'x')), (0, 0, 'x', (0, 0))),
                ((up, (0,), (0, 0, 'o'), (1, 0, 'x')), (0, 0, 'o', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, -1, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, ' ')), (0, 0, ' ', (0, 0))),
                ((up, (0,), (-1, 0, 'u'), (0, 0, 'x')), (0, 0, 'u', (0, 0))),
                ((left, (0,), (0, -1, ' '), (0, 0, 'x')), (0, 0, ' ', (0, 0))),
                ((down, (0,), (-1, 0, 'x'), (0, 0, 'o')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'u')), (0, 0, 'u', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, ' ')), (0, 0, ' ', (0, 0))),
                ((left, (0,), (0, 0, 'o'), (0, 1, 'x')), (0, 0, 'o', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, ' ')), (0, 0, 'x', (0, 0))),
                ((right, (0,), (0, 0, 'x'), (0, 1, 'o')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'o')), (0, 0, 'x', (0, 0))),
                ((down, (0,), (0, 0, 'x'), (1, 0, 'u')), (0, 0, 'u', (0, 0))),
                ((right, (0,), (0, -1, 'x'), (0, 0, 'u')), (0, 0, 'x', (0, 0))),
                ((left, (0,), (0, 0, 'u'), (0, 1, 'x')), (0, 0, 'x', (0, 0)))}
    newnegrules = set()

    # Call the function
    calculated_focus_set, calculated_rule_evidence, calculated_new_rules, calculated_new_negrules = _observe(
        focus_set, rule_evidence, oldworld, action, newworld, oldrules, oldnegrules,
        newworld, pre_action_agent=old_agent, ground_truth_post_action_agent=new_agent, unobserved_code='.',
        object_count_threshold=1
    )

    # Assertions to check the function behavior
    assert calculated_focus_set == focus_set
    assert calculated_rule_evidence == rule_evidence

    assert calculated_new_rules == newrules
    assert calculated_new_negrules == newnegrules


if __name__ == '__main__':
    unittest.main()
