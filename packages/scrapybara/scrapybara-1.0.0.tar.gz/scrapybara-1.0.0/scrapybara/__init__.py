# coding: utf-8

# flake8: noqa

"""
    Scrapybara API

    Scrapybara API provides web automation, capybara-style. It allows users to generate, execute, and manage scripts.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


__version__ = "1.0.0"

from typing import Union, Dict, Any

# import apis into sdk package
from scrapybara.api.helpers_api import HelpersApi
from scrapybara.api.script_execution_api import ScriptExecutionApi
from scrapybara.api.script_generation_api import ScriptGenerationApi
from scrapybara.api.script_management_api import ScriptManagementApi

# import ApiClient
from scrapybara.api_response import ApiResponse
from scrapybara.api_client import ApiClient
from scrapybara.configuration import Configuration
from scrapybara.exceptions import OpenApiException
from scrapybara.exceptions import ApiTypeError
from scrapybara.exceptions import ApiValueError
from scrapybara.exceptions import ApiKeyError
from scrapybara.exceptions import ApiAttributeError
from scrapybara.exceptions import ApiException

# import models into sdk package
from scrapybara.models.execute_script_request import ExecuteScriptRequest
from scrapybara.models.execute_script_response import ExecuteScriptResponse
from scrapybara.models.fetch_html_request import FetchHtmlRequest
from scrapybara.models.fetch_html_response import FetchHtmlResponse
from scrapybara.models.generate_script_request import GenerateScriptRequest
from scrapybara.models.generate_script_response import GenerateScriptResponse
from scrapybara.models.get_script_response import GetScriptResponse

class ScrapybaraClient:
    def __init__(self, api_key: str):
        self.configuration = Configuration(api_key={"ApiKeyAuth": api_key})
        self.api_client = ApiClient(self.configuration)
        
        self.helpersapi = HelpersApi(self.api_client)
        
        self.scriptexecutionapi = ScriptExecutionApi(self.api_client)
        
        self.scriptgenerationapi = ScriptGenerationApi(self.api_client)
        
        self.scriptmanagementapi = ScriptManagementApi(self.api_client)
        

    
    def fetch_html(self, fetch_html_request: Union[Dict[str, Any], FetchHtmlRequest]) -> FetchHtmlResponse:
        if isinstance(fetch_html_request, dict):
            fetch_html_request = FetchHtmlRequest(**fetch_html_request)
        return self.helpersapi.fetch_html(fetch_html_request=fetch_html_request)

    
    def execute_script(self, execute_script_request: Union[Dict[str, Any], ExecuteScriptRequest]) -> ExecuteScriptResponse:
        if isinstance(execute_script_request, dict):
            execute_script_request = ExecuteScriptRequest(**execute_script_request)
        return self.scriptexecutionapi.execute_script(execute_script_request=execute_script_request)

    
    def generate_script(self, generate_script_request: Union[Dict[str, Any], GenerateScriptRequest]) -> GenerateScriptResponse:
        if isinstance(generate_script_request, dict):
            generate_script_request = GenerateScriptRequest(**generate_script_request)
        return self.scriptgenerationapi.generate_script(generate_script_request=generate_script_request)

    
    def delete_script(self, script_id: str) -> None:
        return self.scriptmanagementapi.delete_script(script_id=script_id)

    
    def get_script(self, script_id: str) -> GetScriptResponse:
        return self.scriptmanagementapi.get_script(script_id=script_id)

    

