from collections import deque
from types import CodeType
from typing import Any, Callable, Dict, List, Tuple

class Aggregation:
    function_id: str
    total_time: int
    total_calls: int
    total_squared_time: int
    exceptions: Dict[str, int]
    callers: Tuple[CodeType]
    sketch_data: SketchData

class SketchData:
    data: List[int]
    index_shift: int
    bin_width: float

    def __init__(self, bin_width: float) -> None: ...
    def add(self, value: float) -> None: ...

class HudContextManager:
    def __init__(self, function_id: str) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

def get_and_swap_aggregations() -> Dict[str, Aggregation]: ...
def check_marked_code(code: CodeType) -> bool: ...
def get_queue() -> deque[Any]: ...
def get_queue_append_method() -> Callable[[Any], None]: ...
def get_time() -> int: ...
def get_hud_running_mode() -> bool: ...
def set_hud_running_mode(value: bool) -> None: ...
def set_frame_eval_hook() -> None: ...
