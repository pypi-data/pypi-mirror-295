/**
 * @file        xhr.simple
 *
 *              Simple smoke test which ensures that XMLHttpRequest is initialized, that the 
 *              constructor works, and that it can send requests and receive responses.
 *
 * @author      Caleb Aikens, caleb@distributive.network
 * @date        September 2023
 */

const expectedBody = `<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
`;

new Promise(function (resolve, reject) 
{
  let xhr = new XMLHttpRequest();
  xhr.open('GET', 'http://www.example.org/');

  xhr.onload = function () 
  {
    if (this.status >= 200 && this.status < 300) 
    {
      resolve(this.response);
    }
    else 
    {
      reject(new Error(JSON.stringify({
        status: this.status,
        statusText: this.statusText
      })));
    }
  };

  xhr.onerror = function (ev) 
  {
    reject(ev.error);
  };

  xhr.send();
}).then((value) => 
{
  if (value !== expectedBody) 
  {
    console.error('expected ', expectedBody, ' but got ', value);
    throw new Error('Test failed');
  }
  console.log('Test passed');
}).catch((error) => 
{
  throw error;
});


new Promise(function (resolve, reject) 
{
  let xhr = new XMLHttpRequest();
  xhr.open('POST', 'http://httpbin.org/post');

  xhr.onload = function () 
  {
    if (this.status >= 200 && this.status < 300) 
    {
      resolve(this.response);
    }
    else 
    {
      reject(new Error(JSON.stringify({
        status: this.status,
        statusText: this.statusText
      })));
    }
  };

  xhr.onerror = function (ev) 
  {
    reject(ev.error);
  };

  xhr.send();
}).then((value) => 
{
  value = JSON.parse(value);
  if (!value['headers']['User-Agent'].startsWith('Python/')) 
  {
    console.error('expected Python/* User-Agent, but got ', value.headers['User-Agent']);
  }
  console.log('Test passed');
}).catch((error) => 
{
  throw error;
});