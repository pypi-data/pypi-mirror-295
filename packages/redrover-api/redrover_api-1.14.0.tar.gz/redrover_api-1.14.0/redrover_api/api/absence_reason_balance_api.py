# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr

from typing import List, Optional

from redrover_api.models.absence_reason_balance_create_request import AbsenceReasonBalanceCreateRequest
from redrover_api.models.absence_reason_balance_response import AbsenceReasonBalanceResponse
from redrover_api.models.absence_reason_balance_update_request import AbsenceReasonBalanceUpdateRequest
from redrover_api.models.ok_object_result import OkObjectResult

from redrover_api.api_client import ApiClient
from redrover_api.api_response import ApiResponse
from redrover_api.rest import RESTResponseType


class AbsenceReasonBalanceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_absence_reason_balance(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        absence_reason_balance_create_request: Optional[AbsenceReasonBalanceCreateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AbsenceReasonBalanceResponse:
        """Create Absence Reason Balance

        Create new Absence Reason Balance for an Employee

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param absence_reason_balance_create_request:
        :type absence_reason_balance_create_request: AbsenceReasonBalanceCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            absence_reason_balance_create_request=absence_reason_balance_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '400': "BadRequestResult",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_absence_reason_balance_with_http_info(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        absence_reason_balance_create_request: Optional[AbsenceReasonBalanceCreateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AbsenceReasonBalanceResponse]:
        """Create Absence Reason Balance

        Create new Absence Reason Balance for an Employee

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param absence_reason_balance_create_request:
        :type absence_reason_balance_create_request: AbsenceReasonBalanceCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            absence_reason_balance_create_request=absence_reason_balance_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '400': "BadRequestResult",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_absence_reason_balance_without_preload_content(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        absence_reason_balance_create_request: Optional[AbsenceReasonBalanceCreateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Absence Reason Balance

        Create new Absence Reason Balance for an Employee

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param absence_reason_balance_create_request:
        :type absence_reason_balance_create_request: AbsenceReasonBalanceCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            absence_reason_balance_create_request=absence_reason_balance_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '400': "BadRequestResult",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_absence_reason_balance_serialize(
        self,
        org_id,
        employee_identifier,
        absence_reason_balance_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgId'] = org_id
        if employee_identifier is not None:
            _path_params['employeeIdentifier'] = employee_identifier
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if absence_reason_balance_create_request is not None:
            _body_params = absence_reason_balance_create_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_absence_reason_balance(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OkObjectResult:
        """Delete Absence Reason Balance

        Delete an Absence Reason Balance for an Employee by its Red Rover Id (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OkObjectResult",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_absence_reason_balance_with_http_info(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OkObjectResult]:
        """Delete Absence Reason Balance

        Delete an Absence Reason Balance for an Employee by its Red Rover Id (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OkObjectResult",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_absence_reason_balance_without_preload_content(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Absence Reason Balance

        Delete an Absence Reason Balance for an Employee by its Red Rover Id (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OkObjectResult",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_absence_reason_balance_serialize(
        self,
        org_id,
        employee_identifier,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgId'] = org_id
        if employee_identifier is not None:
            _path_params['employeeIdentifier'] = employee_identifier
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_absence_reason_balance(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AbsenceReasonBalanceResponse:
        """Get Absence Reason Balance

        Gets a specific Absence Reason Balance by its Red Rover Id  (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_absence_reason_balance_with_http_info(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AbsenceReasonBalanceResponse]:
        """Get Absence Reason Balance

        Gets a specific Absence Reason Balance by its Red Rover Id  (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_absence_reason_balance_without_preload_content(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Absence Reason Balance

        Gets a specific Absence Reason Balance by its Red Rover Id  (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_absence_reason_balance_serialize(
        self,
        org_id,
        employee_identifier,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgId'] = org_id
        if employee_identifier is not None:
            _path_params['employeeIdentifier'] = employee_identifier
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_absence_reason_balances(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        school_year_id: Annotated[Optional[StrictInt], Field(description="Filter by school year (optional)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AbsenceReasonBalanceResponse]:
        """Get Absence Reason Balances

        Get Absence Reason Balance for an employee

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param school_year_id: Filter by school year (optional)
        :type school_year_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_absence_reason_balances_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            school_year_id=school_year_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AbsenceReasonBalanceResponse]",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_absence_reason_balances_with_http_info(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        school_year_id: Annotated[Optional[StrictInt], Field(description="Filter by school year (optional)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AbsenceReasonBalanceResponse]]:
        """Get Absence Reason Balances

        Get Absence Reason Balance for an employee

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param school_year_id: Filter by school year (optional)
        :type school_year_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_absence_reason_balances_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            school_year_id=school_year_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AbsenceReasonBalanceResponse]",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_absence_reason_balances_without_preload_content(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        school_year_id: Annotated[Optional[StrictInt], Field(description="Filter by school year (optional)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Absence Reason Balances

        Get Absence Reason Balance for an employee

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param school_year_id: Filter by school year (optional)
        :type school_year_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_absence_reason_balances_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            school_year_id=school_year_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AbsenceReasonBalanceResponse]",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_absence_reason_balances_serialize(
        self,
        org_id,
        employee_identifier,
        school_year_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgId'] = org_id
        if employee_identifier is not None:
            _path_params['employeeIdentifier'] = employee_identifier
        # process the query parameters
        if school_year_id is not None:
            
            _query_params.append(('schoolYearId', school_year_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_absence_reason_balance(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        absence_reason_balance_update_request: Optional[AbsenceReasonBalanceUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AbsenceReasonBalanceResponse:
        """Update Absence Reason Balance

        Update an Absence Reason Balance for an Employee by its Red Rover Id (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param absence_reason_balance_update_request:
        :type absence_reason_balance_update_request: AbsenceReasonBalanceUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            absence_reason_balance_update_request=absence_reason_balance_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_absence_reason_balance_with_http_info(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        absence_reason_balance_update_request: Optional[AbsenceReasonBalanceUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AbsenceReasonBalanceResponse]:
        """Update Absence Reason Balance

        Update an Absence Reason Balance for an Employee by its Red Rover Id (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param absence_reason_balance_update_request:
        :type absence_reason_balance_update_request: AbsenceReasonBalanceUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            absence_reason_balance_update_request=absence_reason_balance_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_absence_reason_balance_without_preload_content(
        self,
        org_id: Annotated[StrictInt, Field(description="The Red Rover Id of the Organization")],
        employee_identifier: Annotated[StrictStr, Field(description="The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`)")],
        id: Annotated[StrictInt, Field(description="The id of the AbsenceReasonBalance")],
        absence_reason_balance_update_request: Optional[AbsenceReasonBalanceUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update Absence Reason Balance

        Update an Absence Reason Balance for an Employee by its Red Rover Id (numeric)

        :param org_id: The Red Rover Id of the Organization (required)
        :type org_id: int
        :param employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pipe character `|` (e.g. `|ABC123`) (required)
        :type employee_identifier: str
        :param id: The id of the AbsenceReasonBalance (required)
        :type id: int
        :param absence_reason_balance_update_request:
        :type absence_reason_balance_update_request: AbsenceReasonBalanceUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_absence_reason_balance_serialize(
            org_id=org_id,
            employee_identifier=employee_identifier,
            id=id,
            absence_reason_balance_update_request=absence_reason_balance_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AbsenceReasonBalanceResponse",
            '401': None,
            '404': "NotFoundResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_absence_reason_balance_serialize(
        self,
        org_id,
        employee_identifier,
        id,
        absence_reason_balance_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgId'] = org_id
        if employee_identifier is not None:
            _path_params['employeeIdentifier'] = employee_identifier
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if absence_reason_balance_update_request is not None:
            _body_params = absence_reason_balance_update_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


