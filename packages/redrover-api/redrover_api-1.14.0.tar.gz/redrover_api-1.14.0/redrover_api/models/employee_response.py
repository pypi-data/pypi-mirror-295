# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from redrover_api.models.position_response import PositionResponse
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EmployeeResponse(BaseModel):
    """
    Employee
    """ # noqa: E501
    positions: Optional[List[PositionResponse]] = Field(default=None, description="The Positions that belong to the employee")
    id: Optional[StrictInt] = Field(default=None, description="The Red Rover internal Id of OrgUser (numeric)")
    org_id: Optional[StrictInt] = Field(default=None, description="The Red Rover internal Id of Organization (numeric)", alias="orgId")
    created_utc: Optional[datetime] = Field(default=None, description="When the User was created", alias="createdUtc")
    changed_utc: Optional[datetime] = Field(default=None, description="When the User's record was last changed", alias="changedUtc")
    external_id: Optional[StrictStr] = Field(default=None, description="The external Id of OrgUser (alpha-numeric)", alias="externalId")
    first_name: Optional[StrictStr] = Field(default=None, description="The User's first name", alias="firstName")
    middle_name: Optional[StrictStr] = Field(default=None, description="The User's middle name", alias="middleName")
    last_name: Optional[StrictStr] = Field(default=None, description="The User's last name", alias="lastName")
    email: Optional[StrictStr] = Field(default=None, description="The User's email")
    notification_email: Optional[StrictStr] = Field(default=None, description="The User's notification email (for SSO organizations only)", alias="notificationEmail")
    login_email: Optional[StrictStr] = Field(default=None, description="The User's Login email (for SSO organizations only)", alias="loginEmail")
    date_of_birth: Optional[datetime] = Field(default=None, description="The User's date of birth", alias="dateOfBirth")
    address1: Optional[StrictStr] = Field(default=None, description="The User's address")
    address2: Optional[StrictStr] = Field(default=None, description="The User's address (continued)")
    city: Optional[StrictStr] = Field(default=None, description="The User's city")
    state: Optional[StrictInt] = None
    postal_code: Optional[StrictStr] = Field(default=None, description="The User's postal code", alias="postalCode")
    country: Optional[StrictInt] = None
    phone_number: Optional[StrictStr] = Field(default=None, description="The User's phone number", alias="phoneNumber")
    active: Optional[StrictBool] = Field(default=None, description="If the user is active")
    permission_set_id: Optional[StrictInt] = Field(default=None, description="The Red Rover internal Id of PermissionSet (numeric)", alias="permissionSetId")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Is the User Deleted", alias="isDeleted")
    __properties: ClassVar[List[str]] = ["positions", "id", "orgId", "createdUtc", "changedUtc", "externalId", "firstName", "middleName", "lastName", "email", "notificationEmail", "loginEmail", "dateOfBirth", "address1", "address2", "city", "state", "postalCode", "country", "phoneNumber", "active", "permissionSetId", "isDeleted"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EmployeeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item in self.positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['positions'] = _items
        # set to None if positions (nullable) is None
        # and model_fields_set contains the field
        if self.positions is None and "positions" in self.model_fields_set:
            _dict['positions'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middleName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if notification_email (nullable) is None
        # and model_fields_set contains the field
        if self.notification_email is None and "notification_email" in self.model_fields_set:
            _dict['notificationEmail'] = None

        # set to None if login_email (nullable) is None
        # and model_fields_set contains the field
        if self.login_email is None and "login_email" in self.model_fields_set:
            _dict['loginEmail'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['dateOfBirth'] = None

        # set to None if address1 (nullable) is None
        # and model_fields_set contains the field
        if self.address1 is None and "address1" in self.model_fields_set:
            _dict['address1'] = None

        # set to None if address2 (nullable) is None
        # and model_fields_set contains the field
        if self.address2 is None and "address2" in self.model_fields_set:
            _dict['address2'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phoneNumber'] = None

        # set to None if permission_set_id (nullable) is None
        # and model_fields_set contains the field
        if self.permission_set_id is None and "permission_set_id" in self.model_fields_set:
            _dict['permissionSetId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EmployeeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "positions": [PositionResponse.from_dict(_item) for _item in obj.get("positions")] if obj.get("positions") is not None else None,
            "id": obj.get("id"),
            "orgId": obj.get("orgId"),
            "createdUtc": obj.get("createdUtc"),
            "changedUtc": obj.get("changedUtc"),
            "externalId": obj.get("externalId"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "lastName": obj.get("lastName"),
            "email": obj.get("email"),
            "notificationEmail": obj.get("notificationEmail"),
            "loginEmail": obj.get("loginEmail"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postalCode": obj.get("postalCode"),
            "country": obj.get("country"),
            "phoneNumber": obj.get("phoneNumber"),
            "active": obj.get("active"),
            "permissionSetId": obj.get("permissionSetId"),
            "isDeleted": obj.get("isDeleted")
        })
        return _obj


