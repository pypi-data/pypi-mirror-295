# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from redrover_api.models.accounting_code_allocation_response import AccountingCodeAllocationResponse
from redrover_api.models.contract_light_response import ContractLightResponse
from redrover_api.models.int32_id_name_class import Int32IdNameClass
from redrover_api.models.position_schedule_mode_enum import PositionScheduleModeEnum
from redrover_api.models.simple_person import SimplePerson
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PositionResponse(BaseModel):
    """
    Position
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="The code of the position")
    start_date: Optional[datetime] = Field(default=None, description="The date the position begins", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="The date the position ends", alias="endDate")
    default_accounting_codes_from_schedule: Optional[StrictBool] = Field(default=None, alias="defaultAccountingCodesFromSchedule")
    needs_replacement: Optional[StrictInt] = Field(default=None, alias="needsReplacement")
    contract: Optional[ContractLightResponse] = None
    position_type: Optional[Int32IdNameClass] = Field(default=None, alias="positionType")
    position_schedule_mode: Optional[PositionScheduleModeEnum] = Field(default=None, alias="positionScheduleMode")
    hours_per_full_work_day: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The hours worked in a full day", alias="hoursPerFullWorkDay")
    fte: Optional[Union[StrictFloat, StrictInt]] = None
    qualified_for_pto_as_of: Optional[datetime] = Field(default=None, description="When is the position qualified for PTO", alias="qualifiedForPtoAsOf")
    qualified_for_paid_holidays_as_of: Optional[datetime] = Field(default=None, description="When is the position qualified for holidays", alias="qualifiedForPaidHolidaysAsOf")
    accounting_code_allocations: Optional[List[AccountingCodeAllocationResponse]] = Field(default=None, description="List of accounting code allocations for the position", alias="accountingCodeAllocations")
    supervisor: Optional[SimplePerson] = None
    fallback_supervisors: Optional[List[SimplePerson]] = Field(default=None, description="List of of fallback supervisors of the employee for the position", alias="fallbackSupervisors")
    name: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    __properties: ClassVar[List[str]] = ["code", "startDate", "endDate", "defaultAccountingCodesFromSchedule", "needsReplacement", "contract", "positionType", "positionScheduleMode", "hoursPerFullWorkDay", "fte", "qualifiedForPtoAsOf", "qualifiedForPaidHolidaysAsOf", "accountingCodeAllocations", "supervisor", "fallbackSupervisors", "name", "id", "externalId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PositionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_type
        if self.position_type:
            _dict['positionType'] = self.position_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_code_allocations (list)
        _items = []
        if self.accounting_code_allocations:
            for _item in self.accounting_code_allocations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingCodeAllocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of supervisor
        if self.supervisor:
            _dict['supervisor'] = self.supervisor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fallback_supervisors (list)
        _items = []
        if self.fallback_supervisors:
            for _item in self.fallback_supervisors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fallbackSupervisors'] = _items
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if hours_per_full_work_day (nullable) is None
        # and model_fields_set contains the field
        if self.hours_per_full_work_day is None and "hours_per_full_work_day" in self.model_fields_set:
            _dict['hoursPerFullWorkDay'] = None

        # set to None if fte (nullable) is None
        # and model_fields_set contains the field
        if self.fte is None and "fte" in self.model_fields_set:
            _dict['fte'] = None

        # set to None if accounting_code_allocations (nullable) is None
        # and model_fields_set contains the field
        if self.accounting_code_allocations is None and "accounting_code_allocations" in self.model_fields_set:
            _dict['accountingCodeAllocations'] = None

        # set to None if fallback_supervisors (nullable) is None
        # and model_fields_set contains the field
        if self.fallback_supervisors is None and "fallback_supervisors" in self.model_fields_set:
            _dict['fallbackSupervisors'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PositionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "defaultAccountingCodesFromSchedule": obj.get("defaultAccountingCodesFromSchedule"),
            "needsReplacement": obj.get("needsReplacement"),
            "contract": ContractLightResponse.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "positionType": Int32IdNameClass.from_dict(obj.get("positionType")) if obj.get("positionType") is not None else None,
            "positionScheduleMode": obj.get("positionScheduleMode"),
            "hoursPerFullWorkDay": obj.get("hoursPerFullWorkDay"),
            "fte": obj.get("fte"),
            "qualifiedForPtoAsOf": obj.get("qualifiedForPtoAsOf"),
            "qualifiedForPaidHolidaysAsOf": obj.get("qualifiedForPaidHolidaysAsOf"),
            "accountingCodeAllocations": [AccountingCodeAllocationResponse.from_dict(_item) for _item in obj.get("accountingCodeAllocations")] if obj.get("accountingCodeAllocations") is not None else None,
            "supervisor": SimplePerson.from_dict(obj.get("supervisor")) if obj.get("supervisor") is not None else None,
            "fallbackSupervisors": [SimplePerson.from_dict(_item) for _item in obj.get("fallbackSupervisors")] if obj.get("fallbackSupervisors") is not None else None,
            "name": obj.get("name"),
            "id": obj.get("id"),
            "externalId": obj.get("externalId")
        })
        return _obj


