# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from redrover_api.models.day_of_week import DayOfWeek
from redrover_api.models.int32_locator_request import Int32LocatorRequest
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ContractUpdateRequest(BaseModel):
    """
    ContractUpdateRequest
    """ # noqa: E501
    number_of_days: StrictInt = Field(description="The length of the contract in days.", alias="numberOfDays")
    work_day_pattern: Int32LocatorRequest = Field(alias="workDayPattern")
    pay_cycle: Optional[Int32LocatorRequest] = Field(default=None, alias="payCycle")
    days_to_work: List[DayOfWeek] = Field(description="The days of the week that work is scheduled.", alias="daysToWork")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of object")
    external_id: Optional[StrictStr] = Field(default=None, description="The external ID of object (alpha-numeric)", alias="externalId")
    __properties: ClassVar[List[str]] = ["numberOfDays", "workDayPattern", "payCycle", "daysToWork", "name", "externalId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ContractUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of work_day_pattern
        if self.work_day_pattern:
            _dict['workDayPattern'] = self.work_day_pattern.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_cycle
        if self.pay_cycle:
            _dict['payCycle'] = self.pay_cycle.to_dict()
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ContractUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numberOfDays": obj.get("numberOfDays"),
            "workDayPattern": Int32LocatorRequest.from_dict(obj.get("workDayPattern")) if obj.get("workDayPattern") is not None else None,
            "payCycle": Int32LocatorRequest.from_dict(obj.get("payCycle")) if obj.get("payCycle") is not None else None,
            "daysToWork": obj.get("daysToWork"),
            "name": obj.get("name"),
            "externalId": obj.get("externalId")
        })
        return _obj


