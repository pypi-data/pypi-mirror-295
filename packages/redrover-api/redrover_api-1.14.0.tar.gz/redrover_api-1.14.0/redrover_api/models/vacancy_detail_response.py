# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from redrover_api.models.accounting_code_allocation_response import AccountingCodeAllocationResponse
from redrover_api.models.int32_id_name_class import Int32IdNameClass
from redrover_api.models.pay_code_response import PayCodeResponse
from redrover_api.models.simple_person import SimplePerson
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VacancyDetailResponse(BaseModel):
    """
    Vacancy Detail
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Id of the Vacancy Detail")
    assignment_id: Optional[StrictInt] = Field(default=None, description="Id of the Assignment", alias="assignmentId")
    substitute: Optional[SimplePerson] = None
    external_assignment_number: Optional[StrictStr] = Field(default=None, description="Assignment number to match another system", alias="externalAssignmentNumber")
    assignment_is_long_term: Optional[StrictBool] = Field(default=None, description="Is this assignment considered long term?", alias="assignmentIsLongTerm")
    assignment_notes: Optional[StrictStr] = Field(default=None, description="Notes about this assignment", alias="assignmentNotes")
    location: Optional[Int32IdNameClass] = None
    start: Optional[datetime] = Field(default=None, description="When the Vacancy starts")
    end: Optional[datetime] = Field(default=None, description="When the Vacancy ends")
    actual_duration_minutes: Optional[StrictInt] = Field(default=None, description="How long the Vacancy Detail is scheduled (minutes)", alias="actualDurationMinutes")
    accounting_codes: Optional[List[AccountingCodeAllocationResponse]] = Field(default=None, description="The Accounting codes associated with the Vacancy", alias="accountingCodes")
    pay_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Calculated Effective Duration (Days or Minutes)", alias="payDuration")
    pay_unit: Optional[StrictStr] = Field(default=None, description="The pay unit. ('DAYS', 'MINUTES')", alias="payUnit")
    pay_code: Optional[PayCodeResponse] = Field(default=None, alias="payCode")
    vacancy_reason: Optional[Int32IdNameClass] = Field(default=None, alias="vacancyReason")
    verified: Optional[StrictBool] = Field(default=None, description="If the Vacancy has been verified")
    verified_at_utc: Optional[datetime] = Field(default=None, description="When the Vacancy was verified", alias="verifiedAtUtc")
    verify_comment: Optional[StrictStr] = Field(default=None, description="Comment made when the Vacancy was verified", alias="verifyComment")
    verified_by: Optional[Int32IdNameClass] = Field(default=None, alias="verifiedBy")
    approval_status: Optional[StrictStr] = Field(default=None, description="The current approval status of the vacancy", alias="approvalStatus")
    approval_status_id: Optional[StrictInt] = Field(default=None, alias="approvalStatusId")
    needs_replacement: Optional[StrictBool] = Field(default=None, description="If the Vacancy Detail is in need of a replacement", alias="needsReplacement")
    __properties: ClassVar[List[str]] = ["id", "assignmentId", "substitute", "externalAssignmentNumber", "assignmentIsLongTerm", "assignmentNotes", "location", "start", "end", "actualDurationMinutes", "accountingCodes", "payDuration", "payUnit", "payCode", "vacancyReason", "verified", "verifiedAtUtc", "verifyComment", "verifiedBy", "approvalStatus", "approvalStatusId", "needsReplacement"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VacancyDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of substitute
        if self.substitute:
            _dict['substitute'] = self.substitute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in accounting_codes (list)
        _items = []
        if self.accounting_codes:
            for _item in self.accounting_codes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountingCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of pay_code
        if self.pay_code:
            _dict['payCode'] = self.pay_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vacancy_reason
        if self.vacancy_reason:
            _dict['vacancyReason'] = self.vacancy_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verified_by
        if self.verified_by:
            _dict['verifiedBy'] = self.verified_by.to_dict()
        # set to None if assignment_id (nullable) is None
        # and model_fields_set contains the field
        if self.assignment_id is None and "assignment_id" in self.model_fields_set:
            _dict['assignmentId'] = None

        # set to None if external_assignment_number (nullable) is None
        # and model_fields_set contains the field
        if self.external_assignment_number is None and "external_assignment_number" in self.model_fields_set:
            _dict['externalAssignmentNumber'] = None

        # set to None if assignment_is_long_term (nullable) is None
        # and model_fields_set contains the field
        if self.assignment_is_long_term is None and "assignment_is_long_term" in self.model_fields_set:
            _dict['assignmentIsLongTerm'] = None

        # set to None if assignment_notes (nullable) is None
        # and model_fields_set contains the field
        if self.assignment_notes is None and "assignment_notes" in self.model_fields_set:
            _dict['assignmentNotes'] = None

        # set to None if accounting_codes (nullable) is None
        # and model_fields_set contains the field
        if self.accounting_codes is None and "accounting_codes" in self.model_fields_set:
            _dict['accountingCodes'] = None

        # set to None if pay_unit (nullable) is None
        # and model_fields_set contains the field
        if self.pay_unit is None and "pay_unit" in self.model_fields_set:
            _dict['payUnit'] = None

        # set to None if verified_at_utc (nullable) is None
        # and model_fields_set contains the field
        if self.verified_at_utc is None and "verified_at_utc" in self.model_fields_set:
            _dict['verifiedAtUtc'] = None

        # set to None if verify_comment (nullable) is None
        # and model_fields_set contains the field
        if self.verify_comment is None and "verify_comment" in self.model_fields_set:
            _dict['verifyComment'] = None

        # set to None if approval_status (nullable) is None
        # and model_fields_set contains the field
        if self.approval_status is None and "approval_status" in self.model_fields_set:
            _dict['approvalStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VacancyDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "assignmentId": obj.get("assignmentId"),
            "substitute": SimplePerson.from_dict(obj.get("substitute")) if obj.get("substitute") is not None else None,
            "externalAssignmentNumber": obj.get("externalAssignmentNumber"),
            "assignmentIsLongTerm": obj.get("assignmentIsLongTerm"),
            "assignmentNotes": obj.get("assignmentNotes"),
            "location": Int32IdNameClass.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "start": obj.get("start"),
            "end": obj.get("end"),
            "actualDurationMinutes": obj.get("actualDurationMinutes"),
            "accountingCodes": [AccountingCodeAllocationResponse.from_dict(_item) for _item in obj.get("accountingCodes")] if obj.get("accountingCodes") is not None else None,
            "payDuration": obj.get("payDuration"),
            "payUnit": obj.get("payUnit"),
            "payCode": PayCodeResponse.from_dict(obj.get("payCode")) if obj.get("payCode") is not None else None,
            "vacancyReason": Int32IdNameClass.from_dict(obj.get("vacancyReason")) if obj.get("vacancyReason") is not None else None,
            "verified": obj.get("verified"),
            "verifiedAtUtc": obj.get("verifiedAtUtc"),
            "verifyComment": obj.get("verifyComment"),
            "verifiedBy": Int32IdNameClass.from_dict(obj.get("verifiedBy")) if obj.get("verifiedBy") is not None else None,
            "approvalStatus": obj.get("approvalStatus"),
            "approvalStatusId": obj.get("approvalStatusId"),
            "needsReplacement": obj.get("needsReplacement")
        })
        return _obj


