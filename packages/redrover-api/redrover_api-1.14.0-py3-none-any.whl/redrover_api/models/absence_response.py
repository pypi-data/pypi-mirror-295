# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from redrover_api.models.absence_detail_response import AbsenceDetailResponse
from redrover_api.models.org_user_employee_response import OrgUserEmployeeResponse
from redrover_api.models.vacancy_response import VacancyResponse
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AbsenceResponse(BaseModel):
    """
    Absence
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The Red Rover internal Id of Absence (numeric)")
    external_id: Optional[StrictStr] = Field(default=None, description="The external Id of Absence (alpha-numeric)", alias="externalId")
    org_id: Optional[StrictInt] = Field(default=None, description="The Red Rover internal Id of Organization (numeric)", alias="orgId")
    start_time: Optional[datetime] = Field(default=None, description="The first date of the Absence", alias="startTime")
    end_time: Optional[datetime] = Field(default=None, description="The last date of the Absence", alias="endTime")
    number_of_days: Optional[StrictInt] = Field(default=None, description="How many days the Absence spans", alias="numberOfDays")
    is_closed: Optional[StrictBool] = Field(default=None, description="If the Absence is closed", alias="isClosed")
    is_deleted: Optional[StrictBool] = Field(default=None, description="If the Absence is deleted", alias="isDeleted")
    approval_status: Optional[StrictStr] = Field(default=None, description="The approval status of the Absence", alias="approvalStatus")
    notes_to_approver: Optional[StrictStr] = Field(default=None, description="Any notes that are meant to go to the person who will approve this Absence", alias="notesToApprover")
    admin_only_notes: Optional[StrictStr] = Field(default=None, description="Any notes that are entered by an admin for this Absence", alias="adminOnlyNotes")
    total_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total duration of this absence (minutes)", alias="totalDuration")
    total_day_portion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total duration of this absence (days)", alias="totalDayPortion")
    employee: Optional[OrgUserEmployeeResponse] = None
    absence_details: Optional[List[AbsenceDetailResponse]] = Field(default=None, description="The details of the Absence", alias="absenceDetails")
    admin_edit_url: Optional[StrictStr] = Field(default=None, description="The Url that the Admin can edit the Absence", alias="adminEditUrl")
    employee_edit_url: Optional[StrictStr] = Field(default=None, description="The Url that the Employee can edit the Absence", alias="employeeEditUrl")
    vacancies: Optional[List[VacancyResponse]] = Field(default=None, description="The Vacancies associated with this Absence")
    __properties: ClassVar[List[str]] = ["id", "externalId", "orgId", "startTime", "endTime", "numberOfDays", "isClosed", "isDeleted", "approvalStatus", "notesToApprover", "adminOnlyNotes", "totalDuration", "totalDayPortion", "employee", "absenceDetails", "adminEditUrl", "employeeEditUrl", "vacancies"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AbsenceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "admin_edit_url",
                "employee_edit_url",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in absence_details (list)
        _items = []
        if self.absence_details:
            for _item in self.absence_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['absenceDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vacancies (list)
        _items = []
        if self.vacancies:
            for _item in self.vacancies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vacancies'] = _items
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if approval_status (nullable) is None
        # and model_fields_set contains the field
        if self.approval_status is None and "approval_status" in self.model_fields_set:
            _dict['approvalStatus'] = None

        # set to None if notes_to_approver (nullable) is None
        # and model_fields_set contains the field
        if self.notes_to_approver is None and "notes_to_approver" in self.model_fields_set:
            _dict['notesToApprover'] = None

        # set to None if admin_only_notes (nullable) is None
        # and model_fields_set contains the field
        if self.admin_only_notes is None and "admin_only_notes" in self.model_fields_set:
            _dict['adminOnlyNotes'] = None

        # set to None if absence_details (nullable) is None
        # and model_fields_set contains the field
        if self.absence_details is None and "absence_details" in self.model_fields_set:
            _dict['absenceDetails'] = None

        # set to None if admin_edit_url (nullable) is None
        # and model_fields_set contains the field
        if self.admin_edit_url is None and "admin_edit_url" in self.model_fields_set:
            _dict['adminEditUrl'] = None

        # set to None if employee_edit_url (nullable) is None
        # and model_fields_set contains the field
        if self.employee_edit_url is None and "employee_edit_url" in self.model_fields_set:
            _dict['employeeEditUrl'] = None

        # set to None if vacancies (nullable) is None
        # and model_fields_set contains the field
        if self.vacancies is None and "vacancies" in self.model_fields_set:
            _dict['vacancies'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AbsenceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "externalId": obj.get("externalId"),
            "orgId": obj.get("orgId"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "numberOfDays": obj.get("numberOfDays"),
            "isClosed": obj.get("isClosed"),
            "isDeleted": obj.get("isDeleted"),
            "approvalStatus": obj.get("approvalStatus"),
            "notesToApprover": obj.get("notesToApprover"),
            "adminOnlyNotes": obj.get("adminOnlyNotes"),
            "totalDuration": obj.get("totalDuration"),
            "totalDayPortion": obj.get("totalDayPortion"),
            "employee": OrgUserEmployeeResponse.from_dict(obj.get("employee")) if obj.get("employee") is not None else None,
            "absenceDetails": [AbsenceDetailResponse.from_dict(_item) for _item in obj.get("absenceDetails")] if obj.get("absenceDetails") is not None else None,
            "adminEditUrl": obj.get("adminEditUrl"),
            "employeeEditUrl": obj.get("employeeEditUrl"),
            "vacancies": [VacancyResponse.from_dict(_item) for _item in obj.get("vacancies")] if obj.get("vacancies") is not None else None
        })
        return _obj


