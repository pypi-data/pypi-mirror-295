# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pipe character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pipe character.    ## Rate Limiting  Requests are rate limited at a default rate of 100 requests per minute    ## Transaction Id  Each request can be supplied with a `TransactionId` GUID which will be logged with the request. The `Transaction Id` can be supplied as an HTTP Header: `TransactionId=[transactionId]`. If no `Transaction Id` is supplied, one will be generated for you. Please use a distinct TransactionId for each request.

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from redrover_api.models.fill_status_enum import FillStatusEnum
from redrover_api.models.int32_id_name_class import Int32IdNameClass
from redrover_api.models.simple_position_response import SimplePositionResponse
from redrover_api.models.vacancy_detail_response import VacancyDetailResponse
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VacancyResponse(BaseModel):
    """
    Vacancy
    """ # noqa: E501
    position: Optional[SimplePositionResponse] = None
    contract: Optional[Int32IdNameClass] = None
    approval_status: Optional[StrictInt] = Field(default=None, alias="approvalStatus")
    is_long_term: Optional[StrictBool] = Field(default=None, description="If the Vacancy is long term", alias="isLongTerm")
    notes_to_replacement: Optional[StrictStr] = Field(default=None, description="Notes to the Substitute", alias="notesToReplacement")
    admin_only_notes: Optional[StrictStr] = Field(default=None, description="Notes for only Admins", alias="adminOnlyNotes")
    administrator_comments: Optional[StrictStr] = Field(default=None, description="Administrator comments", alias="administratorComments")
    allow_sub_to_accept_part: Optional[StrictBool] = Field(default=None, description="If the Vacancy can be accepted in parts", alias="allowSubToAcceptPart")
    details: Optional[List[VacancyDetailResponse]] = Field(default=None, description="The Vacancy's Details")
    hold_for_manual_fill_until_utc: Optional[datetime] = Field(default=None, description="When the Vacancy is held for manual fill", alias="holdForManualFillUntilUtc")
    hold_for_auto_assign_until_utc: Optional[datetime] = Field(default=None, description="When the Vacancy is held for auto assign", alias="holdForAutoAssignUntilUtc")
    fill_status: Optional[FillStatusEnum] = Field(default=None, alias="fillStatus")
    absence_id: Optional[StrictInt] = Field(default=None, description="The Vacancy's AbsenceId if it is correlated to one", alias="absenceId")
    admin_edit_url: Optional[StrictStr] = Field(default=None, description="The Url that the Admin can edit the Vacancy or Absence that it is associated with", alias="adminEditUrl")
    id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    __properties: ClassVar[List[str]] = ["position", "contract", "approvalStatus", "isLongTerm", "notesToReplacement", "adminOnlyNotes", "administratorComments", "allowSubToAcceptPart", "details", "holdForManualFillUntilUtc", "holdForAutoAssignUntilUtc", "fillStatus", "absenceId", "adminEditUrl", "id", "externalId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VacancyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "admin_edit_url",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # set to None if notes_to_replacement (nullable) is None
        # and model_fields_set contains the field
        if self.notes_to_replacement is None and "notes_to_replacement" in self.model_fields_set:
            _dict['notesToReplacement'] = None

        # set to None if admin_only_notes (nullable) is None
        # and model_fields_set contains the field
        if self.admin_only_notes is None and "admin_only_notes" in self.model_fields_set:
            _dict['adminOnlyNotes'] = None

        # set to None if administrator_comments (nullable) is None
        # and model_fields_set contains the field
        if self.administrator_comments is None and "administrator_comments" in self.model_fields_set:
            _dict['administratorComments'] = None

        # set to None if allow_sub_to_accept_part (nullable) is None
        # and model_fields_set contains the field
        if self.allow_sub_to_accept_part is None and "allow_sub_to_accept_part" in self.model_fields_set:
            _dict['allowSubToAcceptPart'] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        # set to None if hold_for_manual_fill_until_utc (nullable) is None
        # and model_fields_set contains the field
        if self.hold_for_manual_fill_until_utc is None and "hold_for_manual_fill_until_utc" in self.model_fields_set:
            _dict['holdForManualFillUntilUtc'] = None

        # set to None if hold_for_auto_assign_until_utc (nullable) is None
        # and model_fields_set contains the field
        if self.hold_for_auto_assign_until_utc is None and "hold_for_auto_assign_until_utc" in self.model_fields_set:
            _dict['holdForAutoAssignUntilUtc'] = None

        # set to None if absence_id (nullable) is None
        # and model_fields_set contains the field
        if self.absence_id is None and "absence_id" in self.model_fields_set:
            _dict['absenceId'] = None

        # set to None if admin_edit_url (nullable) is None
        # and model_fields_set contains the field
        if self.admin_edit_url is None and "admin_edit_url" in self.model_fields_set:
            _dict['adminEditUrl'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VacancyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "position": SimplePositionResponse.from_dict(obj.get("position")) if obj.get("position") is not None else None,
            "contract": Int32IdNameClass.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "approvalStatus": obj.get("approvalStatus"),
            "isLongTerm": obj.get("isLongTerm"),
            "notesToReplacement": obj.get("notesToReplacement"),
            "adminOnlyNotes": obj.get("adminOnlyNotes"),
            "administratorComments": obj.get("administratorComments"),
            "allowSubToAcceptPart": obj.get("allowSubToAcceptPart"),
            "details": [VacancyDetailResponse.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "holdForManualFillUntilUtc": obj.get("holdForManualFillUntilUtc"),
            "holdForAutoAssignUntilUtc": obj.get("holdForAutoAssignUntilUtc"),
            "fillStatus": obj.get("fillStatus"),
            "absenceId": obj.get("absenceId"),
            "adminEditUrl": obj.get("adminEditUrl"),
            "id": obj.get("id"),
            "externalId": obj.get("externalId")
        })
        return _obj


