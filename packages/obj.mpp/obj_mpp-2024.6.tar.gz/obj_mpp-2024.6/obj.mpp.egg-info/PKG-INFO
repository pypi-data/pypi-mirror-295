Metadata-Version: 2.1
Name: obj.mpp
Version: 2024.6
Summary: Object/pattern detection using a Marked Point Process
Home-page: https://gitlab.inria.fr/edebreuv/Obj.MPP
Author: Eric Debreuve
Author-email: eric.debreuve@univ-cotedazur.fr
License: CeCILL-2.1
Project-URL: Documentation, https://edebreuv.gitlabpages.inria.fr/Obj.MPP
Project-URL: Source, https://gitlab.inria.fr/edebreuv/Obj.MPP
Keywords: signal,image,image analysis,object detection,pattern detection,marked point process
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: CEA CNRS Inria Logiciel Libre License, version 2.1 (CeCILL-2.1)
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: C
Classifier: Development Status :: 4 - Beta
Requires-Python: >=3.8
Description-Content-Type: text/x-rst
Requires-Dist: Pillow
Requires-Dist: PyQt5
Requires-Dist: colorama
Requires-Dist: imageio
Requires-Dist: matplotlib
Requires-Dist: networkx
Requires-Dist: numpy
Requires-Dist: scikit-image
Requires-Dist: scipy
Requires-Dist: tifffile

Obj.MPP: Object/pattern detection using a Marked Point Process
==============================================================

Illustration
------------

Looking for disk-like objects (*other shapes available*) centered in the green region-of-interest:

.. _К562_(Light_microscopy): https://commons.wikimedia.org/wiki/File:%D0%9A562_(Light_microscopy).JPG

.. figure:: documentation/sphinx/graphics/obj-mpp-circle.png
   :alt:   Grayscale image

   Image source: `К562_(Light_microscopy)`_

   | Creative Commons Attribution-Share Alike 4.0 International
   | (https://creativecommons.org/licenses/by-sa/4.0/deed.en)



Installation
-------------

The ``Obj.MPP`` project is published on the `Python Package Index (PyPI) <https://pypi.org>`_ at: `https://pypi.org/project/obj.mpp <https://pypi.org/project/obj.mpp>`_. It requires version 3.8, or newer, of the interpreter. It should be installable from Python distribution platforms or Integrated Development Environments (IDEs). Otherwise, it can be installed from a command-line console:

- For all users, after acquiring administrative rights:
    - First installation: ``pip install obj.mpp``
    - Installation update: ``pip install --upgrade obj.mpp``
- For the current user (no administrative rights required):
    - First installation: ``pip install --user obj.mpp``
    - Installation update: ``pip install --user --upgrade obj.mpp``



Documentation
-------------

The Obj.MPP documentation is hosted at `edebreuv.gitlabpages.inria.fr/Obj.MPP <https://edebreuv.gitlabpages.inria.fr/Obj.MPP>`_.



Contributions
-------------

The optional, periodic detection refinement step is not part of the original Marked Point Process object detection method (see the Gamal Eldin *et al* reference in the documentation). It is an heuristic addition. While using Obj.MPP on images containing many objects with this refinement step on, Xavier Descombes noticed that, after some iterations, each iteration was taking very long to complete. He hypothesized that the refinement step was applied in each iteration instead of happening with the specified period. He was right since I had forgotten to reset the refinement-related counter after application.

Some features of Obj.MPP were added upon request:

- Florence Besse and Fabienne de Graeve requested the possibility to ignore some image segments in the computation of an object quality. Note that this can also be done by writing a dedicated quality function, although it requires coding skills of course.
- Xavier Descombes requested the possibility to combine the object quality with the object area in order to favor a larger, encompassing object over smaller adjacent objects, or not. Note that this can also be done by writing a dedicated quality function, although it requires coding skills of course.



Thanks
------

The project is developed with `PyCharm Community <https://www.jetbrains.com/pycharm>`_.

The development relies on several open-source packages (see ``install_requires`` in ``setup.py``).

The code is formatted by `Black <https://github.com/psf/black>`_, *The Uncompromising Code Formatter*.

The imports are ordered by `isort <https://github.com/timothycrosley/isort>`_... *your imports, so you don't have to*.

The HTML documentation is generated by `SPHINX <https://www.sphinx-doc.org>`_, *Python Documentation Generator*.

The package requirement list is generated by `pigar <https://github.com/damnever/pigar>`_.
