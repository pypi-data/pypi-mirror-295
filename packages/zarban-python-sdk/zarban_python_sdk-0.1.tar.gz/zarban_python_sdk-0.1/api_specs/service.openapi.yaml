openapi: 3.0.0
servers:
  - url: https://api.zarban.io
    description: Production server (uses live data)
info:
  title: Zarban API
  version: 2.0.0
  description: API for Zarban services.
paths:
  /ws:
    summary: Websocket to Fetch Unfilled Orders
    description: Get a list of unfilled orders filtered by different parameters.
    get:
      tags:
        - Websocket
      summary: Websocket Upgrade
      description: Upgrade to websocket connection
      responses:
        101:
          description: Switching Protocols
  /permit/single:
    get:
      tags:
        - Permit
      summary: Get permit for single token
      description: Get permit for single token
      parameters:
        - name: token
          in: query
          description: Ethereum address of the token
          required: true
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: user
          in: query
          description: Ethereum address of the user
          required: true
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermitSingle'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /swap/quote:
    post:
      tags:
        - Swap
      summary: Get a quote for a swap
      description: Get a quote for a swap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/sync:
    post:
      tags:
        - Orders
      summary: Updates Order Entity
      description: updates an order entity in database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      summary: Fetch Unfilled Orders
      description: Get a list of unfilled orders filtered by different parameters.
      tags:
        - Orders
      parameters:
        - name: type
          in: query
          description: Type of the order
          required: false
          schema:
            type: string
            enum:
              - limit
              - dutch
        - name: hash
          in: query
          description: order hash
          required: false
          schema:
            type: string
            pattern: ^0x[0-9,a-z,A-Z]{64}$
        - name: status
          in: query
          description: Status of the order
          required: false
          schema:
            type: string
            enum:
              - open
              - expired
              - error
              - cancelled
              - filled
              - insufficient-funds
        - name: offerer
          in: query
          description: Ethereum address of the offerer
          required: false
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: filler
          in: query
          description: Ethereum address of the filler
          required: false
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: decayStartTime
          in: query
          description: Decay start time
          required: false
          schema:
            $ref: '#/components/schemas/TimeRange'
        - name: decayEndTime
          in: query
          description: Decay end time
          required: false
          schema:
            $ref: '#/components/schemas/TimeRange'
        - name: deadline
          in: query
          description: Order deadline
          required: false
          schema:
            $ref: '#/components/schemas/TimeRange'
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit the number of orders returned (default is 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Bad request (e.g. invalid filter parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /addresses:
    get:
      tags:
        - Addresses
      summary: Get all addresses
      description: All addresses knows to Zarban.
      parameters:
        - in: query
          name: format
          required: false
          schema:
            type: string
          description: The type of addresses to return
      responses:
        200:
          description: A JSON object with addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
  
  /lendingpool/tx/deposit:
    post:
      tags:
        - LendingPool
      summary: Deposit to lending pool
      description: Deposit to lending pool
      requestBody:
        required: true
        description: Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LendingpoolDepositTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  chainActivity:
                    $ref: '#/components/schemas/ChainActivity'
                  response:
                    $ref: '#/components/schemas/LendingpoolTxResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetterError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetterError'

  /lendingpool/tx/withdraw:
    post:
      tags:
        - LendingPool
      summary: Withdraw from lending pool
      description: Withdraw from lending pool
      requestBody:
        required: true
        description: Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LendingpoolWithdrawTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  chainActivity:
                    $ref: '#/components/schemas/ChainActivity'
                  response:
                    $ref: '#/components/schemas/LendingpoolTxResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetterError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lendingpool/tx/borrow:
    post:
      tags:
        - LendingPool
      summary: Borrow from lending pool
      description: Borrow from lending pool
      requestBody:
        required: true
        description: Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LendingpoolBorrowTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  chainActivity:
                    $ref: '#/components/schemas/ChainActivity'
                  response:
                    $ref: '#/components/schemas/LendingpoolTxResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetterError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lendingpool/tx/repay:
    post:
      tags:
        - LendingPool
      summary: Repay to lending pool
      description: Repay to lending pool
      requestBody:
        required: true
        description: Repay transaction request, if amount is not provided, it will repay the maximum possible amount
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LendingpoolRepayTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  chainActivity:
                    $ref: '#/components/schemas/ChainActivity'
                  response:
                    $ref: '#/components/schemas/LendingpoolTxResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetterError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lendingpool/tx/useassetascollateral:
    post:
      tags:
        - LendingPool
      summary: Enable/Disable asset as collateral
      description: Allows to enable/disable a specific asset as collateral
      requestBody:
        required: true
        description: UseAssetAsCollateral transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LendingpoolUseAssetAsCollateralTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  chainActivity:
                    $ref: '#/components/schemas/ChainActivity'
                  response:
                    $ref: '#/components/schemas/LendingpoolTxResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetterError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stablecoinsystem/tx/createvault:
    post:
      tags:
        - StableCoinSystem
      summary: Create vault
      description: Create vault
      requestBody:
        required: true
        description: Create vault transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StablecoinSystemCreateVaultTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChainActivity'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /stablecoinsystem/tx/depositcollateral:
    post:
      tags:
        - StableCoinSystem
      summary: Deposit collateral
      description: Deposit collateral
      requestBody:
        required: true
        description: Deposit collateral transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StablecoinSystemDepositCollateralTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChainActivity'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stablecoinsystem/tx/withdrawcollateral:
    post:
      tags:
        - StableCoinSystem
      summary: Withdraw collateral
      description: Withdraw collateral
      requestBody:
        required: true
        description: Withdraw collateral transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StablecoinSystemWithdrawCollateralTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChainActivity'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stablecoinsystem/tx/mintzar:
    post:
      tags:
        - StableCoinSystem
      summary: Mint ZAR
      description: Mint ZAR
      requestBody:
        required: true
        description: Mint ZAR transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StablecoinSystemMintZarTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChainActivity'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stablecoinsystem/tx/repayzar:
    post:
      tags:
        - StableCoinSystem
      summary: Repay ZAR
      description: Repay ZAR
      requestBody:
        required: true
        description: Repay ZAR transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StablecoinSystemRepayZarTxRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChainActivity'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lendingpool/overview:
    get:
      tags:
        - LendingPool
      summary: Get lending pool overview
      description: Get lending pool overview
      responses:
        200:
          description: A JSON object with lending pool overview
          content:
            application/json:
              schema:
                properties:
                  totalMarketSize:
                    description: Total market size
                    $ref: '#/components/schemas/Currency'
                  totalAvailable:
                    description: Total available
                    $ref: '#/components/schemas/Currency'
                  totalBorrows:
                    description: Total borrows
                    $ref: '#/components/schemas/Currency'

  /lendingpool/reserves:
    get:
      summary: Fetch Reserve Data By Asset
      description: Retrieve data of reserves
      tags:
        - LendingPool
      parameters:
        - in: query
          name: asset
          required: false
          description: The asset address in hexadecimal format.
          schema:
            type: string
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedReserveData'
        400:
          description: Bad request (e.g. invalid asset address).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ilks:
    get:
      summary: Get all Ilks
      description: Retrieve a list of all available ilks.
      tags:
        - Ilks
        - StableCoinSystem
      responses:
        '200':
          description: Successfully retrieved list of ilks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ilk'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ilks/{name}:
    get:
      summary: Get Ilk by name
      description: Retrieve an Ilk by providing its name.
      tags:
        - Ilks
        - StableCoinSystem
      parameters:
        - name: name
          in: path
          description: Name of the ILK
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully retrieved ILK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ilk'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /proxies:
    get:
      tags:
        - Proxies
        - StableCoinSystem
      summary: Retrieves proxies owned by a specific owner
      description: Returns a list of proxies filtered by the owner's address.
      parameters:
        - in: query
          name: owner
          schema:
            type: string
            format: string
          required: true
          description: The Ethereum address of the owner.
      responses:
        200:
          description: A JSON array of proxies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proxy'
        400:
          description: Bad request
  
  /stats:
    get:
      tags:
        - Collector
        - StableCoinSystem
      summary: Get collector data
      description: Get collector data
      responses:
        200:
          description: A JSON object with collector data
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Stats'

  /lendingpool/deposits:
    get:
      tags:
        - Deposits
        - LendingPool
      summary: Get user deposits of Lendingpool
      description: Get user deposits of Lendingpool
      parameters:
        - name: user
          in: query
          description: Ethereum address of the user
          required: false
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: reserve
          in: query
          description: Ethereum address of the reserve
          required: false
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit the number of deposits returned (default is 50)
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of user deposits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingpoolDeposit'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lendingpool/borrows:
    get:
      tags:
        - Borrows
        - LendingPool
      summary: Get user borrows of lendingpool
      description: Get user borrows of lendingpool
      parameters:
        - name: user
          in: query
          description: Ethereum address of the user
          required: false
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: reserve
          in: query
          description: Ethereum address of the reserve
          required: false
          schema:
            type: string
            pattern: '0x[a-fA-F0-9]{40}'
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit the number of deposits returned (default is 50)
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of user borrows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingpoolBorrow'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /events:
    get:
      tags:
        - Events
      summary: Ordered list events based on query parameters
      description: Retrieve a list of events based on specified query parameters
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: ID of the event
        - in: query
          name: domain
          required: true
          schema:
            $ref: '#/components/schemas/EventDomain'
        - in: query
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/EventType'
          description: Type of the event
        - in: query
          name: name
          required: true
          schema:
            $ref: '#/components/schemas/EventName'
        - in: query
          name: cursor
          schema:
            type: integer
          description: Cursor for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of records to retrieve. Defaults to 50 if not provided.
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Order of the events. Default is desc.
          example: desc

      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedEvent'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prices:
    get:
      tags:
        - Prices
      summary: List prices based on query parameters
      description: Retrieve a list of price details based on specified query parameters
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          description: Symbol of the price
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /prices/{symbol}/history:
    get:
      tags:
        - Prices
      summary: Get price history for a symbol
      description: Get price history for a symbol
      parameters:
        - name: symbol
          in: path
          description: Symbol of the price
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: Start date
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: List of price history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vaults/{id}:
    get:
      tags:
        - Vaults
        - StableCoinSystem
      summary: Get a vault by ID
      parameters:
        - name: id
          in: path
          required: true
          description: Vault ID
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vaults/{id}/events:
    get:
      tags:
        - Vaults
        - StableCoinSystem
      summary: Get vault events by ID
      parameters:
        - name: id
          in: path
          required: true
          description: Vault ID
          schema:
            type: integer
        - name: type
          in: query
          description: Event type
          schema:
            type: string
            enum:
              - repay
              - deposit
              - withdraw
              - mint
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/BasicEvent'
                    - type: object
                      properties:
                        payload:
                          $ref: '#/components/schemas/VaultEvent'

        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vaults:
    get:
      tags:
        - Vaults
        - StableCoinSystem
      summary: Get vaults by owner query
      parameters:
        - name: owner
          in: query
          required: false
          description: Ethereum address of the owner
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vault'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /permissions/matrix:
    get:
      tags:
        - Permissions
        - StableCoinSystem
      summary: Get authorization matrix
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthMatrix'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{address}:
    get:
      tags:
        - Accounts
      summary: Get account by address
      description: Get account by address
      parameters:
        - name: address
          in: path
          description: Ethereum address of the account
          required: true
          schema:
            type: string
            format: address
            example: "0x1234567890123456789012345678901234567890"
      responses:
        200:
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    ChainActivity:
      type: object
      required:
        - steps
        - numberOfSteps
        - stepNumber
      properties:
        stepNumber:
          type: integer
        numberOfSteps:
          type: integer
        steps:
          type: array
          items:
            $ref: '#/components/schemas/ChainActivityStep'
    ChainActivityStep:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - PreparedTx
            - EIP712SignRequest
            - PersonalSignRequest
        data:
          oneOf:
            - $ref: '#/components/schemas/PreparedTx'
            - $ref: '#/components/schemas/EIP712SignRequest'
            - $ref: '#/components/schemas/PersonalSignRequest'

    PersonalSignRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The message that needs to be signed
          example: "Hello, World!"

    EIP712SignRequest:
      type: object
      required:
        - typedData
        - hash
        - name
      properties:
        name:
          type: string
          description: The name of the EIP712 signature
          example: "Permit2"
        typedData:
          $ref: '#/components/schemas/TypedData'
        hash:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{64}$
          description: The hash of the EIP712 signature that needs to be signed
    PreparedTx:
      type: object
      required:
        - type
        - gasFeeEstimate
        - gasUseEstimate
        - methodParameters
      properties:
        type:
          type: string
        gasUseEstimate:
          type: integer
        gasFeeEstimate:
          $ref: '#/components/schemas/Currency'
        methodParameters:
          $ref: '#/components/schemas/MethodParameters'
    
    LendingpoolDepositTxRequest:
      type: object
      required:
        - user
        - symbol
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        symbol:
          type: string
          example: "ETH"
        amount:
          type: string
          description: The amount to deposit in native token units, if not provided, it will be calculated based on the token balance
          example: "10000000000000000000"

    LendingpoolTxResponse:
      type: object
      properties:
        nextHealthFactor:
          type: string
          description: The health factor after the deposit
          example: "1.2"

    LendingpoolWithdrawTxRequest:
      type: object
      required:
        - user
        - symbol
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        symbol:
          type: string
        amount:
          type: string
          description: The amount to withdraw in native token units, if not provided, it will be calculated based on the deposit balance
          example: "10000000000000000000"
    LendingpoolBorrowTxRequest:
      type: object
      required:
        - user
        - symbol
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        symbol:
          type: string
        amount:
          type: string
          description: The amount to borrow in native token units
          example: "10000000000000000000"
    LendingpoolRepayTxRequest:
      type: object
      required:
        - user
        - symbol
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        symbol:
          type: string
        amount:
          type: string
          description: The amount to repay in native token units, if not provided, it will be calculated based on the borrow balance
          example: "10000000000000000000"
    LendingpoolUseAssetAsCollateralTxRequest:
      type: object
      required:
        - user
        - symbol
        - enabled
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        symbol:
          type: string
          description: Symbol of asset
        enabled:
          type: boolean
          description: Enable or disable the asset as collateral
    StablecoinSystemCreateVaultTxRequest:
      type: object
      required:
        - ilkName
        - user
        - mintAmount
      properties:
        ilkName:
          type: string
          description: The name of the ilk
          example: "ETH-A"
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        collateralAmount:
          type: string
          description: The amount of collateral to deposit in native token units
          example: "10000000000000000000"
        mintAmount:
          type: string
          description: The amount of stablecoin to mint in native token units
          example: "10000000000000000000"
    StablecoinSystemDepositCollateralTxRequest:
      type: object
      required:
        - user
        - vaultId
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        vaultId:
          type: integer
          description: The ID of the vault
          example: 1
        amount:
          type: string
          description: The amount of collateral to deposit in native token units, if not provided, it will be calculated based on the wallet balance
          example: "10000000000000000000"
    StablecoinSystemWithdrawCollateralTxRequest:
      type: object
      required:
        - user
        - vaultId
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        vaultId:
          type: integer
          description: The ID of the vault
          example: 1
        amount:
          type: string
          description: The amount of collateral to withdraw in native token units, if not provided, it will be calculated based on the withdrawable balance
          example: "10000000000000000000"
    StablecoinSystemMintZarTxRequest:
      type: object
      required:
        - user
        - vaultId
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        vaultId:
          type: integer
          description: The ID of the vault
          example: 1
        amount:
          type: string
          description: The amount of stablecoin to mint in native token units, if not provided, it will be calculated based on the available to mint amount
          example: "10000000000000000000"
    StablecoinSystemRepayZarTxRequest:
      type: object
      required:
        - user
        - vaultId
      properties:
        user:
          type: string
          description: Ethereum address of the user
          format: address
          example: "0x1234567890123456789012345678901234567890"
        vaultId:
          type: integer
          description: The ID of the vault
          example: 1
        amount:
          type: string
          description: The amount of stablecoin to repay in native token units, if not provided, it will be calculated based on the borrow balance
          example: "10000000000000000000"
    ChainId:
      type: number
      enum:
        - 1
        - 137
    QuoteResponse:
      type: object
      required:
        - type
        - tradeType
        - time
        - amount
        - quote
        - quoteId
        - gasPrice
        - gasUseEstimate
        - gasFeeEstimate
        - routeString
        - route
      properties:
        type:
          $ref: '#/components/schemas/OrderType'
        tradeType:
          $ref: '#/components/schemas/TradeType'
        time:
          $ref: '#/components/schemas/Timestamp'
        amount:
          $ref: '#/components/schemas/Currency'
        quote:
          $ref: '#/components/schemas/Currency'
        quoteId:
          type: string
        gasPrice:
          $ref: '#/components/schemas/Currency'
        gasUseEstimate:
          type: integer
        gasFeeEstimate:
          $ref: '#/components/schemas/Currency'
        routeString:
          type: string
          example: A -- [0x0000000000000000000000000000000000000012] --> B -- [0x0000000000000000000000000000000000000023] --> C
        methodParameters:
          $ref: '#/components/schemas/MethodParameters'
        route:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/V3PoolInRoute'
        orderInfo:
          $ref: '#/components/schemas/OrderInfo'
        encodedOrder:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]*$
        orderHash:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{64}$
        permitData:
          $ref: '#/components/schemas/TypedData'

    V3PoolInRoute:
      type: object
      required:
        - address
        - tokenIn
        - tokenOut
        - fee
      properties:
        address:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        tokenIn:
          $ref: '#/components/schemas/Token'
        tokenOut:
          $ref: '#/components/schemas/Token'
        fee:
          type: string
    
    MethodParameters:
      type: object
      required:
        - to
        - calldata
        - value
      properties:
        to:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        calldata:
          type: string
        value:
          type: string
    TradeType:
      type: string
      enum:
        - ExactInput
        - ExactOutput
    QuoteRequest:
      type: object
      required:
        - tradeType
        - inputToken
        - outputToken
        - recipient
        - amount
      properties:
        requestId:
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        type:
          $ref: '#/components/schemas/OrderType'
        tradeType:
          $ref: '#/components/schemas/TradeType'
        inputToken:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
          example: "0x1234567890123456789012345678901234567890"
        outputToken:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
          example: "0x1234567890123456789012345678901234567890"
        amount:
          type: string
          example: "123.456789"
        recipient:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        options:
          $ref: '#/components/schemas/QuoteRequestOptions'
    QuoteRequestOptions:
      type: object
      properties:
        dryRun:
          type: boolean
          default: false
        slippageTolerance:
          type: string
          default: "0.005"
        useSyntheticQuotes:
          type: boolean
          default: false
        permitSignature:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{130}$
        permitNonce:
          type: string
        permitExpiration:
          type: integer
        permitAmount:
          type: string
        permitSigDeadline:
          type: integer
        quoteId:
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        encodedOrder:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]*$

    OrderInfo:
      type: object
      required:
        - chainId
        - permit2Address
        - reactor
        - swapper
        - nonce
        - deadline
        - additionalValidationContract
        - additionalValidationData
        - decayStartTime
        - decayEndTime
        - exclusiveFiller
        - exclusivityOverrideBps
        - input
        - outputs
      properties:
        chainId:
          type: integer
        permit2Address:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        reactor:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        swapper:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        nonce:
          type: string
        deadline:
          $ref: '#/components/schemas/Timestamp'
        additionalValidationContract:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        additionalValidationData:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]*$
        decayStartTime:
          $ref: '#/components/schemas/Timestamp'
        decayEndTime:
          $ref: '#/components/schemas/Timestamp'
        exclusiveFiller:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        exclusivityOverrideBps:
          type: integer
        input:
          $ref: '#/components/schemas/DutchAmount'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/DutchAmount'

    UpdateOrderRequest:
      required:
        - orderHash
      properties:
        orderHash:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{64}$

    Order:
      required:
        - outputs
        - encodedOrder
        - signature
        - input
        - orderStatus
        - chainId
        - orderHash
        - type
      properties:
        quoteId:
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/RawDutchAmount'
        encodedOrder:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]*$
        signature:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{130}$
        input:
          $ref: '#/components/schemas/RawDutchAmount'
        orderStatus:
          type: string
          enum:
            - open
            - expired
            - error
            - cancelled
            - filled
            - insufficient-funds
        chainId:
          type: integer
          format: int64
        orderHash:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{64}$
        orderType:
          type: string
          enum:
            - dutch
            - limit

    RawDutchAmount:
      required:
        - token
        - startAmount
        - endAmount
      properties:
        token:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        startAmount:
          type: string
        endAmount:
          type: string
        recipient:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$

    DutchAmount:
      required:
        - token
        - startAmount
        - endAmount
      properties:
        token:
          $ref: '#/components/schemas/Token'
        startAmount:
          $ref: '#/components/schemas/Currency'
        endAmount:
          $ref: '#/components/schemas/Currency'
        recipient:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$

    OrderType:
      type: string
      enum:
        - Classic
        - DutchLimit

    TypedData:
      type: object
      properties:
        types:
          $ref: '#/components/schemas/Types'
        primaryType:
          type: string
        domain:
          $ref: '#/components/schemas/TypedDataDomain'
        message:
          type: object
          additionalProperties: true # As TypedDataMessage is a map[string]interface{}
      required:
        - types
        - primaryType
        - domain
        - message
    Types:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/Type'
      description: "A map where each key is a string and each value is a list of Type"
    Type:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type
    TypedDataDomain:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        chainId:
          type: string
        verifyingContract:
          type: string
        salt:
          type: string
      required:
        - name
        - chainId
        - verifyingContract
    PermitSingle:
      type: object
      required:
        - typedData
        - hash
      properties:
        typedData:
          $ref: '#/components/schemas/TypedData'
        hash:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{64}$
          description: The hash of the permit that needs to be signed

    PermitDetails:
      type: object
      required:
        - token
        - amount
        - expiration
        - nonce
      properties:
        token:
          type: string
          pattern: ^(0x)?[0-9a-fA-F]{40}$
        amount:
          type: string
        expiration:
          type: integer
        nonce:
          type: string
    Account:
      type: object
      required:
        - address
        - netWorth
        - totalDebt
        - totalDeposits
        - lendingpoolSummary
        - stabelcoinSystemSummary
        - walletBalance
        - points
      properties:
        points:
          type: integer
          format: int64
          description: The number of points the account has.
          example: 100
        address:
          type: string
          description: Ethereum address of the account
          format: address
          example: "0x1234567890123456789012345678901234567890"
        walletBalance:
          $ref: '#/components/schemas/WalletBalance'
        netWorth:
          $ref: '#/components/schemas/Currency'
        totalDebt:
          $ref: '#/components/schemas/Currency'
        totalDeposits:
          $ref: '#/components/schemas/Currency'
        lendingpoolSummary:
          $ref: '#/components/schemas/AccountLendingpoolSummary'
        stabelcoinSystemSummary:
          $ref: '#/components/schemas/AccountStablecoinSystemSummary'
    WalletBalance:
      required:
        - balances
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    Balance:
      type: object
      required:
        - token
        - balance
      properties:
        token:
          $ref: '#/components/schemas/Token'
        balance:
          $ref: '#/components/schemas/Currency'

    
    AccountLendingpoolSummary:
      required:
        - totalDebt
        - totalDeposits
        - totalCollateral
        - healthFactor
        - netApy
        - totalSupplyApy
        - totalBorrowApy
        - availableToBorrow
        - borrowPowerUsed
        - currentLiquidationThreshold
        - loanToValue
      properties:
        totalDebt:
          $ref: '#/components/schemas/Currency'
        totalDeposits:
          $ref: '#/components/schemas/Currency'
        totalCollateral:
          $ref: '#/components/schemas/Currency'
        healthFactor:
          type: string
          description: Health factor in lending pool
          example: "1.5"
        netApy:
          type: string
          description: Net annual percentage yield in lending pool
          example: "0.12"
        totalSupplyApy:
          type: string
          description: Total supply rate in lending pool for account
          example: "0.12"
        totalBorrowApy:
          type: string
          description: Total borrow rate in lending pool for account
          example: "0.12"
        availableToBorrow:
          $ref: '#/components/schemas/Currency'
        borrowPowerUsed:
          type: string
          description: Borrow power used in lending pool
          example: "0.30"
        currentLiquidationThreshold:
          type: string
          description: Current liquidation threshold in lending pool
          example: "0.30"
        loanToValue:
          type: string
          description: Loan to value in lending pool
          example: "0.30"
    AccountStablecoinSystemSummary:
      required:
        - totalDebt
        - totalDeposits
        - netApy
      properties:
        totalDebt:
          $ref: '#/components/schemas/Currency'
        totalDeposits:
          $ref: '#/components/schemas/Currency'
        netApy:
          type: string
          description: Net annual percentage yield in stablecoin system
          example: "0.30"
    Vault:
      type: object
      required:
        - id
        - owner
        - urn
        - liquidationPrice
        - collateralLocked
        - collateralizationRatio
        - loanToValue
        - debt
        - availableToWithdraw
        - availableToMint
        - ilk
      properties:
        id:
          type: integer
          description: Identifier for the vault.
          example: 1
        owner:
          type: string
          description: Ethereum address of the vault owner.
          format: string
          example: "0x1234567890123456789012345678901234567890"
        urn:
          type: string
          description: Ethereum address of the vault urn.
          format: string
          example: "0x1234567890123456789012345678901234567890"
        liquidationPrice:
          $ref: '#/components/schemas/Currency'
        collateralLocked:
          $ref: '#/components/schemas/Currency'
        collateralizationRatio:
          type: string
          description: The collateralization ratio of the vault.
          example: "1.5"
        loanToValue:
          type: string
          description: The loan to value of the vault.
          example: "0.5"
        debt:
          $ref: '#/components/schemas/Currency'
        availableToWithdraw:
          $ref: '#/components/schemas/Currency'
        availableToMint:
          $ref: '#/components/schemas/Currency'
        ilk:
          $ref: '#/components/schemas/Ilk'

    EventType:
      type: string
      description: The type of the event. who has triggered the event.
      enum:
        - executive
        - oracle
        - user
      example: executive
    EventDomain:
      type: string
      description: The domain of the event.
      enum:
        - stableCoinSystem
        - lendingpool
        - chainlink
        - uniswapV3
      example: stableCoinSystem
    ExtendedEvent:
      allOf:
        - $ref: '#/components/schemas/BasicEvent'
        - type: object
          required:
            - payload
          properties:
            payload:
              type: object
              description: The event payload.
              oneOf:
                - $ref: '#/components/schemas/VaultEvent'
                - $ref: '#/components/schemas/LendingpoolDepositEvent'
                - $ref: '#/components/schemas/LendingpoolWithdrawEvent'
                - $ref: '#/components/schemas/LendingpoolRepayEvent'
                - $ref: '#/components/schemas/LendingpoolLiquidationCallEvent'
                - $ref: '#/components/schemas/LendingpoolFlashLoanEvent'
                - $ref: '#/components/schemas/MedianEvent'
    BasicEvent:
      type: object
      required:
        - id
        - name
        - type
        - domain
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the event.
          example: 1
        name:
          $ref: '#/components/schemas/EventName'
        type:
          $ref: '#/components/schemas/EventType'
        domain:
          $ref: '#/components/schemas/EventDomain'
        raw:
          $ref: '#/components/schemas/Log'
    EventName:
      type: string
      enum:
        - VaultsRepay
        - VaultsWithdraw
        - VaultsDeposit
        - VaultsMint
        - VaultsKick
        - VaultsTake
        - VaultsRedo
        - VaultsYank
        - LendingpoolWithdraw
        - LendingpoolRepay
        - LendingpoolLiquidationCall
        - LendingpoolBorrow
        - File
        - Permission
        - Median
        - Unknown
      example: "VaultRepay"
    VaultEvent:
      type: object
      required:
        - deltaCollateral
        - deltaDebt
        - ilk
      properties:
        deltaCollateral:
          $ref: '#/components/schemas/Currency'
        deltaDebt:
          $ref: '#/components/schemas/Currency'
        ilk:
          $ref: '#/components/schemas/Ilk'
    MedianEvent:
      type: object
      required:
        - id
        - value
        - timestamp
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the median.
          example: 1
        symbol:
          $ref: '#/components/schemas/Symbol'
        value:
          $ref: '#/components/schemas/Currency'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        raw:
          $ref: '#/components/schemas/Log'
    Price:
      type: object
      required:
        - id
        - symbol
        - value
        - timestamp
      properties:
        symbol:
          $ref: '#/components/schemas/Symbol'
        value:
          $ref: '#/components/schemas/Currency'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
    LendingpoolWithdrawEvent:
      type: object
      required:
        - id
        - reserve
        - user
        - to
        - amount
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the withdraw event.
          example: 1
        reserve:
          type: string
          description: Ethereum address of the reserve from which funds were withdrawn.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        user:
          type: string
          description: Ethereum address of the user who initiated the withdrawal.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        to:
          type: string
          description: Ethereum address of the recipient.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        amount:
          type: string
          description: The amount that was withdrawn.
          example: "100"
        raw:
          $ref: '#/components/schemas/Log'
    LendingpoolRepayEvent:
      type: object
      required:
        - id
        - reserve
        - user
        - repayer
        - amount
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the repay event.
          example: 1
        reserve:
          type: string
          description: Ethereum address of the reserve related to the repay.
          format: address
        user:
          type: string
          description: Ethereum address of the user who was repaid.
          format: address
        repayer:
          type: string
          description: Ethereum address of the entity that made the repay.
          format: address
        amount:
          type: string
          description: The amount that was repaid.
        raw:
          $ref: '#/components/schemas/Log'
    LendingpoolLiquidationCallEvent:
      type: object
      required:
        - id
        - collateralAsset
        - debtAsset
        - user
        - debtToCover
        - liquidatedCollateralAmount
        - liquidator
        - receiveZToken
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the liquidation call event.
          example: 1
        collateralAsset:
          type: string
          description: Ethereum address of the collateral asset involved in the liquidation call.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        debtAsset:
          type: string
          description: Ethereum address of the debt asset involved in the liquidation call.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        user:
          type: string
          description: Ethereum address of the user being liquidated.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        debtToCover:
          type: string
          description: The amount of debt to cover during the liquidation.
          example: "100"
        liquidatedCollateralAmount:
          type: string
          description: The amount of collateral that was liquidated.
          example: "100"
        liquidator:
          type: string
          description: Ethereum address of the liquidator who initiated the liquidation.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        receiveZToken:
          type: boolean
          description: Indicates if the liquidator chose to receive ZTokens.
          example: true
        raw:
          $ref: '#/components/schemas/Log'
    LendingpoolFlashLoanEvent:
      type: object
      required:
        - id
        - target
        - initiator
        - asset
        - amount
        - premium
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the flash loan event.
          example: 1
        target:
          type: string
          description: Ethereum address of the target involved in the flash loan.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        initiator:
          type: string
          description: Ethereum address of the initiator who triggered the flash loan.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        asset:
          type: string
          description: Ethereum address of the asset used in the flash loan.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        amount:
          type: string
          description: The amount involved in the flash loan.
          example: "100"
        premium:
          type: string
          description: The premium involved in the flash loan.
          example: "0.009"
        referralCode:
          type: integer
          description: Referral code or identifier related to the flash loan.
          format: int16
          example: 123
        raw:
          $ref: '#/components/schemas/Log'
    LendingpoolDepositEvent:
      type: object
      required:
        - id
        - reserve
        - user
        - amount
        - onBehalfOf
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the deposit event.
          example: 1
        reserve:
          type: string
          description: Ethereum address of the reserve where the deposit was made.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        user:
          type: string
          description: Ethereum address of the user who made the deposit.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        onBehalfOf:
          type: string
          description: Ethereum address of the entity on whose behalf the deposit was made.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        amount:
          type: string
          description: The deposited amount.
          example: "100"
        referral:
          type: integer
          description: Referral code or identifier.
          format: int16
          example: 123
        raw:
          $ref: '#/components/schemas/Log'

    LendingpoolBorrowEvent:
      type: object
      required:
        - id
        - reserve
        - user
        - amount
        - borrowRateMode
        - borrowRate
        - raw
      properties:
        id:
          type: integer
          description: Identifier for the borrow event.
          example: 1
        reserve:
          type: string
          description: Ethereum address of the reserve from which the amount was borrowed.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        user:
          type: string
          description: Ethereum address of the user who borrowed.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        onBehalfOf:
          type: string
          description: Ethereum address of the entity on whose behalf the borrowing occurred.
          format: address
          example: "0x1234567890123456789012345678901234567890"
        amount:
          type: string
          description: The borrowed amount.
          example: "100"
        borrowRateMode:
          type: string
          description: The mode of borrowing rate (e.g., stable, variable).
          example: "variable"
        borrowRate:
          type: string
          description: The interest rate for the borrowed amount.
          example: "0.1"
        referral:
          type: integer
          description: Referral code or identifier.
          format: int16
          example: 123
        raw:
          $ref: '#/components/schemas/Log'

    FormattedReserveData:
      type: object
      required:
        - id
        - underlyingAsset
        - zTokenAddress
        - variableDebtTokenAddress
        - borrowingEnabled
        - isActive
        - isFrozen
        - usageAsCollateralEnabled
        - reserveFactor
        - baseLTVasCollateral
        - reserveLiquidationThreshold
        - reserveLiquidationBonus
        - utilizationRate
        - totalVariableDebt
        - totalDebt
        - totalLiquidity
        - availableLiquidity
        - supplyAPY
        - supplyAPR
        - variableBorrowAPY
        - variableBorrowAPR
        - price
      properties:
        id:
          type: string
          description: Identifier for the reserve data.
          example: "0x1234567890123456789012345678901234567890:0x1234567890123456789012345678901234567890"
        underlyingAsset:
          $ref: '#/components/schemas/Token'
        zTokenAddress:
          type: string
          description: Address of the associated zToken contract in hexadecimal format.
          example: "0x1234567890123456789012345678901234567890"
        variableDebtTokenAddress:
          type: string
          description: Address of the associated variable debt token contract in hexadecimal format.
          example: "0x1234567890123456789012345678901234567890"
        borrowingEnabled:
          type: boolean
          example: true
        isActive:
          type: boolean
          example: true
        isFrozen:
          type: boolean
          example: false
        usageAsCollateralEnabled:
          type: boolean
          example: true
        reserveFactor:
          type: string
          example: "0.1"
        baseLTVasCollateral:
          type: string
          example: "0.5"
        reserveLiquidationThreshold:
          type: string
          example: "0.6"
        reserveLiquidationBonus:
          type: string
          example: "0.1"
        utilizationRate:
          type: string
          example: "0.5"
        totalDebt:
          $ref: '#/components/schemas/Currency'
        totalLiquidity:
          $ref: '#/components/schemas/Currency'
        availableLiquidity:
          $ref: '#/components/schemas/Currency'
        supplyAPY:
          type: string
          example: "0.1"
        supplyAPR:
          type: string
          example: "0.1"
        variableBorrowAPY:
          type: string
          example: "0.1"
        variableBorrowAPR:
          type: string
          example: "0.1"
        price:
          $ref: '#/components/schemas/Currency'

    Ilk:
      type: object
      required:
        - name
        - symbol
        - minimumCollateralizationRatio
        - maximumLoanToValue
        - liquidationPenalty
        - debtCeiling
        - debt
        - annualStabilityFee
        - dustLimit
        - price
        - nextPrice
        - join
        - median
        - gem
        - clipper
        - pip
        - hole
        - dirt
        - availableToBorrow
      properties:
        name:
          type: string
          description: Name of the ILK
        symbol:
          $ref: '#/components/schemas/Symbol'
        minimumCollateralizationRatio:
          type: string
          format: decimal
          description: Minimum Collateralization Ratio
        maximumLoanToValue:
          type: string
          format: decimal
          description: Maximum Loan To Value
        liquidationPenalty:
          type: string
          format: decimal
          description: Liquidation Penalty
        debtCeiling:
          $ref: '#/components/schemas/Currency'
        debt:
          $ref: '#/components/schemas/Currency'
        annualStabilityFee:
          type: string
          format: decimal
          description: Annual Stability Fee
        dustLimit:
          $ref: '#/components/schemas/Currency'
        price:
          $ref: '#/components/schemas/Currency'
        nextPrice:
          $ref: '#/components/schemas/Currency'
        join:
          type: string
          format: address
          description: Join Address
        median:
          type: string
          format: address
          description: Median Address
        gem:
          type: string
          format: address
          description: Gem Address
        clipper:
          type: string
          format: address
          description: Clipper Address
        pip:
          type: string
          format: address
          description: Pip Address
        hole:
          $ref: '#/components/schemas/Currency'
        dirt:
          $ref: '#/components/schemas/Currency'
        availableToBorrow:
          $ref: '#/components/schemas/Currency'

    Symbol:
      type: string
      description: Symbol representation
      enum:
        - USD
        - DAI
        - USDT
        - USDC
        - WBTC
        - ETH
        - WETH
        - ZAR
        - TMN

    File:
      type: object
      required: [ id, time, where, what, data, raw ]
      properties:
        id:
          type: integer
          description: The file's ID
          example: 1
        time:
          type: string
          description: The time the file was created
          example: "2020-01-01T00:00:00Z"
        where:
          type: string
          description: The file's location or source
          example: "vat"
        ilk:
          type: string
          description: The file's ilk
          example: "ETH-A"
        what:
          type: string
          description: The file's description or purpose
        data:
          type: string
          description: The file's data
          example: "0x1234567890abcdef1234567abcdef"
        raw:
          $ref: '#/components/schemas/Log'

    AnswerUpdatedResponse:
      type: object
      required: [ current, roundId, updatedAt, raw ]
      properties:
        current:
          type: string
          description: The current answer
        roundId:
          type: string
          description: The ID of the round
        updatedAt:
          type: string
          description: The time the answer was updated
        raw:
          $ref: '#/components/schemas/Log'

    Log:
      type: object
      required: [ timestamp, address, blockNumber, txHash, blockHash, index, topics, data, id ]
      properties:
        id:
          type: integer
          description: The log's ID
          example: 1
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        address:
          type: string
          description: The Ethereum address
        blockNumber:
          type: string
          description: The block number
        txHash:
          type: string
          description: The transaction hash
        blockHash:
          type: string
          description: The block hash
        index:
          type: integer
          format: uint
          description: The index
        topics:
          type: array
          items:
            type: string
            format: string
            description: The topics of the log
            example: "0x1234567890abcdef1234567abcdef"
        data:
          type: string
          format: string
          description: The data of the log
          example: "0x1234567890abcdef1234567abcdef"

    LendingpoolDeposit:
      type: object
      required: [ user, underlyingAsset, amount, usageAsCollateralEnabledOnUser, supplyAPY ]
      properties:
        user:
          type: string
          format: string
          description: The Ethereum address of the user.
        underlyingAsset:
          $ref: '#/components/schemas/Token'
        amount:
          $ref: '#/components/schemas/Currency'
        usageAsCollateralEnabledOnUser:
          type: boolean
          description: Whether the user has enabled the asset as collateral.
        supplyAPY:
          type: string
          format: string
          description: The supply APY.

    LendingpoolBorrow:
      type: object
      required: [ user, underlyingAsset, amount, borrowRate, maxBorrowAmount ]
      properties:
        user:
          type: string
          format: string
          description: The Ethereum address of the user.
        underlyingAsset:
          $ref: '#/components/schemas/Token'
        amount:
          $ref: '#/components/schemas/Currency'
        borrowRate:
          type: string
          format: string
          description: The borrow rate.
        maxBorrowAmount:
          $ref: '#/components/schemas/Currency'

    Proxy:
      type: object
      required: [ address, owner, authority ]
      properties:
        address:
          type: string
          format: byte
          description: The Ethereum address of the proxy.
        owner:
          type: string
          format: string
          description: The Ethereum address of the owner.
        authority:
          type: string
          format: string
          description: The Ethereum address of the authority.

    Currency:
      type: object
      additionalProperties:
        type: string
        format: string
      example:
        USD: "1.23"
        TMN: "45.67"
        ZAR: "89.01"
        ETH: "0.02"
    Error:
      type: object
      required: [ msg ]
      properties:
        msg:
          type: string
          description: Error message
          example: "Bad request"
        reasons:
          type: array
          items:
            type: string
            description: Error reason
            example: "Invalid address"
    
    BetterError:
      type: object
      required: [ code, messages ]
      properties:
        messages:
          type: object
          description: Localized error messages
          additionalProperties:
            type: object
            required:
              - userMessage
            properties:
              userMessage:
                type: string
                description: User-friendly error message
                example: "Invalid request. Please check the provided address."
              solutions:
                type: array
                items:
                  type: string
                  description: Possible solutions for the error
                  example: "Ensure the address follows the correct format."
        reasons:
          type: array
          items:
            type: string
            description: Error reasons
            example: "Invalid address"

    TimeRange:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time

    Timestamp:
      type: object
      required: [ jalaali, gregorian ]
      properties:
        jalaali:
          type: string
          description: Jalaali date
          example: "1399-01-01T00:00:00Z"
        gregorian:
          type: string
          description: Gregorian date
          example: "2020-01-01T00:00:00Z"


    Token:
      type: object
      required:
        - name
        - symbol
        - decimals
        - address
        - logoUri
        - chainId
        - persianName
      properties:
        name:
          type: string
          description: The name of the token.
          example: "Zar Stablecoin"
        symbol:
          $ref: '#/components/schemas/Symbol'
        decimals:
          type: integer
          format: int64
          description: The number of decimals for the token.
          example: 18
        address:
          type: string
          format: address
          description: The Ethereum address of the token.
          example: "0x1234567890123456789012345678901234567890"
        logoUri:
          type: string
          description: The URI of the token's logo.
          example: "/assets/logos/dai.svg"
        chainId:
          type: integer
          format: int64
          description: The chain ID of the token.
          example: 1
        persianName:
          type: string
          description: The Persian name of the token.
          example: "زر"

    Permission:
      type: object
      required:
        - id
        - timestamp
        - where
        - who
        - action
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        where:
          $ref: '#/components/schemas/Address'
        who:
          $ref: '#/components/schemas/Address'
        action:
          type: string
          enum:
            - rely
            - deny
            - hope
            - nope

    Address:
      type: object
      required:
        - label
        - address
      properties:
        label:
          type: string
          description: The label of the address.
          example: "vat"
        address:
          type: string
          description: The Ethereum address.
          example: "0x1234567890123456789012345678901234567890"

    AuthMatrix:
      type: object
      required:
        - wheres
        - whos
        - values
      properties:
        wheres:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        whos:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        values:
          type: array
          items:
            type: array
            items:
              type: integer
              enum:
                - 0
                - 1
          example:
            - [ 0, 1, 0 ]
            - [ 1, 0, 1 ]
            - [ 0, 1, 0 ]

    Stats:
      type: object
      required:
        - stablecoinSystem
        - lendingpool
      properties:
        stablecoinSystem:
          $ref: '#/components/schemas/StablecoinSystemStats'
        lendingpool:
          $ref: '#/components/schemas/LendingpoolStats'

    LendingpoolStats:
      type: object
      required:
        - totalAvailable
        - totalBorrows
        - totalMarketSize
      properties:
        totalAvailable:
          description: Total available
          $ref: '#/components/schemas/Currency'
        totalBorrows:
          description: Total borrows
          $ref: '#/components/schemas/Currency'
        totalMarketSize:
          description: Total market size
          $ref: '#/components/schemas/Currency'
    
    StablecoinSystemStats:
      type: object
      required:
        - systemSurplus
        - systemDebt
        - systemDebtCeiling
        - systemSurplusBuffer
        - systemBadDebt
        - systemSurplusLotSize
      properties:
        systemSurplus:
          description: System surplus
          $ref: '#/components/schemas/Currency'
        systemDebt:
          description: System debt
          $ref: '#/components/schemas/Currency'
        systemDebtCeiling:
          description: System debt ceiling
          $ref: '#/components/schemas/Currency'
        systemSurplusBuffer:
          description: System surplus buffer
          $ref: '#/components/schemas/Currency'
        systemBadDebt:
          description: System bad debt
          $ref: '#/components/schemas/Currency'
        systemSurplusLotSize:
          description: System surplus lot size
          $ref: '#/components/schemas/Currency'

  
    
