"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Parameters for pagination.

Copyright 2023 Frequenz Energy-as-a-Service GmbH

Licensed under the MIT License (the "License");
you may not use this file except in compliance with the License.
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class PaginationParams(google.protobuf.message.Message):
    """A message defining parameters for paginating list requests.
    It can be appended to a request message to specify the desired page of
    results and the maximum number of results per page. For initial requests
    (requesting the first page), the page_token should not be provided. For
    subsequent requests (requesting any page after the first), the
    next_page_token from the previous responses PaginationInfo must be supplied.
    The page_size should only be specified in the initial request and will be
    disregarded in subsequent requests.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    page_size: builtins.int
    """The maximum number of results to be returned per request."""
    page_token: builtins.str
    """The token identifying a specific page of the list results."""
    def __init__(
        self,
        *,
        page_size: builtins.int | None = ...,
        page_token: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_page_size", b"_page_size", "_page_token", b"_page_token", "page_size", b"page_size", "page_token", b"page_token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_page_size", b"_page_size", "_page_token", b"_page_token", "page_size", b"page_size", "page_token", b"page_token"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_page_size", b"_page_size"]) -> typing.Literal["page_size"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_page_token", b"_page_token"]) -> typing.Literal["page_token"] | None: ...

global___PaginationParams = PaginationParams
