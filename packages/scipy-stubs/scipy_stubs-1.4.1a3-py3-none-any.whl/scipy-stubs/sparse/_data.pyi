import numpy as np
import numpy.typing as npt
from scipy._typing import Untyped
from ._base import _spbase

__all__: list[str] = []

class _data_matrix(_spbase):
    def __init__(self, arg1: Untyped, *, maxprint: Untyped | None = None) -> None: ...
    @property
    def dtype(self) -> np.dtype[np.generic]: ...
    @dtype.setter
    def dtype(self, newtype: npt.DTypeLike) -> None: ...

class _minmax_mixin:
    def max(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def min(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def nanmax(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def nanmin(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def argmax(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def argmin(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
