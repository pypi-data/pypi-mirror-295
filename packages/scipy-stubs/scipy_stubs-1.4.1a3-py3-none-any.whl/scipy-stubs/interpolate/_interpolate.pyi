from scipy._lib._util import copy_if_needed as copy_if_needed
from scipy._typing import Untyped
from scipy.special import comb as comb
from ._bsplines import BSpline as BSpline, make_interp_spline as make_interp_spline
from ._polyint import _Interpolator1D

def lagrange(x, w) -> Untyped: ...

err_mesg: str

class interp2d:
    def __init__(
        self, x, y, z, kind: str = "linear", copy: bool = True, bounds_error: bool = False, fill_value: Untyped | None = None
    ): ...

class interp1d(_Interpolator1D):
    bounds_error: Untyped
    copy: Untyped
    axis: Untyped
    y: Untyped
    x: Untyped
    x_bds: Untyped
    def __init__(
        self,
        x,
        y,
        kind: str = "linear",
        axis: int = -1,
        copy: bool = True,
        bounds_error: Untyped | None = None,
        fill_value=...,
        assume_sorted: bool = False,
    ): ...
    @property
    def fill_value(self) -> Untyped: ...
    @fill_value.setter
    def fill_value(self, fill_value): ...

class _PPolyBase:
    c: Untyped
    x: Untyped
    extrapolate: Untyped
    axis: Untyped
    def __init__(self, c, x, extrapolate: Untyped | None = None, axis: int = 0): ...
    @classmethod
    def construct_fast(cls, c, x, extrapolate: Untyped | None = None, axis: int = 0) -> Untyped: ...
    def extend(self, c, x): ...
    def __call__(self, x, nu: int = 0, extrapolate: Untyped | None = None) -> Untyped: ...

class PPoly(_PPolyBase):
    def derivative(self, nu: int = 1) -> Untyped: ...
    def antiderivative(self, nu: int = 1) -> Untyped: ...
    def integrate(self, a, b, extrapolate: Untyped | None = None) -> Untyped: ...
    def solve(self, y: float = 0.0, discontinuity: bool = True, extrapolate: Untyped | None = None) -> Untyped: ...
    def roots(self, discontinuity: bool = True, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_spline(cls, tck, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_bernstein_basis(cls, bp, extrapolate: Untyped | None = None) -> Untyped: ...

class BPoly(_PPolyBase):
    def derivative(self, nu: int = 1) -> Untyped: ...
    def antiderivative(self, nu: int = 1) -> Untyped: ...
    def integrate(self, a, b, extrapolate: Untyped | None = None) -> Untyped: ...
    c: Untyped
    def extend(self, c, x) -> Untyped: ...
    @classmethod
    def from_power_basis(cls, pp, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_derivatives(cls, xi, yi, orders: Untyped | None = None, extrapolate: Untyped | None = None) -> Untyped: ...

class NdPPoly:
    x: Untyped
    c: Untyped
    extrapolate: Untyped
    def __init__(self, c, x, extrapolate: Untyped | None = None): ...
    @classmethod
    def construct_fast(cls, c, x, extrapolate: Untyped | None = None) -> Untyped: ...
    def __call__(self, x, nu: Untyped | None = None, extrapolate: Untyped | None = None) -> Untyped: ...
    def derivative(self, nu) -> Untyped: ...
    def antiderivative(self, nu) -> Untyped: ...
    def integrate_1d(self, a, b, axis, extrapolate: Untyped | None = None) -> Untyped: ...
    def integrate(self, ranges, extrapolate: Untyped | None = None) -> Untyped: ...
