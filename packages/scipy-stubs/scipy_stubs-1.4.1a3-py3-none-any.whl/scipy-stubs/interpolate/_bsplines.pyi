from scipy._lib._util import normalize_axis_index as normalize_axis_index
from scipy._typing import Untyped
from scipy.linalg import (
    LinAlgError as LinAlgError,
    cho_solve_banded as cho_solve_banded,
    cholesky_banded as cholesky_banded,
    get_lapack_funcs as get_lapack_funcs,
    solve as solve,
    solve_banded as solve_banded,
)
from scipy.optimize import minimize_scalar as minimize_scalar
from scipy.sparse import csr_array as csr_array
from scipy.special import poch as poch

class BSpline:
    k: Untyped
    c: Untyped
    t: Untyped
    extrapolate: Untyped
    axis: Untyped
    def __init__(self, t, c, k, extrapolate: bool = True, axis: int = 0): ...
    @classmethod
    def construct_fast(cls, t, c, k, extrapolate: bool = True, axis: int = 0) -> Untyped: ...
    @property
    def tck(self) -> Untyped: ...
    @classmethod
    def basis_element(cls, t, extrapolate: bool = True) -> Untyped: ...
    @classmethod
    def design_matrix(cls, x, t, k, extrapolate: bool = False) -> Untyped: ...
    def __call__(self, x, nu: int = 0, extrapolate: Untyped | None = None) -> Untyped: ...
    def derivative(self, nu: int = 1) -> Untyped: ...
    def antiderivative(self, nu: int = 1) -> Untyped: ...
    def integrate(self, a, b, extrapolate: Untyped | None = None) -> Untyped: ...
    @classmethod
    def from_power_basis(cls, pp, bc_type: str = "not-a-knot") -> Untyped: ...
    def insert_knot(self, x, m: int = 1) -> Untyped: ...

def make_interp_spline(
    x, y, k: int = 3, t: Untyped | None = None, bc_type: Untyped | None = None, axis: int = 0, check_finite: bool = True
) -> Untyped: ...
def make_lsq_spline(x, y, t, k: int = 3, w: Untyped | None = None, axis: int = 0, check_finite: bool = True) -> Untyped: ...
def make_smoothing_spline(x, y, w: Untyped | None = None, lam: Untyped | None = None) -> Untyped: ...
def fpcheck(x, t, k): ...
