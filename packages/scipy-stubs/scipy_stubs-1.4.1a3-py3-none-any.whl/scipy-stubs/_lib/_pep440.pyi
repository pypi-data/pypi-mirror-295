from typing import Literal, NamedTuple
from typing_extensions import override

from scipy._typing import Untyped

class Infinity:
    @override
    def __eq__(self, other: object, /) -> bool: ...
    @override
    def __ne__(self, other: object, /) -> bool: ...
    def __lt__(self, other: object, /) -> Literal[False]: ...
    def __le__(self, other: object, /) -> Literal[False]: ...
    def __gt__(self, other: object, /) -> Literal[True]: ...
    def __ge__(self, other: object, /) -> Literal[True]: ...
    def __neg__(self) -> NegativeInfinity: ...

class NegativeInfinity:
    @override
    def __eq__(self, other: object, /) -> bool: ...
    @override
    def __ne__(self, other: object, /) -> bool: ...
    def __lt__(self, other: object, /) -> Literal[True]: ...
    def __le__(self, other: object, /) -> Literal[True]: ...
    def __gt__(self, other: object, /) -> Literal[False]: ...
    def __ge__(self, other: object, /) -> Literal[False]: ...
    def __neg__(self) -> Infinity: ...

class _Version(NamedTuple):
    epoch: Untyped
    release: Untyped
    dev: Untyped
    pre: Untyped
    post: Untyped
    local: Untyped

def parse(version) -> Untyped: ...

class InvalidVersion(ValueError): ...

class _BaseVersion:
    @override
    def __eq__(self, other: _BaseVersion, /) -> bool: ...  # type: ignore[override]
    @override
    def __ne__(self, other: _BaseVersion, /) -> bool: ...  # type: ignore[override]
    def __lt__(self, other: _BaseVersion, /) -> bool: ...
    def __le__(self, other: _BaseVersion, /) -> bool: ...
    def __ge__(self, other: _BaseVersion, /) -> bool: ...
    def __gt__(self, other: _BaseVersion, /) -> bool: ...

class LegacyVersion(_BaseVersion):
    def __init__(self, version) -> None: ...
    @property
    def public(self) -> Untyped: ...
    @property
    def base_version(self) -> Untyped: ...
    @property
    def local(self) -> Untyped: ...
    @property
    def is_prerelease(self) -> Untyped: ...
    @property
    def is_postrelease(self) -> Untyped: ...

VERSION_PATTERN: str

class Version(_BaseVersion):
    def __init__(self, version) -> None: ...
    @property
    def public(self) -> Untyped: ...
    @property
    def base_version(self) -> Untyped: ...
    @property
    def local(self) -> Untyped: ...
    @property
    def is_prerelease(self) -> Untyped: ...
    @property
    def is_postrelease(self) -> Untyped: ...
