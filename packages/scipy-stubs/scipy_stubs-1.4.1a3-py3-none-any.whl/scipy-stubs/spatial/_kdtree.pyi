from typing import TypeVar
from typing_extensions import override

import numpy as np
import numpy.typing as npt
from scipy._typing import Untyped
from ._ckdtree import cKDTree, cKDTreeNode

__all__ = ["KDTree", "Rectangle", "distance_matrix", "minkowski_distance", "minkowski_distance_p"]

_BoxT = TypeVar("_BoxT", bound=npt.NDArray[np.float64] | None)

class Rectangle:
    maxes: Untyped
    mins: Untyped
    def __init__(self, maxes, mins) -> None: ...
    def volume(self) -> Untyped: ...
    def split(self, d, split) -> Untyped: ...
    def min_distance_point(self, x, p: float = 2.0) -> Untyped: ...
    def max_distance_point(self, x, p: float = 2.0) -> Untyped: ...
    def min_distance_rectangle(self, other: Rectangle, p: float = 2.0) -> Untyped: ...
    def max_distance_rectangle(self, other: Rectangle, p: float = 2.0) -> Untyped: ...

class KDTree(cKDTree[_BoxT]):
    class node:
        def __init__(self, ckdtree_node: Untyped | None = None) -> None: ...
        @override
        def __eq__(self, other: object, /) -> bool: ...
        def __lt__(self, other: object, /) -> bool: ...
        def __gt__(self, other: object, /) -> bool: ...
        def __le__(self, other: object, /) -> bool: ...
        def __ge__(self, other: object, /) -> bool: ...

    class leafnode(node):
        @property
        def idx(self) -> Untyped: ...
        @property
        def children(self) -> Untyped: ...

    class innernode(node):
        less: Untyped
        greater: Untyped
        def __init__(self, ckdtreenode: cKDTreeNode) -> None: ...
        @property
        def split_dim(self) -> Untyped: ...
        @property
        def split(self) -> Untyped: ...
        @property
        def children(self) -> Untyped: ...

def minkowski_distance_p(x: npt.ArrayLike, y: npt.ArrayLike, p: int = 2) -> Untyped: ...
def minkowski_distance(x: npt.ArrayLike, y: npt.ArrayLike, p: int = 2) -> Untyped: ...
def distance_matrix(x: npt.ArrayLike, y: npt.ArrayLike, p: int = 2, threshold: int = 1000000) -> Untyped: ...
