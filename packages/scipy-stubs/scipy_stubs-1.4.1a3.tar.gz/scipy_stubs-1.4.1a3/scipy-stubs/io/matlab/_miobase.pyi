from scipy._lib import doccer as doccer
from scipy._typing import Untyped

class MatReadError(Exception): ...
class MatWriteError(Exception): ...
class MatReadWarning(UserWarning): ...

doc_dict: Untyped
docfiller: Untyped

def convert_dtypes(dtype_template, order_code) -> Untyped: ...
def read_dtype(mat_stream, a_dtype) -> Untyped: ...
def matfile_version(file_name, *, appendmat: bool = True) -> Untyped: ...

get_matfile_version = matfile_version

def matdims(arr, oned_as: str = "column") -> Untyped: ...

class MatVarReader:
    def __init__(self, file_reader) -> None: ...
    def read_header(self): ...
    def array_from_header(self, header): ...

class MatFileReader:
    mat_stream: Untyped
    dtypes: Untyped
    byte_order: Untyped
    struct_as_record: Untyped
    squeeze_me: Untyped
    chars_as_strings: Untyped
    mat_dtype: Untyped
    verify_compressed_data_integrity: Untyped
    simplify_cells: Untyped
    def __init__(
        self,
        mat_stream,
        byte_order: Untyped | None = None,
        mat_dtype: bool = False,
        squeeze_me: bool = False,
        chars_as_strings: bool = True,
        matlab_compatible: bool = False,
        struct_as_record: bool = True,
        verify_compressed_data_integrity: bool = True,
        simplify_cells: bool = False,
    ): ...
    def set_matlab_compatible(self): ...
    def guess_byte_order(self) -> Untyped: ...
    def end_of_stream(self) -> Untyped: ...

def arr_dtype_number(arr, num) -> Untyped: ...
def arr_to_chars(arr) -> Untyped: ...
