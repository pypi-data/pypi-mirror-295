from scipy._lib._util import normalize_axis_index as normalize_axis_index
from scipy._typing import Untyped
from scipy.interpolate import BSpline as BSpline
from ._arraytools import axis_reverse as axis_reverse, axis_slice as axis_slice
from ._signaltools import lfilter as lfilter, lfiltic as lfiltic, sosfilt as sosfilt
from ._spline import (
    sepfir2d as sepfir2d,
    symiirorder1_ic as symiirorder1_ic,
    symiirorder2_ic_bwd as symiirorder2_ic_bwd,
    symiirorder2_ic_fwd as symiirorder2_ic_fwd,
)

def spline_filter(Iin, lmbda: float = 5.0) -> Untyped: ...
def gauss_spline(x, n) -> Untyped: ...
def compute_root_from_lambda(lamb) -> Untyped: ...
def cspline1d(signal, lamb: float = 0.0) -> Untyped: ...
def qspline1d(signal, lamb: float = 0.0) -> Untyped: ...
def collapse_2d(x, axis) -> Untyped: ...
def symiirorder_nd(func, input, *args, axis: int = -1, **kwargs) -> Untyped: ...
def qspline2d(signal, lamb: float = 0.0, precision: float = -1.0) -> Untyped: ...
def cspline2d(signal, lamb: float = 0.0, precision: float = -1.0) -> Untyped: ...
def cspline1d_eval(cj, newx, dx: float = 1.0, x0: int = 0) -> Untyped: ...
def qspline1d_eval(cj, newx, dx: float = 1.0, x0: int = 0) -> Untyped: ...
def symiirorder1(signal, c0, z1, precision: float = -1.0) -> Untyped: ...
def symiirorder2(input, r, omega, precision: float = -1.0) -> Untyped: ...
