{"version":3,"file":"gSOUD4-8.js","mappings":";AAgCA;AAGA;;;AA4DA;;;AAGA;;;AAQA;AAGA;AAEA;AAMA;AAEA;;;;AASA;AAMA;AACA;AAEA;AAEA;AAEA;;AAIA;;;;AAOA;AAGA;;;AAIA;;AAIA;AACA;AAGA;AACA;AACA;;;;;AAKA;;AAEA;;AAGA;AACA;;;;AAKA;AAGA;;AAEA;AACA;;;;;;AAMA;AAGA;;AAEA;AACA;;AAEA;;;;AAMA;;;AAKA;;AAEA;AACA;AACA;;;;AAMA;;;;AAKA;AAEA;AACA;;;;AAIA;AAGA;;AAEA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/panels/config/application_credentials/dialog-add-application-credential.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { mdiOpenInNew } from \"@mdi/js\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-combo-box\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-button\";\nimport {\n  ApplicationCredential,\n  ApplicationCredentialsConfig,\n  createApplicationCredential,\n  fetchApplicationCredentialsConfig,\n} from \"../../../data/application_credential\";\nimport { domainToName, IntegrationManifest } from \"../../../data/integration\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { AddApplicationCredentialDialogParams } from \"./show-dialog-add-application-credential\";\n\ninterface Domain {\n  id: string;\n  name: string;\n}\n\nconst rowRenderer: ComboBoxLitRenderer<Domain> = (item) =>\n  html`<mwc-list-item>\n    <span>${item.name}</span>\n  </mwc-list-item>`;\n\n@customElement(\"dialog-add-application-credential\")\nexport class DialogAddApplicationCredential extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  // Error message when can't talk to server etc\n  @state() private _error?: string;\n\n  @state() private _params?: AddApplicationCredentialDialogParams;\n\n  @state() private _domain?: string;\n\n  @state() private _manifest?: IntegrationManifest | null;\n\n  @state() private _name?: string;\n\n  @state() private _description?: string;\n\n  @state() private _clientId?: string;\n\n  @state() private _clientSecret?: string;\n\n  @state() private _domains?: Domain[];\n\n  @state() private _config?: ApplicationCredentialsConfig;\n\n  public showDialog(params: AddApplicationCredentialDialogParams) {\n    this._params = params;\n    this._domain = params.selectedDomain;\n    this._manifest = params.manifest;\n    this._name = \"\";\n    this._description = \"\";\n    this._clientId = \"\";\n    this._clientSecret = \"\";\n    this._error = undefined;\n    this._loading = false;\n    this._fetchConfig();\n  }\n\n  private async _fetchConfig() {\n    this._config = await fetchApplicationCredentialsConfig(this.hass);\n    this._domains = Object.keys(this._config.integrations).map((domain) => ({\n      id: domain,\n      name: domainToName(this.hass.localize, domain),\n    }));\n    await this.hass.loadBackendTranslation(\"application_credentials\");\n    this._updateDescription();\n  }\n\n  protected render() {\n    if (!this._params || !this._domains) {\n      return nothing;\n    }\n    const selectedDomainName = this._params.selectedDomain\n      ? domainToName(this.hass.localize, this._domain!)\n      : \"\";\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._abortDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            \"ui.panel.config.application_credentials.editor.caption\"\n          )\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert> `\n            : \"\"}\n          ${this._params.selectedDomain && !this._description\n            ? html`<p>\n                ${this.hass.localize(\n                  \"ui.panel.config.application_credentials.editor.missing_credentials\",\n                  {\n                    integration: selectedDomainName,\n                  }\n                )}\n                ${this._manifest?.is_built_in || this._manifest?.documentation\n                  ? html`<a\n                      href=${this._manifest.is_built_in\n                        ? documentationUrl(\n                            this.hass,\n                            `/integrations/${this._domain}`\n                          )\n                        : this._manifest.documentation}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.application_credentials.editor.missing_credentials_domain_link\",\n                        {\n                          integration: selectedDomainName,\n                        }\n                      )}\n                      <ha-svg-icon .path=${mdiOpenInNew}></ha-svg-icon>\n                    </a>`\n                  : \"\"}\n              </p>`\n            : \"\"}\n          ${!this._params.selectedDomain || !this._description\n            ? html`<p>\n                ${this.hass.localize(\n                  \"ui.panel.config.application_credentials.editor.description\"\n                )}\n                <a\n                  href=${documentationUrl(\n                    this.hass!,\n                    \"/integrations/application_credentials\"\n                  )}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass!.localize(\n                    \"ui.panel.config.application_credentials.editor.view_documentation\"\n                  )}\n                  <ha-svg-icon .path=${mdiOpenInNew}></ha-svg-icon>\n                </a>\n              </p>`\n            : \"\"}\n          ${this._params.selectedDomain\n            ? \"\"\n            : html`<ha-combo-box\n                name=\"domain\"\n                .hass=${this.hass}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.application_credentials.editor.domain\"\n                )}\n                .value=${this._domain}\n                .renderer=${rowRenderer}\n                .items=${this._domains}\n                item-id-path=\"id\"\n                item-value-path=\"id\"\n                item-label-path=\"name\"\n                required\n                @value-changed=${this._handleDomainPicked}\n              ></ha-combo-box>`}\n          ${this._description\n            ? html`<ha-markdown\n                breaks\n                .content=${this._description}\n              ></ha-markdown>`\n            : \"\"}\n          <ha-textfield\n            class=\"name\"\n            name=\"name\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.name\"\n            )}\n            .value=${this._name}\n            required\n            @input=${this._handleValueChanged}\n            .validationMessage=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n          ></ha-textfield>\n          <ha-textfield\n            class=\"clientId\"\n            name=\"clientId\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.client_id\"\n            )}\n            .value=${this._clientId}\n            required\n            @input=${this._handleValueChanged}\n            .validationMessage=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n            .helper=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.client_id_helper\"\n            )}\n            helperPersistent\n          ></ha-textfield>\n          <ha-textfield\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.client_secret\"\n            )}\n            type=\"password\"\n            name=\"clientSecret\"\n            .value=${this._clientSecret}\n            required\n            @input=${this._handleValueChanged}\n            .validationMessage=${this.hass.localize(\"ui.common.error_required\")}\n            .helper=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.client_secret_helper\"\n            )}\n            helperPersistent\n          ></ha-textfield>\n        </div>\n        ${this._loading\n          ? html`\n              <div slot=\"primaryAction\" class=\"submit-spinner\">\n                <ha-circular-progress indeterminate></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <ha-button slot=\"secondaryAction\" @click=${this._abortDialog}>\n                ${this.hass.localize(\"ui.common.cancel\")}\n              </ha-button>\n              <ha-button\n                slot=\"primaryAction\"\n                .disabled=${!this._domain ||\n                !this._clientId ||\n                !this._clientSecret}\n                @click=${this._addApplicationCredential}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.application_credentials.editor.add\"\n                )}\n              </ha-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    this._domains = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _handleDomainPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    this._domain = ev.detail.value;\n    this._updateDescription();\n  }\n\n  private async _updateDescription() {\n    if (!this._domain) {\n      return;\n    }\n\n    await this.hass.loadBackendTranslation(\n      \"application_credentials\",\n      this._domain\n    );\n    const info = this._config!.integrations[this._domain];\n    this._description = this.hass.localize(\n      `component.${this._domain}.application_credentials.description`,\n      info.description_placeholders\n    );\n  }\n\n  private _handleValueChanged(ev: CustomEvent) {\n    this._error = undefined;\n    const name = (ev.target as any).name;\n    const value = (ev.target as any).value;\n    this[`_${name}`] = value;\n  }\n\n  private _abortDialog() {\n    if (this._params && this._params.dialogAbortedCallback) {\n      this._params.dialogAbortedCallback();\n    }\n    this.closeDialog();\n  }\n\n  private async _addApplicationCredential(ev) {\n    ev.preventDefault();\n    if (!this._domain || !this._clientId || !this._clientSecret) {\n      return;\n    }\n\n    this._loading = true;\n    this._error = \"\";\n\n    let applicationCredential: ApplicationCredential;\n    try {\n      applicationCredential = await createApplicationCredential(\n        this.hass,\n        this._domain,\n        this._clientId,\n        this._clientSecret,\n        this._name\n      );\n    } catch (err: any) {\n      this._loading = false;\n      this._error = err.message;\n      return;\n    }\n    this._params!.applicationCredentialAddedCallback(applicationCredential);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n          --dialog-z-index: 10;\n        }\n        .row {\n          display: flex;\n          padding: 8px 0;\n        }\n        ha-combo-box {\n          display: block;\n          margin-bottom: 24px;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 24px;\n        }\n        a {\n          text-decoration: none;\n        }\n        a ha-svg-icon {\n          --mdc-icon-size: 16px;\n        }\n        ha-markdown {\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-application-credential\": DialogAddApplicationCredential;\n  }\n}\n"],"names":[],"sourceRoot":""}