{"version":3,"file":"z7CfDyaS.js","mappings":";;;AAgBA;;AAEA;AAjBA;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;;ACjFA;AACA;;AAEA;;;;AAyCA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;AC1GA;;;ACEA;AACA;AACA;;AAEA;AAnDA;;AAuDA;;;AASA;AAEA;AACA;;AAEA;AAEA;;;AAIA;AACA;AACA;AAGA;AAGA;AACA;;AAEA;;AAGA;;AAGA;;AAEA;;AAGA;;;;AAMA;AACA;;AAGA;;AAIA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://knx-frontend/mwc-switch-base.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-switch.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/generic/dialog-box.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\", \"ha-list-item\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant | undefined,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">\n    <span>${title}</span>\n    <ha-icon-button\n      .label=${hass?.localize(\"ui.dialogs.generic.close\") ?? \"Close\"}\n      .path=${mdiClose}\n      dialogAction=\"close\"\n      class=\"header_button\"\n    ></ha-icon-button>\n  </div>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll, {\n      passive: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host([scrolled]) ::slotted(ha-dialog-header) {\n        border-bottom: 1px solid\n          var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n      }\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 8);\n        -webkit-backdrop-filter: var(\n          --ha-dialog-scrim-backdrop-filter,\n          var(--dialog-backdrop-filter, none)\n        );\n        backdrop-filter: var(\n          --ha-dialog-scrim-backdrop-filter,\n          var(--dialog-backdrop-filter, none)\n        );\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 12px 24px 12px 24px;\n      }\n      .mdc-dialog__title::before {\n        content: unset;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n        -webkit-backdrop-filter: var(--ha-dialog-surface-backdrop-filter, none);\n        backdrop-filter: var(--ha-dialog-surface-backdrop-filter, none);\n        background: var(\n          --ha-dialog-surface-background,\n          var(--mdc-theme-surface, #fff)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_title {\n        position: relative;\n        padding-right: 40px;\n        padding-inline-end: 40px;\n        padding-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_title span {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: block;\n      }\n      .header_button {\n        position: absolute;\n        right: -12px;\n        top: -12px;\n        text-decoration: none;\n        color: inherit;\n        inset-inline-start: initial;\n        inset-inline-end: -12px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple.js';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple.js';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers.js';\nimport {MDCSwitchAdapter} from '@material/switch/deprecated/adapter.js';\nimport MDCSwitchFoundation from '@material/switch/deprecated/foundation.js';\nimport {html} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nexport class SwitchBase extends BaseElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-label'})\n  override ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  protected changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  protected renderRipple() {\n    return this.shouldRenderRipple ? html`\n        <mwc-ripple\n          .accent=\"${this.checked}\"\n          .disabled=\"${this.disabled}\"\n          unbounded>\n        </mwc-ripple>` :\n                                     '';\n  }\n\n  override focus() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.startFocus();\n      formElement.focus();\n    }\n  }\n\n  override blur() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.endFocus();\n      formElement.blur();\n    }\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          ${this.renderRipple()}\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              @change=\"${this.changeHandler}\"\n              @focus=\"${this.handleRippleFocus}\"\n              @blur=\"${this.handleRippleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n          </div>\n        </div>\n      </div>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleMouseDown(event: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleTouchStart(event: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiAlertOutline } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-switch\";\nimport { HaTextField } from \"../../components/ha-textfield\";\nimport { HomeAssistant } from \"../../types\";\nimport { DialogBoxParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogBoxParams;\n\n  @query(\"ha-textfield\") private _textField?: HaTextField;\n\n  public async showDialog(params: DialogBoxParams): Promise<void> {\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    if (this._params?.confirmation || this._params?.prompt) {\n      return false;\n    }\n    if (this._params) {\n      this._dismiss();\n      return true;\n    }\n    return true;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    return html`\n      <ha-dialog\n        open\n        ?scrimClickAction=${confirmPrompt}\n        ?escapeKeyAction=${confirmPrompt}\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${html`${this._params.warning\n          ? html`<ha-svg-icon\n              .path=${mdiAlertOutline}\n              style=\"color: var(--warning-color)\"\n            ></ha-svg-icon> `\n          : \"\"}${this._params.title\n          ? this._params.title\n          : this._params.confirmation &&\n            this.hass.localize(\n              \"ui.dialogs.generic.default_confirmation_title\"\n            )}`}\n      >\n        <div>\n          ${this._params.text\n            ? html`\n                <p class=${this._params.prompt ? \"no-bottom-padding\" : \"\"}>\n                  ${this._params.text}\n                </p>\n              `\n            : \"\"}\n          ${this._params.prompt\n            ? html`\n                <ha-textfield\n                  dialogInitialFocus\n                  value=${ifDefined(this._params.defaultValue)}\n                  .placeholder=${this._params.placeholder}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                  .min=${this._params.inputMin}\n                  .max=${this._params.inputMax}\n                ></ha-textfield>\n              `\n            : \"\"}\n        </div>\n        ${confirmPrompt &&\n        html`\n          <mwc-button\n            @click=${this._dismiss}\n            slot=\"secondaryAction\"\n            ?dialogInitialFocus=${!this._params.prompt &&\n            this._params.destructive}\n          >\n            ${this._params.dismissText\n              ? this._params.dismissText\n              : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n        `}\n        <mwc-button\n          @click=${this._confirm}\n          ?dialogInitialFocus=${!this._params.prompt &&\n          !this._params.destructive}\n          slot=\"primaryAction\"\n          class=${classMap({\n            destructive: this._params.destructive || false,\n          })}\n        >\n          ${this._params.confirmText\n            ? this._params.confirmText\n            : this.hass.localize(\"ui.dialogs.generic.ok\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    if (this._params?.cancel) {\n      this._params.cancel();\n    }\n    this._close();\n  }\n\n  private _confirm(): void {\n    if (this._params!.confirm) {\n      this._params!.confirm(this._textField?.value);\n    }\n    this._close();\n  }\n\n  private _dialogClosed(ev) {\n    if (ev.detail.action === \"ignore\") {\n      return;\n    }\n    this._dismiss();\n  }\n\n  private _close(): void {\n    if (!this._params) {\n      return;\n    }\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([inert]) {\n        pointer-events: initial !important;\n        cursor: initial !important;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      p {\n        margin: 0;\n        color: var(--primary-text-color);\n      }\n      .no-bottom-padding {\n        padding-bottom: 0;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .destructive {\n        --mdc-theme-primary: var(--error-color);\n      }\n      ha-dialog {\n        /* Place above other dialogs */\n        --dialog-z-index: 104;\n      }\n      @media all and (min-width: 600px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 400px;\n        }\n      }\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"names":[],"sourceRoot":""}