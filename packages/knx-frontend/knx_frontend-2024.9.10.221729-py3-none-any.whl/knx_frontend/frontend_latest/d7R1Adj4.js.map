{"version":3,"file":"d7R1Adj4.js","mappings":";AAuEA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAmDA;;ACjDA;AACA;AACA;AACA;;AAEA;AAGA;AAGA;AACA;;AAjCA;;AAEA;AACA;AACA;AACA;;AAEA;AAGA;AAGA;AACA;;AAsBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floors-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-floor.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-floor-picker\";\n\n@customElement(\"ha-floors-picker\")\nexport class HaFloorsPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ attribute: \"picked-floor-label\" })\n  public pickedFloorLabel?: string;\n\n  @property({ attribute: \"pick-floor-label\" })\n  public pickFloorLabel?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const currentFloors = this._currentFloors;\n    return html`\n      ${currentFloors.map(\n        (floor) => html`\n          <div>\n            <ha-floor-picker\n              .curValue=${floor}\n              .noAdd=${this.noAdd}\n              .hass=${this.hass}\n              .value=${floor}\n              .label=${this.pickedFloorLabel}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .deviceFilter=${this.deviceFilter}\n              .entityFilter=${this.entityFilter}\n              .disabled=${this.disabled}\n              @value-changed=${this._floorChanged}\n            ></ha-floor-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-floor-picker\n          .noAdd=${this.noAdd}\n          .hass=${this.hass}\n          .label=${this.pickFloorLabel}\n          .helper=${this.helper}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityFilter}\n          .disabled=${this.disabled}\n          .placeholder=${this.placeholder}\n          .required=${this.required && !currentFloors.length}\n          @value-changed=${this._addFloor}\n          .excludeFloors=${currentFloors}\n        ></ha-floor-picker>\n      </div>\n    `;\n  }\n\n  private get _currentFloors(): string[] {\n    return this.value || [];\n  }\n\n  private async _updateFloors(floors) {\n    this.value = floors;\n\n    fireEvent(this, \"value-changed\", {\n      value: floors,\n    });\n  }\n\n  private _floorChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const curValue = (ev.currentTarget as any).curValue;\n    const newValue = ev.detail.value;\n    if (newValue === curValue) {\n      return;\n    }\n    const currentFloors = this._currentFloors;\n    if (!newValue || currentFloors.includes(newValue)) {\n      this._updateFloors(currentFloors.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateFloors(\n      currentFloors.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private _addFloor(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    const toAdd = ev.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (ev.currentTarget as any).value = \"\";\n    const currentFloors = this._currentFloors;\n    if (currentFloors.includes(toAdd)) {\n      return;\n    }\n\n    this._updateFloors([...currentFloors, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floors-picker\": HaFloorsPicker;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { getDeviceIntegrationLookup } from \"../../data/device_registry\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport {\n  EntitySources,\n  fetchEntitySourcesWithCache,\n} from \"../../data/entity_sources\";\nimport type { FloorSelector } from \"../../data/selector\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport {\n  filterSelectorDevices,\n  filterSelectorEntities,\n} from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-floor-picker\";\nimport \"../ha-floors-picker\";\n\n@customElement(\"ha-selector-floor\")\nexport class HaFloorSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: FloorSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _entitySources?: EntitySources;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  private _hasIntegration(selector: FloorSelector) {\n    return (\n      (selector.floor?.entity &&\n        ensureArray(selector.floor.entity).some(\n          (filter) => filter.integration\n        )) ||\n      (selector.floor?.device &&\n        ensureArray(selector.floor.device).some((device) => device.integration))\n    );\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selector\") && this.value !== undefined) {\n      if (this.selector.floor?.multiple && !Array.isArray(this.value)) {\n        this.value = [this.value];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      } else if (!this.selector.floor?.multiple && Array.isArray(this.value)) {\n        this.value = this.value[0];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      }\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (\n      changedProperties.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n    if (!this._configEntries && this._hasIntegration(this.selector)) {\n      this._configEntries = [];\n      getConfigEntries(this.hass).then((entries) => {\n        this._configEntries = entries;\n      });\n    }\n  }\n\n  protected render() {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return nothing;\n    }\n\n    if (!this.selector.floor?.multiple) {\n      return html`\n        <ha-floor-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          no-add\n          .deviceFilter=${this.selector.floor?.device\n            ? this._filterDevices\n            : undefined}\n          .entityFilter=${this.selector.floor?.entity\n            ? this._filterEntities\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n        ></ha-floor-picker>\n      `;\n    }\n\n    return html`\n      <ha-floors-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .pickFloorLabel=${this.label}\n        no-add\n        .deviceFilter=${this.selector.floor?.device\n          ? this._filterDevices\n          : undefined}\n        .entityFilter=${this.selector.floor?.entity\n          ? this._filterEntities\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-floors-picker>\n    `;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector.floor?.entity) {\n      return true;\n    }\n\n    return ensureArray(this.selector.floor.entity).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (!this.selector.floor?.device) {\n      return true;\n    }\n\n    const deviceIntegrations = this._entitySources\n      ? this._deviceIntegrationLookup(\n          this._entitySources,\n          Object.values(this.hass.entities),\n          Object.values(this.hass.devices),\n          this._configEntries\n        )\n      : undefined;\n\n    return ensureArray(this.selector.floor.device).some((filter) =>\n      filterSelectorDevices(filter, device, deviceIntegrations)\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-floor\": HaFloorSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}