{"version":3,"file":"CH3kqj0e.js","mappings":";;AAqBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAZA;;;ACgEA;AACA;;;AAQA;;AAIA;;;AAIA;;AAIA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;AAIA;;;;AAMA;;;AAKA;AACA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;AA4EA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-aliases-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/dialog-area-registry-detail.ts"],"sourcesContent":["import { LitElement, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-multi-textfield\";\n\n@customElement(\"ha-aliases-editor\")\nclass AliasesEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public aliases!: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    if (!this.aliases) {\n      return nothing;\n    }\n\n    return html`\n      <ha-multi-textfield\n        .hass=${this.hass}\n        .value=${this.aliases}\n        .disabled=${this.disabled}\n        .label=${this.hass!.localize(\"ui.dialogs.aliases.label\")}\n        .removeLabel=${this.hass!.localize(\"ui.dialogs.aliases.remove\")}\n        .addLabel=${this.hass!.localize(\"ui.dialogs.aliases.add\")}\n        item-index\n        @value-changed=${this._aliasesChanged}\n      >\n      </ha-multi-textfield>\n    `;\n  }\n\n  private _aliasesChanged(value) {\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-aliases-editor\": AliasesEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-aliases-editor\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../../components/ha-picture-upload\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-floor-picker\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-labels-picker\";\nimport { AreaRegistryEntryMutableParams } from \"../../../data/area_registry\";\nimport { CropOptions } from \"../../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant, ValueChangedEvent } from \"../../../types\";\nimport { AreaRegistryDetailDialogParams } from \"./show-dialog-area-registry-detail\";\n\nconst cropOptions: CropOptions = {\n  round: false,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: 1.78,\n};\n\nclass DialogAreaDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _aliases!: string[];\n\n  @state() private _labels!: string[];\n\n  @state() private _picture!: string | null;\n\n  @state() private _icon!: string | null;\n\n  @state() private _floor!: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: AreaRegistryDetailDialogParams;\n\n  @state() private _submitting?: boolean;\n\n  public async showDialog(\n    params: AreaRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry\n      ? this._params.entry.name\n      : this._params.suggestedName || \"\";\n    this._aliases = this._params.entry ? this._params.entry.aliases : [];\n    this._labels = this._params.entry ? this._params.entry.labels : [];\n    this._picture = this._params.entry?.picture || null;\n    this._icon = this._params.entry?.icon || null;\n    this._floor = this._params.entry?.floor_id || null;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = !this._isNameValid();\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          entry\n            ? this.hass.localize(\"ui.panel.config.areas.editor.update_area\")\n            : this.hass.localize(\"ui.panel.config.areas.editor.create_area\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${entry\n              ? html`\n                  <ha-settings-row>\n                    <span slot=\"heading\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.areas.editor.area_id\"\n                      )}\n                    </span>\n                    <span slot=\"description\"> ${entry.area_id} </span>\n                  </ha-settings-row>\n                `\n              : nothing}\n\n            <ha-textfield\n              .value=${this._name}\n              @input=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.name\")}\n              .validationMessage=${this.hass.localize(\n                \"ui.panel.config.areas.editor.name_required\"\n              )}\n              required\n              dialogInitialFocus\n            ></ha-textfield>\n\n            <ha-icon-picker\n              .hass=${this.hass}\n              .value=${this._icon}\n              @value-changed=${this._iconChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.icon\")}\n            ></ha-icon-picker>\n\n            <ha-floor-picker\n              .hass=${this.hass}\n              .value=${this._floor}\n              @value-changed=${this._floorChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.floor\")}\n            ></ha-floor-picker>\n\n            <ha-labels-picker\n              .hass=${this.hass}\n              .value=${this._labels}\n              @value-changed=${this._labelsChanged}\n            ></ha-labels-picker>\n\n            <ha-picture-upload\n              .hass=${this.hass}\n              .value=${this._picture}\n              crop\n              .cropOptions=${cropOptions}\n              @change=${this._pictureChanged}\n            ></ha-picture-upload>\n\n            <h3 class=\"header\">\n              ${this.hass.localize(\n                \"ui.panel.config.areas.editor.aliases_section\"\n              )}\n            </h3>\n\n            <p class=\"description\">\n              ${this.hass.localize(\n                \"ui.panel.config.areas.editor.aliases_description\"\n              )}\n            </p>\n            <ha-aliases-editor\n              .hass=${this.hass}\n              .aliases=${this._aliases}\n              @value-changed=${this._aliasesChanged}\n            ></ha-aliases-editor>\n          </div>\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${nameInvalid || this._submitting}\n        >\n          ${entry\n            ? this.hass.localize(\"ui.common.save\")\n            : this.hass.localize(\"ui.common.add\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _isNameValid() {\n    return this._name.trim() !== \"\";\n  }\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _floorChanged(ev) {\n    this._error = undefined;\n    this._floor = ev.detail.value;\n  }\n\n  private _iconChanged(ev) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _labelsChanged(ev) {\n    this._error = undefined;\n    this._labels = ev.detail.value;\n  }\n\n  private _pictureChanged(ev: ValueChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n  }\n\n  private async _updateEntry() {\n    const create = !this._params!.entry;\n    this._submitting = true;\n    try {\n      const values: AreaRegistryEntryMutableParams = {\n        name: this._name.trim(),\n        picture: this._picture || (create ? undefined : null),\n        icon: this._icon || (create ? undefined : null),\n        floor_id: this._floor || (create ? undefined : null),\n        labels: this._labels || null,\n        aliases: this._aliases,\n      };\n      if (create) {\n        await this._params!.createEntry!(values);\n      } else {\n        await this._params!.updateEntry!(values);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.areas.editor.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _aliasesChanged(ev: CustomEvent): void {\n    this._aliases = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-textfield,\n        ha-icon-picker,\n        ha-floor-picker,\n        ha-labels-picker,\n        ha-picture-upload {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-registry-detail\": DialogAreaDetail;\n  }\n}\n\ncustomElements.define(\"dialog-area-registry-detail\", DialogAreaDetail);\n"],"names":[],"sourceRoot":""}