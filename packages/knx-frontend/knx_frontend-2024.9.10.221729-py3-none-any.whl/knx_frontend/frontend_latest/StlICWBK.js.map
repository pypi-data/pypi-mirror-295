{"version":3,"file":"StlICWBK.js","mappings":";;AAqBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAZA;;;ACqFA;AACA;;;AAQA;;AAIA;;;AAIA;;AAIA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;;AAQA;AACA;AACA;;;;;AAOA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;;;AAOA;;;;AAMA;;AAIA;AAEA;AAKA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AA7LA;;;AAoMA;;;AAIA;AACA;AACA;AACA;;;;AAMA;;;;AAMA;;;AAKA;AACA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;;;AA0GA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-aliases-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/dialog-floor-registry-detail.ts"],"sourcesContent":["import { LitElement, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-multi-textfield\";\n\n@customElement(\"ha-aliases-editor\")\nclass AliasesEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public aliases!: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    if (!this.aliases) {\n      return nothing;\n    }\n\n    return html`\n      <ha-multi-textfield\n        .hass=${this.hass}\n        .value=${this.aliases}\n        .disabled=${this.disabled}\n        .label=${this.hass!.localize(\"ui.dialogs.aliases.label\")}\n        .removeLabel=${this.hass!.localize(\"ui.dialogs.aliases.remove\")}\n        .addLabel=${this.hass!.localize(\"ui.dialogs.aliases.add\")}\n        item-index\n        @value-changed=${this._aliasesChanged}\n      >\n      </ha-multi-textfield>\n    `;\n  }\n\n  private _aliasesChanged(value) {\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-aliases-editor\": AliasesEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport { mdiTextureBox } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/chips/ha-chip-set\";\nimport \"../../../components/chips/ha-input-chip\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-aliases-editor\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-picture-upload\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-textfield\";\nimport {\n  FloorRegistryEntry,\n  FloorRegistryEntryMutableParams,\n} from \"../../../data/floor_registry\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { FloorRegistryDetailDialogParams } from \"./show-dialog-floor-registry-detail\";\nimport { showAreaRegistryDetailDialog } from \"./show-dialog-area-registry-detail\";\nimport { updateAreaRegistryEntry } from \"../../../data/area_registry\";\n\nclass DialogFloorDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _aliases!: string[];\n\n  @state() private _icon!: string | null;\n\n  @state() private _level!: number | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: FloorRegistryDetailDialogParams;\n\n  @state() private _submitting?: boolean;\n\n  @state() private _addedAreas = new Set<string>();\n\n  @state() private _removedAreas = new Set<string>();\n\n  public showDialog(params: FloorRegistryDetailDialogParams): void {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry\n      ? this._params.entry.name\n      : this._params.suggestedName || \"\";\n    this._aliases = this._params.entry?.aliases || [];\n    this._icon = this._params.entry?.icon || null;\n    this._level = this._params.entry?.level ?? null;\n    this._addedAreas.clear();\n    this._removedAreas.clear();\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    this._addedAreas.clear();\n    this._removedAreas.clear();\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _floorAreas = memoizeOne(\n    (\n      entry: FloorRegistryEntry | undefined,\n      areas: HomeAssistant[\"areas\"],\n      added: Set<string>,\n      removed: Set<string>\n    ) =>\n      Object.values(areas).filter(\n        (area) =>\n          (area.floor_id === entry?.floor_id || added.has(area.area_id)) &&\n          !removed.has(area.area_id)\n      )\n  );\n\n  protected render() {\n    const areas = this._floorAreas(\n      this._params?.entry,\n      this.hass.areas,\n      this._addedAreas,\n      this._removedAreas\n    );\n\n    if (!this._params) {\n      return nothing;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = !this._isNameValid();\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          entry\n            ? this.hass.localize(\"ui.panel.config.floors.editor.update_floor\")\n            : this.hass.localize(\"ui.panel.config.floors.editor.create_floor\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${entry\n              ? html`\n                  <ha-settings-row>\n                    <span slot=\"heading\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.floors.editor.floor_id\"\n                      )}\n                    </span>\n                    <span slot=\"description\">${entry.floor_id}</span>\n                  </ha-settings-row>\n                `\n              : nothing}\n\n            <ha-textfield\n              .value=${this._name}\n              @input=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.panel.config.floors.editor.name\")}\n              .validationMessage=${this.hass.localize(\n                \"ui.panel.config.floors.editor.name_required\"\n              )}\n              required\n              dialogInitialFocus\n            ></ha-textfield>\n\n            <ha-textfield\n              .value=${this._level}\n              @input=${this._levelChanged}\n              .label=${this.hass.localize(\n                \"ui.panel.config.floors.editor.level\"\n              )}\n              type=\"number\"\n            ></ha-textfield>\n\n            <ha-icon-picker\n              .hass=${this.hass}\n              .value=${this._icon}\n              @value-changed=${this._iconChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.icon\")}\n            >\n              ${!this._icon\n                ? html`\n                    <ha-floor-icon\n                      slot=\"fallback\"\n                      .floor=${{ level: this._level }}\n                    ></ha-floor-icon>\n                  `\n                : nothing}\n            </ha-icon-picker>\n\n            <h3 class=\"header\">\n              ${this.hass.localize(\n                \"ui.panel.config.floors.editor.areas_section\"\n              )}\n            </h3>\n\n            <p class=\"description\">\n              ${this.hass.localize(\n                \"ui.panel.config.floors.editor.areas_description\"\n              )}\n            </p>\n            ${areas.length\n              ? html`<ha-chip-set>\n                  ${repeat(\n                    areas,\n                    (area) => area.area_id,\n                    (area) =>\n                      html`<ha-input-chip\n                        .area=${area}\n                        @click=${this._openArea}\n                        @remove=${this._removeArea}\n                        .label=${area?.name}\n                      >\n                        ${area.icon\n                          ? html`<ha-icon\n                              slot=\"icon\"\n                              .icon=${area.icon}\n                            ></ha-icon>`\n                          : html`<ha-svg-icon\n                              slot=\"icon\"\n                              .path=${mdiTextureBox}\n                            ></ha-svg-icon>`}\n                      </ha-input-chip>`\n                  )}\n                </ha-chip-set>`\n              : nothing}\n            <ha-area-picker\n              no-add\n              .hass=${this.hass}\n              @value-changed=${this._addArea}\n              .excludeAreas=${areas.map((a) => a.area_id)}\n              .label=${this.hass.localize(\n                \"ui.panel.config.floors.editor.add_area\"\n              )}\n            ></ha-area-picker>\n\n            <h3 class=\"header\">\n              ${this.hass.localize(\n                \"ui.panel.config.floors.editor.aliases_section\"\n              )}\n            </h3>\n\n            <p class=\"description\">\n              ${this.hass.localize(\n                \"ui.panel.config.floors.editor.aliases_description\"\n              )}\n            </p>\n            <ha-aliases-editor\n              .hass=${this.hass}\n              .aliases=${this._aliases}\n              @value-changed=${this._aliasesChanged}\n            ></ha-aliases-editor>\n          </div>\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${nameInvalid || this._submitting}\n        >\n          ${entry\n            ? this.hass.localize(\"ui.common.save\")\n            : this.hass.localize(\"ui.common.add\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _openArea(ev) {\n    const area = ev.target.area;\n    showAreaRegistryDetailDialog(this, {\n      entry: area,\n      updateEntry: (values) =>\n        updateAreaRegistryEntry(this.hass!, area.area_id, values),\n    });\n  }\n\n  private _removeArea(ev) {\n    const areaId = ev.target.area.area_id;\n    if (this._addedAreas.has(areaId)) {\n      this._addedAreas.delete(areaId);\n      this._addedAreas = new Set(this._addedAreas);\n      return;\n    }\n    this._removedAreas.add(areaId);\n    this._removedAreas = new Set(this._removedAreas);\n  }\n\n  private _addArea(ev) {\n    const areaId = ev.detail.value;\n    if (!areaId) {\n      return;\n    }\n    ev.target.value = \"\";\n    if (this._removedAreas.has(areaId)) {\n      this._removedAreas.delete(areaId);\n      this._removedAreas = new Set(this._removedAreas);\n      return;\n    }\n    this._addedAreas.add(areaId);\n    this._addedAreas = new Set(this._addedAreas);\n  }\n\n  private _isNameValid() {\n    return this._name.trim() !== \"\";\n  }\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _levelChanged(ev) {\n    this._error = undefined;\n    this._level = ev.target.value === \"\" ? null : Number(ev.target.value);\n  }\n\n  private _iconChanged(ev) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    const create = !this._params!.entry;\n    try {\n      const values: FloorRegistryEntryMutableParams = {\n        name: this._name.trim(),\n        icon: this._icon || (create ? undefined : null),\n        level: this._level,\n        aliases: this._aliases,\n      };\n      if (create) {\n        await this._params!.createEntry!(values, this._addedAreas);\n      } else {\n        await this._params!.updateEntry!(\n          values,\n          this._addedAreas,\n          this._removedAreas\n        );\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.floors.editor.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _aliasesChanged(ev: CustomEvent): void {\n    this._aliases = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-textfield {\n          display: block;\n          margin-bottom: 16px;\n        }\n        ha-floor-icon {\n          color: var(--secondary-text-color);\n        }\n        ha-chip-set {\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-floor-registry-detail\": DialogFloorDetail;\n  }\n}\n\ncustomElements.define(\"dialog-floor-registry-detail\", DialogFloorDetail);\n"],"names":[],"sourceRoot":""}