{"version":3,"file":"reMhYJmf.js","mappings":";AAqBA;;AAEA;AACA;AACA;AACA;;AAGA;;;;;;;;;;AAcA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-condition.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { Condition } from \"../../data/automation\";\nimport { ConditionSelector } from \"../../data/selector\";\nimport \"../../panels/config/automation/condition/ha-automation-condition\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-condition\")\nexport class HaConditionSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ConditionSelector;\n\n  @property({ attribute: false }) public value?: Condition;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected render() {\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : nothing}\n      <ha-automation-condition\n        .disabled=${this.disabled}\n        .conditions=${this.value || []}\n        .hass=${this.hass}\n        .path=${this.selector.condition?.path}\n      ></ha-automation-condition>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-condition {\n        display: block;\n        margin-bottom: 16px;\n      }\n      label {\n        display: block;\n        margin-bottom: 4px;\n        font-weight: 500;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-condition\": HaConditionSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}