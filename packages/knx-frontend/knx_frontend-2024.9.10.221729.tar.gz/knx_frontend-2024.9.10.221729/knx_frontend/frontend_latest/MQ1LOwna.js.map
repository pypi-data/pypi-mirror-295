{"version":3,"file":"MQ1LOwna.js","mappings":";;AAuFA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAkEA;ACxHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-entities-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-entity.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isValidEntityId } from \"../../common/entity/valid_entity_id\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"./ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./ha-entity-picker\";\n\n@customElement(\"ha-entities-picker\")\nclass HaEntitiesPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public helper?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: \"picked-entity-label\" })\n  public pickedEntityLabel?: string;\n\n  @property({ attribute: \"pick-entity-label\" }) public pickEntityLabel?: string;\n\n  @property({ attribute: false })\n  public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Array }) public createDomains?: string[];\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const currentEntities = this._currentEntities;\n    return html`\n      ${currentEntities.map(\n        (entityId) => html`\n          <div>\n            <ha-entity-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeEntities=${this.includeEntities}\n              .excludeEntities=${this.excludeEntities}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n              .entityFilter=${this._getEntityFilter(\n                this.value,\n                this.entityFilter\n              )}\n              .value=${entityId}\n              .label=${this.pickedEntityLabel}\n              .disabled=${this.disabled}\n              .createDomains=${this.createDomains}\n              @value-changed=${this._entityChanged}\n            ></ha-entity-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-entity-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeEntities=${this.includeEntities}\n          .excludeEntities=${this.excludeEntities}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n          .entityFilter=${this._getEntityFilter(this.value, this.entityFilter)}\n          .label=${this.pickEntityLabel}\n          .helper=${this.helper}\n          .disabled=${this.disabled}\n          .createDomains=${this.createDomains}\n          .required=${this.required && !currentEntities.length}\n          @value-changed=${this._addEntity}\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _getEntityFilter = memoizeOne(\n    (\n      value: string[] | undefined,\n      entityFilter: HaEntityPickerEntityFilterFunc | undefined\n    ): HaEntityPickerEntityFilterFunc =>\n      (stateObj: HassEntity) =>\n        (!value || !value.includes(stateObj.entity_id)) &&\n        (!entityFilter || entityFilter(stateObj))\n  );\n\n  private get _currentEntities() {\n    return this.value || [];\n  }\n\n  private async _updateEntities(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _entityChanged(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (\n      newValue === curValue ||\n      (newValue !== undefined && !isValidEntityId(newValue))\n    ) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (!newValue || currentEntities.includes(newValue)) {\n      this._updateEntities(currentEntities.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateEntities(\n      currentEntities.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private async _addEntity(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateEntities([...currentEntities, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entities-picker\": HaEntitiesPickerLight;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport {\n  EntitySources,\n  fetchEntitySourcesWithCache,\n} from \"../../data/entity_sources\";\nimport type { EntitySelector } from \"../../data/selector\";\nimport {\n  filterSelectorEntities,\n  computeCreateDomains,\n} from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-entities-picker\";\nimport \"../entity/ha-entity-picker\";\n\n@customElement(\"ha-selector-entity\")\nexport class HaEntitySelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: EntitySelector;\n\n  @state() private _entitySources?: EntitySources;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _createDomains: string[] | undefined;\n\n  private _hasIntegration(selector: EntitySelector) {\n    return (\n      selector.entity?.filter &&\n      ensureArray(selector.entity.filter).some((filter) => filter.integration)\n    );\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selector\") && this.value !== undefined) {\n      if (this.selector.entity?.multiple && !Array.isArray(this.value)) {\n        this.value = [this.value];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      } else if (!this.selector.entity?.multiple && Array.isArray(this.value)) {\n        this.value = this.value[0];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      }\n    }\n  }\n\n  protected render() {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return nothing;\n    }\n\n    if (!this.selector.entity?.multiple) {\n      return html`<ha-entity-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .includeEntities=${this.selector.entity?.include_entities}\n        .excludeEntities=${this.selector.entity?.exclude_entities}\n        .entityFilter=${this._filterEntities}\n        .createDomains=${this._createDomains}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-entity\n      ></ha-entity-picker>`;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-entities-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .includeEntities=${this.selector.entity.include_entities}\n        .excludeEntities=${this.selector.entity.exclude_entities}\n        .entityFilter=${this._filterEntities}\n        .createDomains=${this._createDomains}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-entities-picker>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (\n      changedProps.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n    if (changedProps.has(\"selector\")) {\n      this._createDomains = computeCreateDomains(this.selector);\n    }\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector?.entity?.filter) {\n      return true;\n    }\n    return ensureArray(this.selector.entity.filter).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-entity\": HaEntitySelector;\n  }\n}\n"],"names":[],"sourceRoot":""}