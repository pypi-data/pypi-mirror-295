{"version":3,"file":"hX78hZDU.js","mappings":";AAsIA;;AAGA;AACA;AACA;AAEA;;AAEA;;AAIA;;;AAwOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-entity-picker.ts"],"sourcesContent":["import \"../ha-list-item\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport {\n  fuzzyFilterSort,\n  ScorableTextItem,\n} from \"../../common/string/filter/sequence-matching\";\nimport { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport { showHelperDetailDialog } from \"../../panels/config/helpers/show-dialog-helper-detail\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  isHelperDomain,\n  HelperDomain,\n} from \"../../panels/config/helpers/const\";\n\ninterface HassEntityWithCachedName extends HassEntity, ScorableTextItem {\n  friendly_name: string;\n}\n\nexport type HaEntityPickerEntityFilterFunc = (entity: HassEntity) => boolean;\n\nconst CREATE_ID = \"___create-new-entity___\";\n\n@customElement(\"ha-entity-picker\")\nexport class HaEntityPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Array }) public createDomains?: string[];\n\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: false })\n  public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean }) public hideClearIcon = false;\n\n  @property({ attribute: \"item-label-path\" }) public itemLabelPath =\n    \"friendly_name\";\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  public async open() {\n    await this.updateComplete;\n    await this.comboBox?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.comboBox?.focus();\n  }\n\n  private _initedStates = false;\n\n  private _states: HassEntityWithCachedName[] = [];\n\n  private _rowRenderer: ComboBoxLitRenderer<HassEntityWithCachedName> = (\n    item\n  ) =>\n    html`<ha-list-item graphic=\"avatar\" .twoline=${!!item.entity_id}>\n      ${item.state\n        ? html`<state-badge\n            slot=\"graphic\"\n            .stateObj=${item}\n            .hass=${this.hass}\n          ></state-badge>`\n        : \"\"}\n      <span>${item.friendly_name}</span>\n      <span slot=\"secondary\"\n        >${item.entity_id.startsWith(CREATE_ID)\n          ? this.hass.localize(\"ui.components.entity.entity-picker.new_entity\")\n          : item.entity_id}</span\n      >\n    </ha-list-item>`;\n\n  private _getStates = memoizeOne(\n    (\n      _opened: boolean,\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      includeUnitOfMeasurement: this[\"includeUnitOfMeasurement\"],\n      includeEntities: this[\"includeEntities\"],\n      excludeEntities: this[\"excludeEntities\"],\n      createDomains: this[\"createDomains\"]\n    ): HassEntityWithCachedName[] => {\n      let states: HassEntityWithCachedName[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      const createItems = createDomains?.length\n        ? createDomains.map((domain) => {\n            const newFriendlyName = hass.localize(\n              \"ui.components.entity.entity-picker.create_helper\",\n              {\n                domain: isHelperDomain(domain)\n                  ? hass.localize(\n                      `ui.panel.config.helpers.types.${domain as HelperDomain}`\n                    )\n                  : domainToName(hass.localize, domain),\n              }\n            );\n\n            return {\n              entity_id: CREATE_ID + domain,\n              state: \"on\",\n              last_changed: \"\",\n              last_updated: \"\",\n              context: { id: \"\", user_id: null, parent_id: null },\n              friendly_name: newFriendlyName,\n              attributes: {\n                icon: \"mdi:plus\",\n              },\n              strings: [domain, newFriendlyName],\n            };\n          })\n        : [];\n\n      if (!entityIds.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_entities\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_entities\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n            strings: [],\n          },\n          ...createItems,\n        ];\n      }\n\n      if (includeEntities) {\n        entityIds = entityIds.filter((entityId) =>\n          this.includeEntities!.includes(entityId)\n        );\n\n        return entityIds\n          .map((key) => {\n            const friendly_name = computeStateName(hass!.states[key]) || key;\n            return {\n              ...hass!.states[key],\n              friendly_name,\n              strings: [key, friendly_name],\n            };\n          })\n          .sort((entityA, entityB) =>\n            caseInsensitiveStringCompare(\n              entityA.friendly_name,\n              entityB.friendly_name,\n              this.hass.locale.language\n            )\n          );\n      }\n\n      if (excludeEntities) {\n        entityIds = entityIds.filter(\n          (entityId) => !excludeEntities!.includes(entityId)\n        );\n      }\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds\n        .map((key) => {\n          const friendly_name = computeStateName(hass!.states[key]) || key;\n          return {\n            ...hass!.states[key],\n            friendly_name,\n            strings: [key, friendly_name],\n          };\n        })\n        .sort((entityA, entityB) =>\n          caseInsensitiveStringCompare(\n            entityA.friendly_name,\n            entityB.friendly_name,\n            this.hass.locale.language\n          )\n        );\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (includeUnitOfMeasurement) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.unit_of_measurement &&\n              includeUnitOfMeasurement.includes(\n                stateObj.attributes.unit_of_measurement\n              ))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      if (!states.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_match\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_match\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n            strings: [],\n          },\n          ...createItems,\n        ];\n      }\n\n      if (createItems?.length) {\n        states.push(...createItems);\n      }\n\n      return states;\n    }\n  );\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"value\") ||\n      changedProps.has(\"label\") ||\n      changedProps.has(\"disabled\")\n    ) {\n      return true;\n    }\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this._initedStates || (changedProps.has(\"_opened\") && this._opened)) {\n      this._states = this._getStates(\n        this._opened,\n        this.hass,\n        this.includeDomains,\n        this.excludeDomains,\n        this.entityFilter,\n        this.includeDeviceClasses,\n        this.includeUnitOfMeasurement,\n        this.includeEntities,\n        this.excludeEntities,\n        this.createDomains\n      );\n      if (this._initedStates) {\n        this.comboBox.filteredItems = this._states;\n      }\n      this._initedStates = true;\n    }\n\n    if (changedProps.has(\"createDomains\") && this.createDomains?.length) {\n      this.hass.loadFragmentTranslation(\"config\");\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        item-value-path=\"entity_id\"\n        .itemLabelPath=${this.itemLabelPath}\n        .hass=${this.hass}\n        .value=${this._value}\n        .label=${this.label === undefined\n          ? this.hass.localize(\"ui.components.entity.entity-picker.entity\")\n          : this.label}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomEntity}\n        .filteredItems=${this._states}\n        .renderer=${this._rowRenderer}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string | undefined>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value?.trim();\n\n    if (newValue && newValue.startsWith(CREATE_ID)) {\n      const domain = newValue.substring(CREATE_ID.length);\n      showHelperDetailDialog(this, {\n        domain,\n        dialogClosedCallback: (item) => {\n          if (item.entityId) this._setValue(item.entityId);\n        },\n      });\n      return;\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const target = ev.target as HaComboBox;\n    const filterString = ev.detail.value.trim().toLowerCase();\n    target.filteredItems = filterString.length\n      ? fuzzyFilterSort<HassEntityWithCachedName>(filterString, this._states)\n      : this._states;\n  }\n\n  private _setValue(value: string | undefined) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n"],"names":[],"sourceRoot":""}