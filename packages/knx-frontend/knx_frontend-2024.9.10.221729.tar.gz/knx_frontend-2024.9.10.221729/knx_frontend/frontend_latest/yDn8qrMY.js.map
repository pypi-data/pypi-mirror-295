{"version":3,"file":"yDn8qrMY.js","mappings":";;;AA+CA;;AASA;;;;;AAKA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;AAgBA;AACA;AACA;AACA;AACA;;AApBA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAcA;;;;;;;;;;;;;;;;;AA2CA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-image.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { ImageSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-textarea\";\nimport \"../ha-textfield\";\nimport \"../ha-picture-upload\";\nimport \"../ha-radio\";\nimport type { HaPictureUpload } from \"../ha-picture-upload\";\nimport { URL_PREFIX } from \"../../data/image_upload\";\n\n@customElement(\"ha-selector-image\")\nexport class HaImageSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public name?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false }) public selector!: ImageSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private showUpload = false;\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (!this.value || this.value.startsWith(URL_PREFIX)) {\n      this.showUpload = true;\n    }\n  }\n\n  protected render() {\n    return html`\n      <div>\n        <label>\n          ${this.hass.localize(\n            \"ui.components.selectors.image.select_image_with_label\",\n            {\n              label:\n                this.label ||\n                this.hass.localize(\"ui.components.selectors.image.image\"),\n            }\n          )}\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.components.selectors.image.upload\")}\n          >\n            <ha-radio\n              name=\"mode\"\n              value=\"upload\"\n              .checked=${this.showUpload}\n              @change=${this._radioGroupPicked}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.components.selectors.image.url\")}\n          >\n            <ha-radio\n              name=\"mode\"\n              value=\"url\"\n              .checked=${!this.showUpload}\n              @change=${this._radioGroupPicked}\n            ></ha-radio>\n          </ha-formfield>\n        </label>\n        ${!this.showUpload\n          ? html`\n              <ha-textfield\n                .name=${this.name}\n                .value=${this.value || \"\"}\n                .placeholder=${this.placeholder || \"\"}\n                .helper=${this.helper}\n                helperPersistent\n                .disabled=${this.disabled}\n                @input=${this._handleChange}\n                .label=${this.label || \"\"}\n                .required=${this.required}\n              ></ha-textfield>\n            `\n          : html`\n              <ha-picture-upload\n                .hass=${this.hass}\n                .value=${this.value?.startsWith(URL_PREFIX) ? this.value : null}\n                .original=${this.selector.image?.original}\n                .cropOptions=${this.selector.image?.crop}\n                @change=${this._pictureChanged}\n              ></ha-picture-upload>\n            `}\n      </div>\n    `;\n  }\n\n  private _radioGroupPicked(ev): void {\n    this.showUpload = ev.target.value === \"upload\";\n  }\n\n  private _pictureChanged(ev) {\n    const value = (ev.target as HaPictureUpload).value;\n\n    fireEvent(this, \"value-changed\", { value: value ?? undefined });\n  }\n\n  private _handleChange(ev) {\n    let value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    if (value === \"\" && !this.required) {\n      value = undefined;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      div {\n        display: flex;\n        flex-direction: column;\n      }\n      label {\n        display: flex;\n        flex-direction: column;\n      }\n      ha-textarea,\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-image\": HaImageSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}