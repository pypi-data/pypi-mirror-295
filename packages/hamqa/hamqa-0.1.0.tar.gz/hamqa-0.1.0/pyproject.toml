[project]
name = "hamqa"
version = "0.1.0"
description = "Register and deregister sensors with home assistant over mqtt"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["Home Assistant", "MQTT", "autodiscovery"]
authors = [
  {name = "hvalev", email = "author@example.com" }
]
maintainers = [
  {name = "hvalev", email = "maintainer@example.com" }
]
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 4 - Beta",
  # Indicate who your project is intended for
  "Intended Audience :: Researchers",
  # "Topic :: Reverse Correlation Classification Images :: Toolkit",
  # "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
]

dependencies = [
    "paho-mqtt",
]

[project.optional-dependencies]
dev = ["check-manifest"]

[project.urls]
"Homepage" = "https://github.com/pypa/sampleproject"
"Bug Reports" = "https://github.com/pypa/sampleproject/issues"
"Funding" = "https://donate.pypi.org"
"Say Thanks!" = "http://saythanks.io/to/example"
"Source" = "https://github.com/pypa/sampleproject/"

[tool.poetry]
name = "hamqa"
version = "0.1.0"
description = "Home Assistant MQTT autodiscovery sensor registration and publishing library"
authors = ["Hristo Valev <blank@blank.blank>"]

[tool.poetry.dependencies]
python = ">=3.8"
paho-mqtt = "^2.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.6"
pytest = "^8.2.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = "single"
indent-style = "tab"

[tool.ruff.lint]
# E = pycodestyles (default)
# F = pyflakes (default)
# B = flake8-bugbear (extra)
# I = isort (extra)
select = ["E", "F", "B", "I"]