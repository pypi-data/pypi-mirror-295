# coding: utf-8

"""
    RentCast API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rentcast_client.models.property_records200_response_inner import PropertyRecords200ResponseInner

class TestPropertyRecords200ResponseInner(unittest.TestCase):
    """PropertyRecords200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PropertyRecords200ResponseInner:
        """Test PropertyRecords200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PropertyRecords200ResponseInner`
        """
        model = PropertyRecords200ResponseInner()
        if include_optional:
            return PropertyRecords200ResponseInner(
                id = '5500-Grand-Lake-Dr,-San-Antonio,-TX-78244',
                formatted_address = '5500 Grand Lake Dr, San Antonio, TX 78244',
                address_line1 = '5500 Grand Lake Dr',
                address_line2 = None,
                city = 'San Antonio',
                state = 'TX',
                zip_code = '78244',
                county = 'Bexar',
                latitude = 29.475962,
                longitude = -98.351442,
                property_type = 'Single Family',
                bedrooms = 3,
                bathrooms = 2,
                square_footage = 1878,
                lot_size = 8843,
                year_built = 1973,
                assessor_id = '05076-103-0500',
                legal_description = 'CB 5076A BLK 3 LOT 50',
                subdivision = 'CONV A/S CODE',
                zoning = 'RH',
                last_sale_date = '2017-10-19T00:00:00.000Z',
                last_sale_price = 185000,
                features = rentcast_client.models.property_records_200_response_inner_features.property_records_200_response_inner_features(
                    architecture_type = 'Contemporary', 
                    cooling = True, 
                    cooling_type = 'Central', 
                    exterior_type = 'Wood', 
                    floor_count = 1, 
                    foundation_type = 'Slab / Mat / Raft', 
                    garage = True, 
                    garage_type = 'Garage', 
                    heating = True, 
                    heating_type = 'Forced Air', 
                    pool = True, 
                    roof_type = 'Asphalt', 
                    room_count = 5, 
                    unit_count = 1, ),
                tax_assessments = rentcast_client.models.property_records_200_response_inner_tax_assessments.property_records_200_response_inner_taxAssessments(
                    2019 = rentcast_client.models.property_records_200_response_inner_tax_assessments_2019.property_records_200_response_inner_taxAssessments_2019(
                        value = 135430, 
                        land = 23450, 
                        improvements = 111980, ), 
                    2020 = rentcast_client.models.property_records_200_response_inner_tax_assessments_2020.property_records_200_response_inner_taxAssessments_2020(
                        value = 142610, 
                        land = 23450, 
                        improvements = 119160, ), 
                    2021 = rentcast_client.models.property_records_200_response_inner_tax_assessments_2021.property_records_200_response_inner_taxAssessments_2021(
                        value = 163440, 
                        land = 45050, 
                        improvements = 118390, ), 
                    2022 = rentcast_client.models.property_records_200_response_inner_tax_assessments_2022.property_records_200_response_inner_taxAssessments_2022(
                        value = 197600, 
                        land = 49560, 
                        improvements = 148040, ), 
                    2023 = rentcast_client.models.property_records_200_response_inner_tax_assessments_2023.property_records_200_response_inner_taxAssessments_2023(
                        value = 225790, 
                        land = 59380, 
                        improvements = 166410, ), ),
                property_taxes = rentcast_client.models.property_records_200_response_inner_property_taxes.property_records_200_response_inner_propertyTaxes(
                    2019 = rentcast_client.models.property_records_200_response_inner_property_taxes_2019.property_records_200_response_inner_propertyTaxes_2019(
                        total = 2984, ), 
                    2020 = rentcast_client.models.property_records_200_response_inner_property_taxes_2020.property_records_200_response_inner_propertyTaxes_2020(
                        total = 3023, ), 
                    2021 = rentcast_client.models.property_records_200_response_inner_property_taxes_2021.property_records_200_response_inner_propertyTaxes_2021(
                        total = 3455, ), 
                    2022 = rentcast_client.models.property_records_200_response_inner_property_taxes_2022.property_records_200_response_inner_propertyTaxes_2022(
                        total = 4091, ), 
                    2023 = rentcast_client.models.property_records_200_response_inner_property_taxes_2023.property_records_200_response_inner_propertyTaxes_2023(
                        total = 4675, ), ),
                owner = rentcast_client.models.property_records_200_response_inner_owner.property_records_200_response_inner_owner(
                    names = [
                        'Michael Smith'
                        ], 
                    mailing_address = rentcast_client.models.property_records_200_response_inner_owner_mailing_address.property_records_200_response_inner_owner_mailingAddress(
                        id = '149-Weaver-Blvd,---264,-Weaverville,-NC-28787', 
                        formatted_address = '149 Weaver Blvd, # 264, Weaverville, NC 28787', 
                        address_line1 = '149 Weaver Blvd', 
                        address_line2 = '# 264', 
                        city = 'Weaverville', 
                        state = 'NC', 
                        zip_code = '28787', ), ),
                owner_occupied = False
            )
        else:
            return PropertyRecords200ResponseInner(
        )
        """

    def testPropertyRecords200ResponseInner(self):
        """Test PropertyRecords200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
