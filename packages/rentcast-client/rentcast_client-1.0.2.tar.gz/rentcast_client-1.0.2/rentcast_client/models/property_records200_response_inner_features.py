# coding: utf-8

"""
    RentCast API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PropertyRecords200ResponseInnerFeatures(BaseModel):
    """
    PropertyRecords200ResponseInnerFeatures
    """ # noqa: E501
    architecture_type: Optional[StrictStr] = Field(default=None, alias="architectureType")
    cooling: Optional[StrictBool] = True
    cooling_type: Optional[StrictStr] = Field(default=None, alias="coolingType")
    exterior_type: Optional[StrictStr] = Field(default=None, alias="exteriorType")
    floor_count: Optional[StrictInt] = Field(default=0, alias="floorCount")
    foundation_type: Optional[StrictStr] = Field(default=None, alias="foundationType")
    garage: Optional[StrictBool] = True
    garage_type: Optional[StrictStr] = Field(default=None, alias="garageType")
    heating: Optional[StrictBool] = True
    heating_type: Optional[StrictStr] = Field(default=None, alias="heatingType")
    pool: Optional[StrictBool] = True
    roof_type: Optional[StrictStr] = Field(default=None, alias="roofType")
    room_count: Optional[StrictInt] = Field(default=0, alias="roomCount")
    unit_count: Optional[StrictInt] = Field(default=0, alias="unitCount")
    __properties: ClassVar[List[str]] = ["architectureType", "cooling", "coolingType", "exteriorType", "floorCount", "foundationType", "garage", "garageType", "heating", "heatingType", "pool", "roofType", "roomCount", "unitCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyRecords200ResponseInnerFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyRecords200ResponseInnerFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architectureType": obj.get("architectureType"),
            "cooling": obj.get("cooling") if obj.get("cooling") is not None else True,
            "coolingType": obj.get("coolingType"),
            "exteriorType": obj.get("exteriorType"),
            "floorCount": obj.get("floorCount") if obj.get("floorCount") is not None else 0,
            "foundationType": obj.get("foundationType"),
            "garage": obj.get("garage") if obj.get("garage") is not None else True,
            "garageType": obj.get("garageType"),
            "heating": obj.get("heating") if obj.get("heating") is not None else True,
            "heatingType": obj.get("heatingType"),
            "pool": obj.get("pool") if obj.get("pool") is not None else True,
            "roofType": obj.get("roofType"),
            "roomCount": obj.get("roomCount") if obj.get("roomCount") is not None else 0,
            "unitCount": obj.get("unitCount") if obj.get("unitCount") is not None else 0
        })
        return _obj


