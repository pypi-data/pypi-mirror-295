# coding: utf-8

"""
    RentCast API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RentalListingsLongTerm200ResponseInner(BaseModel):
    """
    RentalListingsLongTerm200ResponseInner
    """ # noqa: E501
    id: Optional[StrictStr] = None
    formatted_address: Optional[StrictStr] = Field(default=None, alias="formattedAddress")
    address_line1: Optional[StrictStr] = Field(default=None, alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="addressLine2")
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = Field(default=None, alias="zipCode")
    county: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = 0
    longitude: Optional[Union[StrictFloat, StrictInt]] = 0
    property_type: Optional[StrictStr] = Field(default=None, alias="propertyType")
    bedrooms: Optional[StrictInt] = 0
    bathrooms: Optional[StrictInt] = 0
    square_footage: Optional[StrictInt] = Field(default=0, alias="squareFootage")
    lot_size: Optional[StrictInt] = Field(default=0, alias="lotSize")
    year_built: Optional[StrictInt] = Field(default=0, alias="yearBuilt")
    status: Optional[StrictStr] = None
    price: Optional[StrictInt] = 0
    listed_date: Optional[StrictStr] = Field(default=None, alias="listedDate")
    removed_date: Optional[Any] = Field(default=None, alias="removedDate")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    last_seen_date: Optional[StrictStr] = Field(default=None, alias="lastSeenDate")
    days_on_market: Optional[StrictInt] = Field(default=0, alias="daysOnMarket")
    __properties: ClassVar[List[str]] = ["id", "formattedAddress", "addressLine1", "addressLine2", "city", "state", "zipCode", "county", "latitude", "longitude", "propertyType", "bedrooms", "bathrooms", "squareFootage", "lotSize", "yearBuilt", "status", "price", "listedDate", "removedDate", "createdDate", "lastSeenDate", "daysOnMarket"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RentalListingsLongTerm200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if removed_date (nullable) is None
        # and model_fields_set contains the field
        if self.removed_date is None and "removed_date" in self.model_fields_set:
            _dict['removedDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RentalListingsLongTerm200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "formattedAddress": obj.get("formattedAddress"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zipCode": obj.get("zipCode"),
            "county": obj.get("county"),
            "latitude": obj.get("latitude") if obj.get("latitude") is not None else 0,
            "longitude": obj.get("longitude") if obj.get("longitude") is not None else 0,
            "propertyType": obj.get("propertyType"),
            "bedrooms": obj.get("bedrooms") if obj.get("bedrooms") is not None else 0,
            "bathrooms": obj.get("bathrooms") if obj.get("bathrooms") is not None else 0,
            "squareFootage": obj.get("squareFootage") if obj.get("squareFootage") is not None else 0,
            "lotSize": obj.get("lotSize") if obj.get("lotSize") is not None else 0,
            "yearBuilt": obj.get("yearBuilt") if obj.get("yearBuilt") is not None else 0,
            "status": obj.get("status"),
            "price": obj.get("price") if obj.get("price") is not None else 0,
            "listedDate": obj.get("listedDate"),
            "removedDate": obj.get("removedDate"),
            "createdDate": obj.get("createdDate"),
            "lastSeenDate": obj.get("lastSeenDate"),
            "daysOnMarket": obj.get("daysOnMarket") if obj.get("daysOnMarket") is not None else 0
        })
        return _obj


