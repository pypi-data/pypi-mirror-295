# coding: utf-8

"""
    Fideo API

    Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

    The version of the OpenAPI document: 1.0.4
    Contact: support@fideo.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fideo_api.models.location_req import LocationReq
from fideo_api.models.person_name_req import PersonNameReq
from fideo_api.models.social_profile_req import SocialProfileReq
from typing import Optional, Set
from typing_extensions import Self

class MultiFieldReq(BaseModel):
    """
    MultiFieldReq
    """ # noqa: E501
    twitter: Optional[StrictStr] = None
    linkedin: Optional[StrictStr] = None
    record_id: Optional[StrictStr] = Field(default=None, alias="recordId")
    person_id: Optional[StrictStr] = Field(default=None, alias="personId")
    partner_id: Optional[StrictStr] = Field(default=None, alias="partnerId")
    location: Optional[LocationReq] = None
    avatar: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    emails: Optional[List[StrictStr]] = None
    phones: Optional[List[StrictStr]] = None
    profiles: Optional[List[SocialProfileReq]] = None
    maids: Optional[List[StrictStr]] = None
    name: Optional[PersonNameReq] = None
    partner_keys: Optional[Dict[str, StrictStr]] = Field(default=None, alias="partnerKeys")
    li_nonid: Optional[StrictStr] = None
    panorama_id: Optional[StrictStr] = Field(default=None, alias="panoramaId")
    placekey: Optional[StrictStr] = None
    generate_pid: Optional[StrictBool] = Field(default=None, alias="generatePid")
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    profile: Optional[SocialProfileReq] = None
    maid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["twitter", "linkedin", "recordId", "personId", "partnerId", "location", "avatar", "website", "title", "organization", "emails", "phones", "profiles", "maids", "name", "partnerKeys", "li_nonid", "panoramaId", "placekey", "generatePid", "email", "phone", "profile", "maid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MultiFieldReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in profiles (list)
        _items = []
        if self.profiles:
            for _item_profiles in self.profiles:
                if _item_profiles:
                    _items.append(_item_profiles.to_dict())
            _dict['profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Self]:
        """Create an instance of MultiFieldReq from a dict"""


