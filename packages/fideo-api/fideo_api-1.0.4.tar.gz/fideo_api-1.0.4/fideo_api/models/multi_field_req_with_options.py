# coding: utf-8

"""
    Fideo API

    Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

    The version of the OpenAPI document: 1.0.4
    Contact: support@fideo.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fideo_api.models.location_req import LocationReq
from fideo_api.models.multi_field_req import MultiFieldReq
from fideo_api.models.person_name_req import PersonNameReq
from fideo_api.models.social_profile_req import SocialProfileReq
from typing import Optional, Set
from typing_extensions import Self

class MultiFieldReqWithOptions(MultiFieldReq):
    """
    MultiFieldReqWithOptions
    """ # noqa: E501
    infer: Optional[StrictBool] = None
    confidence: Optional[StrictStr] = 'LOW'
    birthday: Optional[StrictStr] = None
    ip_address: Optional[StrictStr] = Field(default=None, alias="ipAddress")
    countries: Optional[List[StrictStr]] = None
    excluded_countries: Optional[List[StrictStr]] = Field(default=None, alias="excludedCountries")
    __properties: ClassVar[List[str]] = ["twitter", "linkedin", "recordId", "personId", "partnerId", "location", "avatar", "website", "title", "organization", "emails", "phones", "profiles", "maids", "name", "partnerKeys", "li_nonid", "panoramaId", "placekey", "generatePid", "email", "phone", "profile", "maid", "infer", "confidence", "birthday", "ipAddress", "countries", "excludedCountries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MultiFieldReqWithOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in profiles (list)
        _items = []
        if self.profiles:
            for _item_profiles in self.profiles:
                if _item_profiles:
                    _items.append(_item_profiles.to_dict())
            _dict['profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # set to None if countries (nullable) is None
        # and model_fields_set contains the field
        if self.countries is None and "countries" in self.model_fields_set:
            _dict['countries'] = None

        # set to None if excluded_countries (nullable) is None
        # and model_fields_set contains the field
        if self.excluded_countries is None and "excluded_countries" in self.model_fields_set:
            _dict['excludedCountries'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MultiFieldReqWithOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "twitter": obj.get("twitter"),
            "linkedin": obj.get("linkedin"),
            "recordId": obj.get("recordId"),
            "personId": obj.get("personId"),
            "partnerId": obj.get("partnerId"),
            "location": LocationReq.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "avatar": obj.get("avatar"),
            "website": obj.get("website"),
            "title": obj.get("title"),
            "organization": obj.get("organization"),
            "emails": obj.get("emails"),
            "phones": obj.get("phones"),
            "profiles": [SocialProfileReq.from_dict(_item) for _item in obj["profiles"]] if obj.get("profiles") is not None else None,
            "maids": obj.get("maids"),
            "name": PersonNameReq.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "partnerKeys": obj.get("partnerKeys"),
            "li_nonid": obj.get("li_nonid"),
            "panoramaId": obj.get("panoramaId"),
            "placekey": obj.get("placekey"),
            "generatePid": obj.get("generatePid"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "profile": SocialProfileReq.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "maid": obj.get("maid"),
            "infer": obj.get("infer"),
            "confidence": obj.get("confidence") if obj.get("confidence") is not None else 'LOW',
            "birthday": obj.get("birthday"),
            "ipAddress": obj.get("ipAddress"),
            "countries": obj.get("countries"),
            "excludedCountries": obj.get("excludedCountries")
        })
        return _obj


