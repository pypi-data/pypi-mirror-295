# coding: utf-8

"""
    Fideo API

    Fideo Intelligence offers an identity intelligence product that protects the public good. - [Fideo Privacy Policy](https://www.fideo.ai/privacy-policy/)

    The version of the OpenAPI document: 1.0.4
    Contact: support@fideo.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fideo_api.models.demographics import Demographics
from fideo_api.models.economic import Economic
from fideo_api.models.education import Education
from fideo_api.models.email import Email
from fideo_api.models.employment import Employment
from fideo_api.models.ip_address import IpAddress
from fideo_api.models.location import Location
from fideo_api.models.name_with_alias import NameWithAlias
from fideo_api.models.phone import Phone
from fideo_api.models.photo import Photo
from fideo_api.models.social_profile_details import SocialProfileDetails
from typing import Optional, Set
from typing_extensions import Self

class SignalsResponseV20240424(BaseModel):
    """
    SignalsResponseV20240424
    """ # noqa: E501
    name: Optional[NameWithAlias] = None
    demographics: Optional[Demographics] = None
    locations: Optional[List[Location]] = None
    emails: Optional[List[Email]] = None
    phones: Optional[List[Phone]] = None
    person_ids: Optional[List[StrictStr]] = Field(default=None, alias="personIds")
    ip_addresses: Optional[List[IpAddress]] = Field(default=None, alias="ipAddresses")
    message: Optional[StrictStr] = None
    social_profiles: Optional[List[SocialProfileDetails]] = Field(default=None, alias="socialProfiles")
    employment: Optional[List[Employment]] = None
    education: Optional[List[Education]] = None
    photos: Optional[List[Photo]] = None
    economic: Optional[Economic] = None
    __properties: ClassVar[List[str]] = ["name", "demographics", "locations", "emails", "phones", "personIds", "ipAddresses", "message", "socialProfiles", "employment", "education", "photos", "economic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignalsResponseV20240424 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of demographics
        if self.demographics:
            _dict['demographics'] = self.demographics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item_emails in self.emails:
                if _item_emails:
                    _items.append(_item_emails.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phones (list)
        _items = []
        if self.phones:
            for _item_phones in self.phones:
                if _item_phones:
                    _items.append(_item_phones.to_dict())
            _dict['phones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ip_addresses (list)
        _items = []
        if self.ip_addresses:
            for _item_ip_addresses in self.ip_addresses:
                if _item_ip_addresses:
                    _items.append(_item_ip_addresses.to_dict())
            _dict['ipAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in social_profiles (list)
        _items = []
        if self.social_profiles:
            for _item_social_profiles in self.social_profiles:
                if _item_social_profiles:
                    _items.append(_item_social_profiles.to_dict())
            _dict['socialProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in employment (list)
        _items = []
        if self.employment:
            for _item_employment in self.employment:
                if _item_employment:
                    _items.append(_item_employment.to_dict())
            _dict['employment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in education (list)
        _items = []
        if self.education:
            for _item_education in self.education:
                if _item_education:
                    _items.append(_item_education.to_dict())
            _dict['education'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item_photos in self.photos:
                if _item_photos:
                    _items.append(_item_photos.to_dict())
            _dict['photos'] = _items
        # override the default output from pydantic by calling `to_dict()` of economic
        if self.economic:
            _dict['economic'] = self.economic.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignalsResponseV20240424 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": NameWithAlias.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "demographics": Demographics.from_dict(obj["demographics"]) if obj.get("demographics") is not None else None,
            "locations": [Location.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "emails": [Email.from_dict(_item) for _item in obj["emails"]] if obj.get("emails") is not None else None,
            "phones": [Phone.from_dict(_item) for _item in obj["phones"]] if obj.get("phones") is not None else None,
            "personIds": obj.get("personIds"),
            "ipAddresses": [IpAddress.from_dict(_item) for _item in obj["ipAddresses"]] if obj.get("ipAddresses") is not None else None,
            "message": obj.get("message"),
            "socialProfiles": [SocialProfileDetails.from_dict(_item) for _item in obj["socialProfiles"]] if obj.get("socialProfiles") is not None else None,
            "employment": [Employment.from_dict(_item) for _item in obj["employment"]] if obj.get("employment") is not None else None,
            "education": [Education.from_dict(_item) for _item in obj["education"]] if obj.get("education") is not None else None,
            "photos": [Photo.from_dict(_item) for _item in obj["photos"]] if obj.get("photos") is not None else None,
            "economic": Economic.from_dict(obj["economic"]) if obj.get("economic") is not None else None
        })
        return _obj


