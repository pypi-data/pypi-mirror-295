"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AttributeKey(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[AttributeKey._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TYPE_UNSPECIFIED: AttributeKey._Type.ValueType  # 0
        """called "none" sometimes"""
        TYPE_BOOLEAN: AttributeKey._Type.ValueType  # 1
        TYPE_STRING: AttributeKey._Type.ValueType  # 2
        TYPE_FLOAT: AttributeKey._Type.ValueType  # 3
        TYPE_INT: AttributeKey._Type.ValueType  # 4
        """note: all numbers are stored as float64, so massive integers can be rounded. USE STRING FOR IDS."""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """this mostly reflects what types are able to be ingested, see eap_spans consumer for ingest details"""

    TYPE_UNSPECIFIED: AttributeKey.Type.ValueType  # 0
    """called "none" sometimes"""
    TYPE_BOOLEAN: AttributeKey.Type.ValueType  # 1
    TYPE_STRING: AttributeKey.Type.ValueType  # 2
    TYPE_FLOAT: AttributeKey.Type.ValueType  # 3
    TYPE_INT: AttributeKey.Type.ValueType  # 4
    """note: all numbers are stored as float64, so massive integers can be rounded. USE STRING FOR IDS."""

    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    type: global___AttributeKey.Type.ValueType
    name: builtins.str
    """if you use span_id this will route to span.span_id,
    if you use derp this will route to attr_{str,num}_{n}['derp']
    """
    def __init__(
        self,
        *,
        type: global___AttributeKey.Type.ValueType = ...,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "type", b"type"]) -> None: ...

global___AttributeKey = AttributeKey

@typing.final
class AttributeKeyTransformContext(google.protobuf.message.Message):
    """Special cases for attributes, in particular things like project name"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ProjectIdsToNamesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    PROJECT_IDS_TO_NAMES_FIELD_NUMBER: builtins.int
    @property
    def project_ids_to_names(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.str]: ...
    def __init__(
        self,
        *,
        project_ids_to_names: collections.abc.Mapping[builtins.int, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["project_ids_to_names", b"project_ids_to_names"]) -> None: ...

global___AttributeKeyTransformContext = AttributeKeyTransformContext

@typing.final
class AttributeValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VAL_BOOL_FIELD_NUMBER: builtins.int
    VAL_STR_FIELD_NUMBER: builtins.int
    VAL_FLOAT_FIELD_NUMBER: builtins.int
    VAL_INT_FIELD_NUMBER: builtins.int
    val_bool: builtins.bool
    val_str: builtins.str
    val_float: builtins.float
    val_int: builtins.int
    def __init__(
        self,
        *,
        val_bool: builtins.bool = ...,
        val_str: builtins.str = ...,
        val_float: builtins.float = ...,
        val_int: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["val_bool", b"val_bool", "val_float", b"val_float", "val_int", b"val_int", "val_str", b"val_str", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["val_bool", b"val_bool", "val_float", b"val_float", "val_int", b"val_int", "val_str", b"val_str", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["val_bool", "val_str", "val_float", "val_int"] | None: ...

global___AttributeValue = AttributeValue
