# coding: utf-8

"""
    CoinGecko API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from coingecko_openapi_client.api_client import ApiClient


class SimpleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def simple_price_get(self, ids, vs_currencies, **kwargs):  # noqa: E501
        """Get the current price of any cryptocurrencies in any other supported currencies that you need.  # noqa: E501

        Note: to check if a price is stale, please flag `include_last_updated_at=true` to get the latest updated time. You may also flag `include_24hr_change=true` to check if it returns 'null' value.  Cache / Update Frequency: every 60 seconds  (every 30 seconds for Pro API)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_price_get(ids, vs_currencies, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: id of coins, comma-separated if querying more than 1 coin *refers to <b>`coins/list`</b> (required)
        :param str vs_currencies: vs_currency of coins, comma-separated if querying more than 1 vs_currency *refers to <b>`simple/supported_vs_currencies`</b> (required)
        :param str include_market_cap: <b>true/false</b> to include market_cap, <b>default: false</b>
        :param str include_24hr_vol: <b>true/false</b> to include 24hr_vol, <b>default: false</b>
        :param str include_24hr_change: <b>true/false</b> to include 24hr_change, <b>default: false</b>
        :param str include_last_updated_at: <b>true/false</b> to include last_updated_at of price, <b>default: false</b>
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_price_get_with_http_info(ids, vs_currencies, **kwargs)  # noqa: E501
        else:
            (data) = self.simple_price_get_with_http_info(ids, vs_currencies, **kwargs)  # noqa: E501
            return data

    def simple_price_get_with_http_info(self, ids, vs_currencies, **kwargs):  # noqa: E501
        """Get the current price of any cryptocurrencies in any other supported currencies that you need.  # noqa: E501

        Note: to check if a price is stale, please flag `include_last_updated_at=true` to get the latest updated time. You may also flag `include_24hr_change=true` to check if it returns 'null' value.  Cache / Update Frequency: every 60 seconds  (every 30 seconds for Pro API)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_price_get_with_http_info(ids, vs_currencies, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: id of coins, comma-separated if querying more than 1 coin *refers to <b>`coins/list`</b> (required)
        :param str vs_currencies: vs_currency of coins, comma-separated if querying more than 1 vs_currency *refers to <b>`simple/supported_vs_currencies`</b> (required)
        :param str include_market_cap: <b>true/false</b> to include market_cap, <b>default: false</b>
        :param str include_24hr_vol: <b>true/false</b> to include 24hr_vol, <b>default: false</b>
        :param str include_24hr_change: <b>true/false</b> to include 24hr_change, <b>default: false</b>
        :param str include_last_updated_at: <b>true/false</b> to include last_updated_at of price, <b>default: false</b>
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'vs_currencies', 'include_market_cap', 'include_24hr_vol', 'include_24hr_change', 'include_last_updated_at', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_price_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and ('ids' not in params or
                                                       params['ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ids` when calling `simple_price_get`")  # noqa: E501
        # verify the required parameter 'vs_currencies' is set
        if self.api_client.client_side_validation and ('vs_currencies' not in params or
                                                       params['vs_currencies'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currencies` when calling `simple_price_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'vs_currencies' in params:
            query_params.append(('vs_currencies', params['vs_currencies']))  # noqa: E501
        if 'include_market_cap' in params:
            query_params.append(('include_market_cap', params['include_market_cap']))  # noqa: E501
        if 'include_24hr_vol' in params:
            query_params.append(('include_24hr_vol', params['include_24hr_vol']))  # noqa: E501
        if 'include_24hr_change' in params:
            query_params.append(('include_24hr_change', params['include_24hr_change']))  # noqa: E501
        if 'include_last_updated_at' in params:
            query_params.append(('include_last_updated_at', params['include_last_updated_at']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simple/price', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simple_supported_vs_currencies_get(self, **kwargs):  # noqa: E501
        """Get list of supported_vs_currencies.  # noqa: E501

        Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_supported_vs_currencies_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_supported_vs_currencies_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.simple_supported_vs_currencies_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def simple_supported_vs_currencies_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of supported_vs_currencies.  # noqa: E501

        Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_supported_vs_currencies_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_supported_vs_currencies_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simple/supported_vs_currencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simple_token_price_id_get(self, id, contract_addresses, vs_currencies, **kwargs):  # noqa: E501
        """Get current price of tokens (using contract addresses) for a given platform in any other currency that you need.  # noqa: E501

        This endpoint allows you to query a token price by using contract address. It returns the global average price that is aggregated across all active exchanges on CoinGecko. It does not return the price of a specific network, you may cross-check the price on CoinGecko.com. Learn more about our price methodology <a href='https://www.coingecko.com/en/methodology'>here</a>.  Cache / Update Frequency: every 60 seconds  (every 30 seconds for Pro API)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_token_price_id_get(id, contract_addresses, vs_currencies, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options) (required)
        :param str contract_addresses: The contract address of tokens, comma separated (required)
        :param str vs_currencies: vs_currency of coins, comma-separated if querying more than 1 vs_currency *refers to <b>`simple/supported_vs_currencies`</b> (required)
        :param str include_market_cap: <b>true/false</b> to include market_cap, <b>default: false</b>
        :param str include_24hr_vol: <b>true/false</b> to include 24hr_vol, <b>default: false</b>
        :param str include_24hr_change: <b>true/false</b> to include 24hr_change, <b>default: false</b>
        :param str include_last_updated_at: <b>true/false</b> to include last_updated_at of price, <b>default: false</b>
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_token_price_id_get_with_http_info(id, contract_addresses, vs_currencies, **kwargs)  # noqa: E501
        else:
            (data) = self.simple_token_price_id_get_with_http_info(id, contract_addresses, vs_currencies, **kwargs)  # noqa: E501
            return data

    def simple_token_price_id_get_with_http_info(self, id, contract_addresses, vs_currencies, **kwargs):  # noqa: E501
        """Get current price of tokens (using contract addresses) for a given platform in any other currency that you need.  # noqa: E501

        This endpoint allows you to query a token price by using contract address. It returns the global average price that is aggregated across all active exchanges on CoinGecko. It does not return the price of a specific network, you may cross-check the price on CoinGecko.com. Learn more about our price methodology <a href='https://www.coingecko.com/en/methodology'>here</a>.  Cache / Update Frequency: every 60 seconds  (every 30 seconds for Pro API)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_token_price_id_get_with_http_info(id, contract_addresses, vs_currencies, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options) (required)
        :param str contract_addresses: The contract address of tokens, comma separated (required)
        :param str vs_currencies: vs_currency of coins, comma-separated if querying more than 1 vs_currency *refers to <b>`simple/supported_vs_currencies`</b> (required)
        :param str include_market_cap: <b>true/false</b> to include market_cap, <b>default: false</b>
        :param str include_24hr_vol: <b>true/false</b> to include 24hr_vol, <b>default: false</b>
        :param str include_24hr_change: <b>true/false</b> to include 24hr_change, <b>default: false</b>
        :param str include_last_updated_at: <b>true/false</b> to include last_updated_at of price, <b>default: false</b>
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contract_addresses', 'vs_currencies', 'include_market_cap', 'include_24hr_vol', 'include_24hr_change', 'include_last_updated_at', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_token_price_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `simple_token_price_id_get`")  # noqa: E501
        # verify the required parameter 'contract_addresses' is set
        if self.api_client.client_side_validation and ('contract_addresses' not in params or
                                                       params['contract_addresses'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_addresses` when calling `simple_token_price_id_get`")  # noqa: E501
        # verify the required parameter 'vs_currencies' is set
        if self.api_client.client_side_validation and ('vs_currencies' not in params or
                                                       params['vs_currencies'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currencies` when calling `simple_token_price_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'contract_addresses' in params:
            query_params.append(('contract_addresses', params['contract_addresses']))  # noqa: E501
        if 'vs_currencies' in params:
            query_params.append(('vs_currencies', params['vs_currencies']))  # noqa: E501
        if 'include_market_cap' in params:
            query_params.append(('include_market_cap', params['include_market_cap']))  # noqa: E501
        if 'include_24hr_vol' in params:
            query_params.append(('include_24hr_vol', params['include_24hr_vol']))  # noqa: E501
        if 'include_24hr_change' in params:
            query_params.append(('include_24hr_change', params['include_24hr_change']))  # noqa: E501
        if 'include_last_updated_at' in params:
            query_params.append(('include_last_updated_at', params['include_last_updated_at']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simple/token_price/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
