# coding: utf-8

"""
    CoinGecko API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from coingecko_openapi_client.api_client import ApiClient


class ContractApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def coins_id_contract_contract_address_get(self, id, contract_address, **kwargs):  # noqa: E501
        """Get coin info from contract address  # noqa: E501

        Get coin info from contract address  Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_contract_contract_address_get(id, contract_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Asset platform (See asset_platforms endpoint for list of options) (required)
        :param str contract_address: Token's contract address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_contract_contract_address_get_with_http_info(id, contract_address, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_contract_contract_address_get_with_http_info(id, contract_address, **kwargs)  # noqa: E501
            return data

    def coins_id_contract_contract_address_get_with_http_info(self, id, contract_address, **kwargs):  # noqa: E501
        """Get coin info from contract address  # noqa: E501

        Get coin info from contract address  Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_contract_contract_address_get_with_http_info(id, contract_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Asset platform (See asset_platforms endpoint for list of options) (required)
        :param str contract_address: Token's contract address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contract_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_contract_contract_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_contract_contract_address_get`")  # noqa: E501
        # verify the required parameter 'contract_address' is set
        if self.api_client.client_side_validation and ('contract_address' not in params or
                                                       params['contract_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_address` when calling `coins_id_contract_contract_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contract_address' in params:
            path_params['contract_address'] = params['contract_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/contract/{contract_address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_contract_contract_address_market_chart_get(self, id, contract_address, vs_currency, days, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address   # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days from current time = hourly data</li><li>above 90 days from current time = daily data (00:00 UTC)</li></ul></b>  Cache based on days range:<ul><li>1 day = 30 seconds cache</li><li>2-90 days = 30 minutes cache</li><li> 90 days = 12 hours cache</li></ul><p>The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35). The cache will always expire at 00:40 UTC.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_contract_contract_address_market_chart_get(id, contract_address, vs_currency, days, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options) (required)
        :param str contract_address: Token's contract address (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str days: Data up to number of days ago (eg. 1,14,30,max) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_contract_contract_address_market_chart_get_with_http_info(id, contract_address, vs_currency, days, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_contract_contract_address_market_chart_get_with_http_info(id, contract_address, vs_currency, days, **kwargs)  # noqa: E501
            return data

    def coins_id_contract_contract_address_market_chart_get_with_http_info(self, id, contract_address, vs_currency, days, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address   # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days from current time = hourly data</li><li>above 90 days from current time = daily data (00:00 UTC)</li></ul></b>  Cache based on days range:<ul><li>1 day = 30 seconds cache</li><li>2-90 days = 30 minutes cache</li><li> 90 days = 12 hours cache</li></ul><p>The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35). The cache will always expire at 00:40 UTC.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_contract_contract_address_market_chart_get_with_http_info(id, contract_address, vs_currency, days, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options) (required)
        :param str contract_address: Token's contract address (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str days: Data up to number of days ago (eg. 1,14,30,max) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contract_address', 'vs_currency', 'days', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_contract_contract_address_market_chart_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_contract_contract_address_market_chart_get`")  # noqa: E501
        # verify the required parameter 'contract_address' is set
        if self.api_client.client_side_validation and ('contract_address' not in params or
                                                       params['contract_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_address` when calling `coins_id_contract_contract_address_market_chart_get`")  # noqa: E501
        # verify the required parameter 'vs_currency' is set
        if self.api_client.client_side_validation and ('vs_currency' not in params or
                                                       params['vs_currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currency` when calling `coins_id_contract_contract_address_market_chart_get`")  # noqa: E501
        # verify the required parameter 'days' is set
        if self.api_client.client_side_validation and ('days' not in params or
                                                       params['days'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `days` when calling `coins_id_contract_contract_address_market_chart_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contract_address' in params:
            path_params['contract_address'] = params['contract_address']  # noqa: E501

        query_params = []
        if 'vs_currency' in params:
            query_params.append(('vs_currency', params['vs_currency']))  # noqa: E501
        if 'days' in params:
            query_params.append(('days', params['days']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/contract/{contract_address}/market_chart/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_contract_contract_address_market_chart_range_get(self, id, contract_address, vs_currency, _from, to, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto) from a contract address  # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days of date range = hourly data</li><li>above 90 days of date range = daily data (00:00 UTC)</li></ul></b>  Cache / Update Frequency: every 5 minutes. The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_contract_contract_address_market_chart_range_get(id, contract_address, vs_currency, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options) (required)
        :param str contract_address: Token's contract address (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str _from: From date in UNIX Timestamp (eg. 1392577232) (required)
        :param str to: To date in UNIX Timestamp (eg. 1422577232) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_contract_contract_address_market_chart_range_get_with_http_info(id, contract_address, vs_currency, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_contract_contract_address_market_chart_range_get_with_http_info(id, contract_address, vs_currency, _from, to, **kwargs)  # noqa: E501
            return data

    def coins_id_contract_contract_address_market_chart_range_get_with_http_info(self, id, contract_address, vs_currency, _from, to, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto) from a contract address  # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days of date range = hourly data</li><li>above 90 days of date range = daily data (00:00 UTC)</li></ul></b>  Cache / Update Frequency: every 5 minutes. The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_contract_contract_address_market_chart_range_get_with_http_info(id, contract_address, vs_currency, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options) (required)
        :param str contract_address: Token's contract address (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str _from: From date in UNIX Timestamp (eg. 1392577232) (required)
        :param str to: To date in UNIX Timestamp (eg. 1422577232) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contract_address', 'vs_currency', '_from', 'to', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_contract_contract_address_market_chart_range_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_contract_contract_address_market_chart_range_get`")  # noqa: E501
        # verify the required parameter 'contract_address' is set
        if self.api_client.client_side_validation and ('contract_address' not in params or
                                                       params['contract_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_address` when calling `coins_id_contract_contract_address_market_chart_range_get`")  # noqa: E501
        # verify the required parameter 'vs_currency' is set
        if self.api_client.client_side_validation and ('vs_currency' not in params or
                                                       params['vs_currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currency` when calling `coins_id_contract_contract_address_market_chart_range_get`")  # noqa: E501
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and ('_from' not in params or
                                                       params['_from'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_from` when calling `coins_id_contract_contract_address_market_chart_range_get`")  # noqa: E501
        # verify the required parameter 'to' is set
        if self.api_client.client_side_validation and ('to' not in params or
                                                       params['to'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to` when calling `coins_id_contract_contract_address_market_chart_range_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contract_address' in params:
            path_params['contract_address'] = params['contract_address']  # noqa: E501

        query_params = []
        if 'vs_currency' in params:
            query_params.append(('vs_currency', params['vs_currency']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/contract/{contract_address}/market_chart/range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
