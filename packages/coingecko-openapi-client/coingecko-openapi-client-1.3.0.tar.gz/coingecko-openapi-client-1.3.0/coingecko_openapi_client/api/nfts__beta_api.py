# coding: utf-8

"""
    CoinGecko API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from coingecko_openapi_client.api_client import ApiClient


class NftsBetaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def nfts_asset_platform_id_contract_contract_address_get(self, asset_platform_id, contract_address, **kwargs):  # noqa: E501
        """Get current data (name, price_floor, volume_24h ...) for an NFT collection.  # noqa: E501

        Get current data (name, price_floor, volume_24h ...) for an NFT collection. *Solana NFT & Art Blocks are not supported for this endpoint, please use <b>`/nfts/{id}`</b> endpoint instead.  Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nfts_asset_platform_id_contract_contract_address_get(asset_platform_id, contract_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_platform_id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options, use filter=nft param) (required)
        :param str contract_address: The contract_address of the nft collection (/nfts/list for list of nft collection with metadata) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.nfts_asset_platform_id_contract_contract_address_get_with_http_info(asset_platform_id, contract_address, **kwargs)  # noqa: E501
        else:
            (data) = self.nfts_asset_platform_id_contract_contract_address_get_with_http_info(asset_platform_id, contract_address, **kwargs)  # noqa: E501
            return data

    def nfts_asset_platform_id_contract_contract_address_get_with_http_info(self, asset_platform_id, contract_address, **kwargs):  # noqa: E501
        """Get current data (name, price_floor, volume_24h ...) for an NFT collection.  # noqa: E501

        Get current data (name, price_floor, volume_24h ...) for an NFT collection. *Solana NFT & Art Blocks are not supported for this endpoint, please use <b>`/nfts/{id}`</b> endpoint instead.  Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nfts_asset_platform_id_contract_contract_address_get_with_http_info(asset_platform_id, contract_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_platform_id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options, use filter=nft param) (required)
        :param str contract_address: The contract_address of the nft collection (/nfts/list for list of nft collection with metadata) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_platform_id', 'contract_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method nfts_asset_platform_id_contract_contract_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_platform_id' is set
        if self.api_client.client_side_validation and ('asset_platform_id' not in params or
                                                       params['asset_platform_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `asset_platform_id` when calling `nfts_asset_platform_id_contract_contract_address_get`")  # noqa: E501
        # verify the required parameter 'contract_address' is set
        if self.api_client.client_side_validation and ('contract_address' not in params or
                                                       params['contract_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_address` when calling `nfts_asset_platform_id_contract_contract_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_platform_id' in params:
            path_params['asset_platform_id'] = params['asset_platform_id']  # noqa: E501
        if 'contract_address' in params:
            path_params['contract_address'] = params['contract_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/nfts/{asset_platform_id}/contract/{contract_address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def nfts_id_get(self, id, **kwargs):  # noqa: E501
        """Get current data (name, price_floor, volume_24h ...) for an NFT collection  # noqa: E501

        Get current data (name, price_floor, volume_24h ...) for an NFT collection. native_currency (string) is only a representative of the currency.  Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nfts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of nft collection (can be obtained from /nfts/list) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.nfts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.nfts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def nfts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get current data (name, price_floor, volume_24h ...) for an NFT collection  # noqa: E501

        Get current data (name, price_floor, volume_24h ...) for an NFT collection. native_currency (string) is only a representative of the currency.  Cache / Update Frequency: every 60 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nfts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of nft collection (can be obtained from /nfts/list) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method nfts_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `nfts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/nfts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def nfts_list_get(self, **kwargs):  # noqa: E501
        """List all supported NFT ids, paginated by 100 items per page, paginated to 100 items  # noqa: E501

        Use this to obtain all the NFT ids in order to make API calls, paginated to 100 items.  Cache / Update Frequency: every 5 minutes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nfts_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order: valid values: <b>h24_volume_native_asc, h24_volume_native_desc, floor_price_native_asc, floor_price_native_desc, market_cap_native_asc, market_cap_native_desc, market_cap_usd_asc, market_cap_usd_desc</b>
        :param str asset_platform_id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options)
        :param int per_page: Valid values: 1..250<br>Total results per page
        :param int page: Page through results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.nfts_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.nfts_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def nfts_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all supported NFT ids, paginated by 100 items per page, paginated to 100 items  # noqa: E501

        Use this to obtain all the NFT ids in order to make API calls, paginated to 100 items.  Cache / Update Frequency: every 5 minutes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nfts_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order: valid values: <b>h24_volume_native_asc, h24_volume_native_desc, floor_price_native_asc, floor_price_native_desc, market_cap_native_asc, market_cap_native_desc, market_cap_usd_asc, market_cap_usd_desc</b>
        :param str asset_platform_id: The id of the platform issuing tokens (See asset_platforms endpoint for list of options)
        :param int per_page: Valid values: 1..250<br>Total results per page
        :param int page: Page through results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order', 'asset_platform_id', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method nfts_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'asset_platform_id' in params:
            query_params.append(('asset_platform_id', params['asset_platform_id']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/nfts/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
