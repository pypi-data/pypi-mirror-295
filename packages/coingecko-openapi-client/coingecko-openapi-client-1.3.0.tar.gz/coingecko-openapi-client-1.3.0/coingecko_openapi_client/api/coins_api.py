# coding: utf-8

"""
    CoinGecko API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from coingecko_openapi_client.api_client import ApiClient


class CoinsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def coins_id_get(self, id, **kwargs):  # noqa: E501
        """Get current data (name, price, market, ... including exchange tickers) for a coin  # noqa: E501

        Get current data (name, price, market, ... including exchange tickers) for a coin.<br><br> **IMPORTANT**:  Ticker object is limited to 100 items, to get more tickers, use `/coins/{id}/tickers`  Ticker `is_stale` is true when ticker that has not been updated/unchanged from the exchange for more than 8 hours.  Ticker `is_anomaly` is true if ticker's price is outliered by our system.  You are responsible for managing how you want to display these information (e.g. footnote, different background, change opacity, hide)  Note: to check if a price is stale, please refer to `last_updated` of the price.  Dictionary:<li><strong>last</strong>: latest unconverted price in the respective pair target currency</li><li><strong>volume</strong>: unconverted 24h trading volume in the respective pair target currency</li><li><strong>converted_last</strong>: latest converted price in BTC, ETH, and USD</li><li><strong>converted_volume</strong>: converted 24h trading volume in BTC, ETH, and USD</li><li><strong>timestamp</strong>: returns the last time that the price has changed</li><li><strong>last_traded_at</strong>: returns the last time that the price has changed</li><li><strong>last_fetch_at</strong>: returns the last time we call the API</li>  Cache / Update Frequency: every 60 seconds Data for Twitter, Telegram and Reddit will be updated on daily basis.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str localization: Include all localized languages in response (true/false) <b>[default: true]</b>
        :param bool tickers: Include tickers data (true/false) <b>[default: true]</b>
        :param bool market_data: Include market_data (true/false) <b>[default: true]</b>
        :param bool community_data: Include community_data data (true/false) <b>[default: true]</b>
        :param bool developer_data: Include developer_data data (true/false) <b>[default: true]</b>
        :param bool sparkline: Include sparkline 7 days data (eg. true, false) <b>[default: false]</b>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def coins_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get current data (name, price, market, ... including exchange tickers) for a coin  # noqa: E501

        Get current data (name, price, market, ... including exchange tickers) for a coin.<br><br> **IMPORTANT**:  Ticker object is limited to 100 items, to get more tickers, use `/coins/{id}/tickers`  Ticker `is_stale` is true when ticker that has not been updated/unchanged from the exchange for more than 8 hours.  Ticker `is_anomaly` is true if ticker's price is outliered by our system.  You are responsible for managing how you want to display these information (e.g. footnote, different background, change opacity, hide)  Note: to check if a price is stale, please refer to `last_updated` of the price.  Dictionary:<li><strong>last</strong>: latest unconverted price in the respective pair target currency</li><li><strong>volume</strong>: unconverted 24h trading volume in the respective pair target currency</li><li><strong>converted_last</strong>: latest converted price in BTC, ETH, and USD</li><li><strong>converted_volume</strong>: converted 24h trading volume in BTC, ETH, and USD</li><li><strong>timestamp</strong>: returns the last time that the price has changed</li><li><strong>last_traded_at</strong>: returns the last time that the price has changed</li><li><strong>last_fetch_at</strong>: returns the last time we call the API</li>  Cache / Update Frequency: every 60 seconds Data for Twitter, Telegram and Reddit will be updated on daily basis.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str localization: Include all localized languages in response (true/false) <b>[default: true]</b>
        :param bool tickers: Include tickers data (true/false) <b>[default: true]</b>
        :param bool market_data: Include market_data (true/false) <b>[default: true]</b>
        :param bool community_data: Include community_data data (true/false) <b>[default: true]</b>
        :param bool developer_data: Include developer_data data (true/false) <b>[default: true]</b>
        :param bool sparkline: Include sparkline 7 days data (eg. true, false) <b>[default: false]</b>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'localization', 'tickers', 'market_data', 'community_data', 'developer_data', 'sparkline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'localization' in params:
            query_params.append(('localization', params['localization']))  # noqa: E501
        if 'tickers' in params:
            query_params.append(('tickers', params['tickers']))  # noqa: E501
        if 'market_data' in params:
            query_params.append(('market_data', params['market_data']))  # noqa: E501
        if 'community_data' in params:
            query_params.append(('community_data', params['community_data']))  # noqa: E501
        if 'developer_data' in params:
            query_params.append(('developer_data', params['developer_data']))  # noqa: E501
        if 'sparkline' in params:
            query_params.append(('sparkline', params['sparkline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_history_get(self, id, _date, **kwargs):  # noqa: E501
        """Get historical data (price, market cap, 24hr volume, ..) at a given date for a coin.  # noqa: E501

        Get historical data (price, market cap, 24hr volume, ..) at a given date for a coin. The data returned is at 00:00:00 UTC.  The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_history_get(id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str _date: The date of data snapshot in dd-mm-yyyy eg. 30-12-2022 (required)
        :param str localization: Set to false to exclude localized languages in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_history_get_with_http_info(id, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_history_get_with_http_info(id, _date, **kwargs)  # noqa: E501
            return data

    def coins_id_history_get_with_http_info(self, id, _date, **kwargs):  # noqa: E501
        """Get historical data (price, market cap, 24hr volume, ..) at a given date for a coin.  # noqa: E501

        Get historical data (price, market cap, 24hr volume, ..) at a given date for a coin. The data returned is at 00:00:00 UTC.  The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_history_get_with_http_info(id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str _date: The date of data snapshot in dd-mm-yyyy eg. 30-12-2022 (required)
        :param str localization: Set to false to exclude localized languages in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', '_date', 'localization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_history_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `coins_id_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'localization' in params:
            query_params.append(('localization', params['localization']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_market_chart_get(self, id, vs_currency, days, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume (granularity auto)  # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days from current time = hourly data</li><li>above 90 days from current time = daily data (00:00 UTC)</li></ul></b>  Cache based on days range:<ul><li>1 day = 30 seconds cache</li><li>2-90 days = 30 minutes cache</li><li> 90 days = 12 hours cache</li></ul><p>The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35). The cache will always expire at 00:40 UTC.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_market_chart_get(id, vs_currency, days, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str days: Data up to number of days ago (eg. 1,14,30,max) (required)
        :param str interval: Data interval. Possible value: daily
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_market_chart_get_with_http_info(id, vs_currency, days, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_market_chart_get_with_http_info(id, vs_currency, days, **kwargs)  # noqa: E501
            return data

    def coins_id_market_chart_get_with_http_info(self, id, vs_currency, days, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume (granularity auto)  # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days from current time = hourly data</li><li>above 90 days from current time = daily data (00:00 UTC)</li></ul></b>  Cache based on days range:<ul><li>1 day = 30 seconds cache</li><li>2-90 days = 30 minutes cache</li><li> 90 days = 12 hours cache</li></ul><p>The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35). The cache will always expire at 00:40 UTC.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_market_chart_get_with_http_info(id, vs_currency, days, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str days: Data up to number of days ago (eg. 1,14,30,max) (required)
        :param str interval: Data interval. Possible value: daily
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vs_currency', 'days', 'interval', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_market_chart_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_market_chart_get`")  # noqa: E501
        # verify the required parameter 'vs_currency' is set
        if self.api_client.client_side_validation and ('vs_currency' not in params or
                                                       params['vs_currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currency` when calling `coins_id_market_chart_get`")  # noqa: E501
        # verify the required parameter 'days' is set
        if self.api_client.client_side_validation and ('days' not in params or
                                                       params['days'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `days` when calling `coins_id_market_chart_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'vs_currency' in params:
            query_params.append(('vs_currency', params['vs_currency']))  # noqa: E501
        if 'days' in params:
            query_params.append(('days', params['days']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/market_chart', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_market_chart_range_get(self, id, vs_currency, _from, to, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)  # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days of date range = hourly data</li><li>above 90 days of date range = daily data (00:00 UTC)</li></ul></b>  Cache / Update Frequency: every 5 minutes. The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_market_chart_range_get(id, vs_currency, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str _from: From date in UNIX Timestamp (eg. 1392577232) (required)
        :param str to: To date in UNIX Timestamp (eg. 1422577232) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_market_chart_range_get_with_http_info(id, vs_currency, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_market_chart_range_get_with_http_info(id, vs_currency, _from, to, **kwargs)  # noqa: E501
            return data

    def coins_id_market_chart_range_get_with_http_info(self, id, vs_currency, _from, to, **kwargs):  # noqa: E501
        """Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)  # noqa: E501

        Get historical market data include price, market cap, and 24h volume (granularity auto)  Data granularity is automatic (cannot be adjusted) <b><ul><li>1 day from current time = 5 minute interval data</li><li>2 - 90 days of date range = hourly data</li><li>above 90 days of date range = daily data (00:00 UTC)</li></ul></b>  Cache / Update Frequency: every 5 minutes. The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_market_chart_range_get_with_http_info(id, vs_currency, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins) eg. bitcoin (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str _from: From date in UNIX Timestamp (eg. 1392577232) (required)
        :param str to: To date in UNIX Timestamp (eg. 1422577232) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vs_currency', '_from', 'to', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_market_chart_range_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_market_chart_range_get`")  # noqa: E501
        # verify the required parameter 'vs_currency' is set
        if self.api_client.client_side_validation and ('vs_currency' not in params or
                                                       params['vs_currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currency` when calling `coins_id_market_chart_range_get`")  # noqa: E501
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and ('_from' not in params or
                                                       params['_from'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_from` when calling `coins_id_market_chart_range_get`")  # noqa: E501
        # verify the required parameter 'to' is set
        if self.api_client.client_side_validation and ('to' not in params or
                                                       params['to'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to` when calling `coins_id_market_chart_range_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'vs_currency' in params:
            query_params.append(('vs_currency', params['vs_currency']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/market_chart/range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_ohlc_get(self, id, vs_currency, days, **kwargs):  # noqa: E501
        """Get coin's OHLC  # noqa: E501

        Candle's body - data granularity is automatic (cannot be adjusted for public api users): <ul><li>1 - 2 days: 30 minutes</li><li>3 - 30 days: 4 hours</li><li>31 days and beyond: 4 days</li></ul> <p>Daily candle interval parameter is available for paid plan users only (Analyst/Lite/Pro/Enterprise), use <b><i>interval=daily</i></b> parameter in your request:</p> <ul><li>'daily' interval: available for 1/7/14/30/90/180 days</li></ul>  Cache / Update Frequency: every 30 minutes The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_ohlc_get(id, vs_currency, days, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins/list) eg. bitcoin (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str days:  Data up to number of days ago (1/7/14/30/90/180/365/max) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: list[float]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_ohlc_get_with_http_info(id, vs_currency, days, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_ohlc_get_with_http_info(id, vs_currency, days, **kwargs)  # noqa: E501
            return data

    def coins_id_ohlc_get_with_http_info(self, id, vs_currency, days, **kwargs):  # noqa: E501
        """Get coin's OHLC  # noqa: E501

        Candle's body - data granularity is automatic (cannot be adjusted for public api users): <ul><li>1 - 2 days: 30 minutes</li><li>3 - 30 days: 4 hours</li><li>31 days and beyond: 4 days</li></ul> <p>Daily candle interval parameter is available for paid plan users only (Analyst/Lite/Pro/Enterprise), use <b><i>interval=daily</i></b> parameter in your request:</p> <ul><li>'daily' interval: available for 1/7/14/30/90/180 days</li></ul>  Cache / Update Frequency: every 30 minutes The last completed UTC day (00:00) is available 35 minutes after midnight on the next UTC day (00:35).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_ohlc_get_with_http_info(id, vs_currency, days, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins/list) eg. bitcoin (required)
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str days:  Data up to number of days ago (1/7/14/30/90/180/365/max) (required)
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: list[float]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vs_currency', 'days', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_ohlc_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_ohlc_get`")  # noqa: E501
        # verify the required parameter 'vs_currency' is set
        if self.api_client.client_side_validation and ('vs_currency' not in params or
                                                       params['vs_currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currency` when calling `coins_id_ohlc_get`")  # noqa: E501
        # verify the required parameter 'days' is set
        if self.api_client.client_side_validation and ('days' not in params or
                                                       params['days'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `days` when calling `coins_id_ohlc_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'vs_currency' in params:
            query_params.append(('vs_currency', params['vs_currency']))  # noqa: E501
        if 'days' in params:
            query_params.append(('days', params['days']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/ohlc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[float]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_id_tickers_get(self, id, **kwargs):  # noqa: E501
        """Get coin tickers (paginated to 100 items)  # noqa: E501

        Get coin tickers (paginated to 100 items)<br><br> **IMPORTANT**:  Ticker `is_stale` is true when ticker that has not been updated/unchanged from the exchange for more than 8 hours.  Ticker `is_anomaly` is true if ticker's price is outliered by our system.  You are responsible for managing how you want to display these information (e.g. footnote, different background, change opacity, hide)  Dictionary:<li><strong>last</strong>: latest unconverted price in the respective pair target currency</li><li><strong>volume</strong>: unconverted 24h trading volume in the respective pair target currency</li><li><strong>converted_last</strong>: latest converted price in BTC, ETH, and USD</li><li><strong>converted_volume</strong>: converted 24h trading volume in BTC, ETH, and USD</li><li><strong>timestamp</strong>: returns the last time that the price has changed</li><li><strong>last_traded_at</strong>: returns the last time that the price has changed</li><li><strong>last_fetch_at</strong>: returns the last time we call the API</li>  Cache / Update Frequency: every 2 minutes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_tickers_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins/list) eg. bitcoin (required)
        :param str exchange_ids: filter results by exchange_ids (ref: v3/exchanges/list)
        :param str include_exchange_logo: flag to show exchange_logo. valid values: true, false
        :param int page: Page through results
        :param str order: valid values: <b>trust_score_desc (default), trust_score_asc and volume_desc</b>
        :param str depth: flag to show 2% orderbook depth. i.e., cost_to_move_up_usd and cost_to_move_down_usd. valid values: true, false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_id_tickers_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_id_tickers_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def coins_id_tickers_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get coin tickers (paginated to 100 items)  # noqa: E501

        Get coin tickers (paginated to 100 items)<br><br> **IMPORTANT**:  Ticker `is_stale` is true when ticker that has not been updated/unchanged from the exchange for more than 8 hours.  Ticker `is_anomaly` is true if ticker's price is outliered by our system.  You are responsible for managing how you want to display these information (e.g. footnote, different background, change opacity, hide)  Dictionary:<li><strong>last</strong>: latest unconverted price in the respective pair target currency</li><li><strong>volume</strong>: unconverted 24h trading volume in the respective pair target currency</li><li><strong>converted_last</strong>: latest converted price in BTC, ETH, and USD</li><li><strong>converted_volume</strong>: converted 24h trading volume in BTC, ETH, and USD</li><li><strong>timestamp</strong>: returns the last time that the price has changed</li><li><strong>last_traded_at</strong>: returns the last time that the price has changed</li><li><strong>last_fetch_at</strong>: returns the last time we call the API</li>  Cache / Update Frequency: every 2 minutes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_id_tickers_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: pass the coin id (can be obtained from /coins/list) eg. bitcoin (required)
        :param str exchange_ids: filter results by exchange_ids (ref: v3/exchanges/list)
        :param str include_exchange_logo: flag to show exchange_logo. valid values: true, false
        :param int page: Page through results
        :param str order: valid values: <b>trust_score_desc (default), trust_score_asc and volume_desc</b>
        :param str depth: flag to show 2% orderbook depth. i.e., cost_to_move_up_usd and cost_to_move_down_usd. valid values: true, false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'exchange_ids', 'include_exchange_logo', 'page', 'order', 'depth']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_id_tickers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `coins_id_tickers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'exchange_ids' in params:
            query_params.append(('exchange_ids', params['exchange_ids']))  # noqa: E501
        if 'include_exchange_logo' in params:
            query_params.append(('include_exchange_logo', params['include_exchange_logo']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/{id}/tickers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_list_get(self, **kwargs):  # noqa: E501
        """List all supported coins id, name and symbol (no pagination required)  # noqa: E501

        <li>All the coins that show up on this <strong>/coins/list</strong> endpoint are Active coins that listed by CoinGecko team on CoinGecko.com</li><li>If a coin is inactive or deactivated, it will be removed from <strong>/coins/list</strong></li>  Cache / Update Frequency: every 5 minutes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_platform: flag to include platform contract addresses (eg. 0x.... for Ethereum based tokens).   valid values: true, false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.coins_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def coins_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all supported coins id, name and symbol (no pagination required)  # noqa: E501

        <li>All the coins that show up on this <strong>/coins/list</strong> endpoint are Active coins that listed by CoinGecko team on CoinGecko.com</li><li>If a coin is inactive or deactivated, it will be removed from <strong>/coins/list</strong></li>  Cache / Update Frequency: every 5 minutes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_platform: flag to include platform contract addresses (eg. 0x.... for Ethereum based tokens).   valid values: true, false
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_platform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_platform' in params:
            query_params.append(('include_platform', params['include_platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coins_markets_get(self, vs_currency, **kwargs):  # noqa: E501
        """List all supported coins price, market cap, volume, and market related data  # noqa: E501

        Use this to obtain all the coins market data (price, market cap, volume), per page.<br>Note: when both 'category' and 'ids' parameters are supplied, the 'category' parameter takes precedence over the 'ids' parameter.  Cache / Update Frequency: every 45 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_markets_get(vs_currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str ids: The ids of the coin, comma separated crytocurrency symbols (base). refers to `/coins/list`.
        :param str category: filter by coin category. Refer to /coin/categories/list
        :param str order: valid values: <b>market_cap_asc, market_cap_desc, volume_asc, volume_desc, id_asc, id_desc</b> sort results by field.
        :param int per_page: valid values: 1..250  Total results per page
        :param int page: Page through results
        :param bool sparkline: Include sparkline 7 days data (eg. true, false)
        :param str price_change_percentage: Include price change percentage in <b>1h, 24h, 7d, 14d, 30d, 200d, 1y</b> (eg. '`1h,24h,7d`' comma-separated, invalid values will be discarded)
        :param str locale: valid values: <b>ar, bg, cs, da, de, el, en, es, fi, fr, he, hi, hr, hu, id, it, ja, ko, lt, nl, no, pl, pt, ro, ru, sk, sl, sv, th, tr, uk, vi, zh, zh-tw</b>
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coins_markets_get_with_http_info(vs_currency, **kwargs)  # noqa: E501
        else:
            (data) = self.coins_markets_get_with_http_info(vs_currency, **kwargs)  # noqa: E501
            return data

    def coins_markets_get_with_http_info(self, vs_currency, **kwargs):  # noqa: E501
        """List all supported coins price, market cap, volume, and market related data  # noqa: E501

        Use this to obtain all the coins market data (price, market cap, volume), per page.<br>Note: when both 'category' and 'ids' parameters are supplied, the 'category' parameter takes precedence over the 'ids' parameter.  Cache / Update Frequency: every 45 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coins_markets_get_with_http_info(vs_currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vs_currency: The target currency of market data (usd, eur, jpy, etc.) (required)
        :param str ids: The ids of the coin, comma separated crytocurrency symbols (base). refers to `/coins/list`.
        :param str category: filter by coin category. Refer to /coin/categories/list
        :param str order: valid values: <b>market_cap_asc, market_cap_desc, volume_asc, volume_desc, id_asc, id_desc</b> sort results by field.
        :param int per_page: valid values: 1..250  Total results per page
        :param int page: Page through results
        :param bool sparkline: Include sparkline 7 days data (eg. true, false)
        :param str price_change_percentage: Include price change percentage in <b>1h, 24h, 7d, 14d, 30d, 200d, 1y</b> (eg. '`1h,24h,7d`' comma-separated, invalid values will be discarded)
        :param str locale: valid values: <b>ar, bg, cs, da, de, el, en, es, fi, fr, he, hi, hr, hu, id, it, ja, ko, lt, nl, no, pl, pt, ro, ru, sk, sl, sv, th, tr, uk, vi, zh, zh-tw</b>
        :param str precision: <b>full</b> or any value between 0 - 18 to specify decimal place for currency price value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vs_currency', 'ids', 'category', 'order', 'per_page', 'page', 'sparkline', 'price_change_percentage', 'locale', 'precision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coins_markets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vs_currency' is set
        if self.api_client.client_side_validation and ('vs_currency' not in params or
                                                       params['vs_currency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vs_currency` when calling `coins_markets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vs_currency' in params:
            query_params.append(('vs_currency', params['vs_currency']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'sparkline' in params:
            query_params.append(('sparkline', params['sparkline']))  # noqa: E501
        if 'price_change_percentage' in params:
            query_params.append(('price_change_percentage', params['price_change_percentage']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'precision' in params:
            query_params.append(('precision', params['precision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/coins/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
