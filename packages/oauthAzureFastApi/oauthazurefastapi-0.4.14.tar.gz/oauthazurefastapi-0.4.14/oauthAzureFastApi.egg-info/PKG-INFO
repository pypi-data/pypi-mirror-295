Metadata-Version: 2.1
Name: oauthAzureFastApi
Version: 0.4.14
Summary: A FastAPI module for Azure OAuth integration
Home-page: https://github.com/saubhik1/oauthAzureFastApi
Author: Saubhik Bhadra,Kaushik Bhadra
Author-email: saubhik.bhadra@gmail.com,kaushik.bhadra24@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: fastapi
Requires-Dist: authlib
Requires-Dist: httpx
Requires-Dist: python-dotenv
Requires-Dist: python-jose
Requires-Dist: uvicorn
Requires-Dist: starlette
Requires-Dist: itsdangerous

## OAuthAzureFastApi

### Simple and Effective Azure OAuth2 Integration for FastAPI

OAuthAzureFastApi is a streamlined Python package that empowers you to seamlessly integrate Azure Active Directory (AAD) authentication into your FastAPI applications. It streamlines the OAuth2 flow, providing a straightforward approach to secure your API routes with Azure AD credentials.

### Requirements

- **ID Token Flow:** Ensure it's enabled under `Manage > Authentication` within your Azure App Registration.
- **User.Read Permission:** Grant this permission for Microsoft Graph access under `API Permissions`.

### Installation

Utilize pip to install the package:

```bash
pip install oauthAzureFastApi


Usage
Example FastAPI Application
This code snippet demonstrates how to establish your FastAPI application for leveraging OAuthAzureFastApi:


from fastapi import FastAPI, Depends, Request
from starlette.middleware.sessions import SessionMiddleware
from oauthAzureFastApi import OAuthApp

# Replace with your Azure AD credentials
client_id = "your-client-id"
client_secret = "your-client-secret"
tenant_id = "your-tenant-id"
redirect_uri = "http://localhost:8000/callback"  # Update with your redirect URL

# Create the OAuth app instance
oauth_app = OAuthApp(client_id, client_secret, tenant_id, redirect_uri)

app = FastAPI()
app.add_middleware(SessionMiddleware, secret_key="your-session-secret")

# Integrate the OAuth router
app.include_router(oauth_app.get_app(), prefix="")

# Secure API Endpoints using the get_current_user_from_app dependency
async def get_current_user_from_app(request: Request):
    return await oauth_app.get_current_user(request)

# Example of a secured endpoint
@app.get("/secure-data")
async def secure_data(user: dict = Depends(get_current_user_from_app)):
    """Endpoint for accessing secure data."""
    return {"message": "Secure data accessed", "user": user}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

```
### Example Login and Token Refresh
Once your application is running, you can effortlessly access these pre-built endpoints:

### Login URL:

Navigate to http://localhost:8000/login in your web browser to initiate login using Microsoft Single Sign-On (SSO). Upon successful login, this endpoint will provide you with access_token,refresh_token and userdetails.

### Token Refresh URL:

Employ the POST endpoint http://localhost:8000/refresh-id-token to refresh the ID token. Transmit the refresh_token as a query parameter.

Example:

POST http://localhost:8000/refresh-id-token?refresh_token=<your-refresh-token>


### Securing Endpoints
To safeguard your FastAPI endpoints, incorporate the get_current_user_from_app function as a dependency. This ensures user authentication before accessing the endpoint. You can also access all user realated detail from the user parameter.

```bash
@app.get("/secure-data")
async def secure_data(user: dict = Depends(get_current_user_from_app)):
    return {"message": "Secure data accessed", "user": user}
```

By including this dependency, only authorized users possessing a valid Azure AD token will be granted access to the endpoint.

### Conclusion
OAuthAzureFastApi simplifies the integration of Azure AD authentication within your FastAPI applications, offering a swift and efficient method to secure your routes. Follow the steps above to quickly implement authentication in your FastAPI application.
