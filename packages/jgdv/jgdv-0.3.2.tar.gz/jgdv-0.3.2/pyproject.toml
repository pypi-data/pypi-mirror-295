[project]
name            = "jgdv"
version         = "0.3.2"
description     = ""
readme          = "README.md"
requires-python = ">=3.10"
license         = {file = "LICENSE"}
keywords        = []
authors         = [
  {name  = "John Grey", email = "jgrey.n.plus.one+dejavu@gmail.com"},
]
classifiers     = [
  "Programming Language :: Python"
]

dependencies   = [
               "tomlguard",
               # "mastodon.py>=1.8",
               # "selenium",
               # "numpy",
               # "scrapy",
               "pyparsing",
               # "construct",
               "networkx",
               # "pygobject",
               "pydantic",
]

[project.optional-dependencies]
docs = [ "sphinx" ]
dev  = [ "doot", "pipreqs"]
test = [ "pytest >= 8.3.0" ]


##-- urls
[project.urls]
homepage      = "https://github.com/jgrey4296/jgdv"
documentation = "https://github.com/jgrey4296/jgdv/wiki"
repository    = "https://github.com/jgrey4296/jgdv"
changelog     = "https://github.com/jgrey4296/jgdv/blob/master/CHANGELOG.md"

##-- end urls

##-- scripts
[project.scripts]

[project.gui-scripts]
# spam-gui      = "spam:main_gui"

[project.entry-points."nothing"]
# tomatoes      = "spam:main_tomatoes"

##-- end scripts

##-- build-system
[build-system]
requires = [
         "setuptools >= 63.1.0",
         "wheel >= 0.37.1"
]

build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
namespaces = true
where      = ["."]
include    = ["jgdv*"]

[tool.setuptools.package-data]
"*" = ["*"]
"jgdv.__data"    = ["*.so"]

[tool.setuptools.exclude-package-data]

##-- end build-system

# Tools #######################################################################

##-- pyright
[tool.pyright]
# strict = jgdv.*
verboseOutput               = true
typeCheckingMode            = "strict"
pythonVersion               = "3.10"

reportUnusedImport          = false
reportAssertAlwaysTrue      = "information"
reportMissingParameterType  = "warning"
reportMissingTypeArgument   = "warning"
reportMissingTypeStubs      = "warning"
reportUnknownMemberType     = "warning"
reportUnknownParameterType  = "information"
reportUnknownVariableType   = "warning"
reportUnnecessaryCast       = "information"
reportUnnecessaryIsInstance = "warning"

##-- end pyright

##-- mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#config-file
[mypy]
python_version      = 3.10
warn_return_any     = true
warn_unused_configs = true

# Per-module options:
[mypy-pyparsing]
ignore_missing_imports = true

##-- end mypy

##-- pytest
[tool.pytest.ini_options]
log_cli       = false
log_level     = "DEBUG"
log_cli_level = "DEBUG"

##-- end pytest

##-- sphinx
[tool.sphinx]
author     = "John Grey"
copyright  = "2024-03-04"
extensions = ['sphinx.ext.doctest', 'sphinx.ext.autodoc', 'sphinx.ext.autosummary', 'sphinx.ext.napoleon']
templates  = ['_templates']
exclude    = ['**/flycheck_*.py']

[tool.sphinx.autosummary]
generate = true

[tool.sphinx.autodoc]
add_module_names   = false
inherit_docstrings = true

[tool.sphinx.autodoc.defaults]
members           = true
undoc-members     = true
private-members   = false
special-members   = false
inherited-members = true
show-inheritance  = true

[tool.sphinx.html]
theme       = 'alabaster'
static      = ['_static']

[tool.sphinx.html.options]

##-- end sphinx

##-- bumpver
[tool.bumpver]
current_version    = "0.3.2"
version_pattern    = "MAJOR.MINOR.PATCH"
commit_message     = "[bump]: version {old_version} -> {new_version}"
tag_message        = "{new_version}"
tag_scope          = "default"
commit             = true
tag                = false
# pre_commit_hook  = ""
# post_commit_hook = ""
# push             = true

[tool.bumpver.file_patterns]
"pyproject.toml"   = [
                   '^version\s+=\s+"{version}"',
                   '^current_version\s+=\s+"{version}"'
]
"jgdv/__init__.py" = ['^__version__\s+=\s+"{version}"']

##-- end bumpver

##-- isort
[tool.isort]
color_output           = false
py_version             = 310
profile                = "black"
comment_prefix         = "#"
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0

add_imports            = [
"from __future__ import annotations",
"import datetime",
"import enum",
"import functools as ftz",
"import itertools as itz",
"import logging as logmod",
"import pathlib as pl",
"from uuid import UUID, uuid1",
"from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic, Iterable, Iterator, Mapping, Match, MutableMapping, Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar, cast, final, overload, runtime_checkable, Generator)",
]

import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = ""
##-- end isort
