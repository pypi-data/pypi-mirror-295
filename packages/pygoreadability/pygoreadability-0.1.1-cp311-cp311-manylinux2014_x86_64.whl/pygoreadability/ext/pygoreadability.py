"""
pygoreadability.go

"""
# python wrapper for package github.com/rosinality/pygoreadability within overall package pygoreadability
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy gen --name pygoreadability --output /data/rosinality/github/pygoreadability/pygoreadability/ext --no-make --vm /root/mamba/envs/dev/bin/python github.com/rosinality/pygoreadability

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _pygoreadability
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from pygoreadability import pygoreadability
# and then refer to everything using pygoreadability. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []html.Attribute
class Slice_html_Attribute(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pygoreadability.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pygoreadability.IncRef(self.handle)
		else:
			self.handle = _pygoreadability.Slice_html_Attribute_CTor()
			_pygoreadability.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_html_Attribute.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_pygoreadability.DecRef(self.handle)
	def __str__(self):
		s = 'pygoreadability.Slice_html_Attribute len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'pygoreadability.Slice_html_Attribute([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _pygoreadability.Slice_html_Attribute_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _pygoreadability.Slice_html_Attribute_len(self.handle)
				return Slice_html_Attribute(handle=_pygoreadability.Slice_html_Attribute_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.html_Attribute(handle=_pygoreadability.Slice_html_Attribute_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_pygoreadability.Slice_html_Attribute_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_html_Attribute.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.html_Attribute(handle=_pygoreadability.Slice_html_Attribute_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_pygoreadability.Slice_html_Attribute_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def GetTitle(article):
	"""GetTitle(object article) str"""
	return _pygoreadability.pygoreadability_GetTitle(article.handle)
def Parse(input):
	"""Parse(str input) object, str"""
	return go.readability_Article(handle=_pygoreadability.pygoreadability_Parse(input))
def FromURL(pageURL, timeout):
	"""FromURL(str pageURL, long timeout) object, str"""
	return go.readability_Article(handle=_pygoreadability.pygoreadability_FromURL(pageURL, timeout))
def GetContent(article):
	"""GetContent(object article) str"""
	return _pygoreadability.pygoreadability_GetContent(article.handle)
def GetTextContent(article):
	"""GetTextContent(object article) str"""
	return _pygoreadability.pygoreadability_GetTextContent(article.handle)


