# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). 

    The version of the OpenAPI document: 1.5.0
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pds.api_client.models.pds_products import PdsProducts

class TestPdsProducts(unittest.TestCase):
    """PdsProducts unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PdsProducts:
        """Test PdsProducts
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PdsProducts`
        """
        model = PdsProducts()
        if include_optional:
            return PdsProducts(
                data = [
                    pds.api_client.models.pds_product.pdsProduct(
                        description = '', 
                        id = '', 
                        investigations = [
                            pds.api_client.models.reference.reference(
                                description = '', 
                                href = '', 
                                id = '', 
                                title = '', 
                                type = '', )
                            ], 
                        metadata = pds.api_client.models.metadata.metadata(
                            archive_status = '', 
                            creation_date_time = '', 
                            label_url = '', 
                            update_date_time = '', 
                            version = '', ), 
                        observing_system_components = [
                            pds.api_client.models.reference.reference(
                                description = '', 
                                href = '', 
                                id = '', 
                                title = '', 
                                type = '', )
                            ], 
                        properties = {
                            'key' : [
                                ''
                                ]
                            }, 
                        start_date_time = '', 
                        stop_date_time = '', 
                        targets = [
                            
                            ], 
                        title = '', 
                        type = '', )
                    ],
                summary = pds.api_client.models.summary.summary(
                    hits = 56, 
                    limit = 56, 
                    properties = [
                        ''
                        ], 
                    q = '', 
                    search_after = [
                        ''
                        ], 
                    sort = [
                        ''
                        ], 
                    took = 56, )
            )
        else:
            return PdsProducts(
                data = [
                    pds.api_client.models.pds_product.pdsProduct(
                        description = '', 
                        id = '', 
                        investigations = [
                            pds.api_client.models.reference.reference(
                                description = '', 
                                href = '', 
                                id = '', 
                                title = '', 
                                type = '', )
                            ], 
                        metadata = pds.api_client.models.metadata.metadata(
                            archive_status = '', 
                            creation_date_time = '', 
                            label_url = '', 
                            update_date_time = '', 
                            version = '', ), 
                        observing_system_components = [
                            pds.api_client.models.reference.reference(
                                description = '', 
                                href = '', 
                                id = '', 
                                title = '', 
                                type = '', )
                            ], 
                        properties = {
                            'key' : [
                                ''
                                ]
                            }, 
                        start_date_time = '', 
                        stop_date_time = '', 
                        targets = [
                            
                            ], 
                        title = '', 
                        type = '', )
                    ],
                summary = pds.api_client.models.summary.summary(
                    hits = 56, 
                    limit = 56, 
                    properties = [
                        ''
                        ], 
                    q = '', 
                    search_after = [
                        ''
                        ], 
                    sort = [
                        ''
                        ], 
                    took = 56, ),
        )
        """

    def testPdsProducts(self):
        """Test PdsProducts"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
