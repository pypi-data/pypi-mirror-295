# coding: utf-8

"""
    PDS Registry Search API

    Registry API enabling advanced search on PDS data and metadata. The API provides end-points to search for bundles, collections and any PDS products with advanced search queries. It also enables to browse the archive hierarchically downward (e.g. collection/s products) or upward (e.g. bundles containing a product). 

    The version of the OpenAPI document: 1.5.0
    Contact: pds-operator@jpl.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pds.api_client.models.pds4_products import Pds4Products

class TestPds4Products(unittest.TestCase):
    """Pds4Products unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Pds4Products:
        """Test Pds4Products
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Pds4Products`
        """
        model = Pds4Products()
        if include_optional:
            return Pds4Products(
                data = [
                    pds.api_client.models.pds4_product.pds4Product(
                        id = '', 
                        metadata = pds.api_client.models.pds4_metadata.pds4Metadata(
                            node_name = '', 
                            ops:data_files = [
                                pds.api_client.models.pds4_metadata_ops_data_file.pds4_metadata_ops_data_file(
                                    ops:creation_date = '', 
                                    ops:file_name = '', 
                                    ops:file_ref = '', 
                                    ops:file_size = '', 
                                    ops:md5_checksum = '', 
                                    ops:mime_type = '', )
                                ], 
                            ops:label_file_info = pds.api_client.models.pds4_metadata_ops_label_file_info.pds4Metadata_ops_Label_File_Info(
                                ops:creation_date = '', 
                                ops:file_name = '', 
                                ops:file_ref = '', 
                                ops:file_size = '', 
                                ops:md5_checksum = '', ), 
                            ops:tracking_meta = pds.api_client.models.pds4_metadata_ops_tracking_meta.pds4Metadata_ops_Tracking_Meta(
                                ops:archive_status = '', ), ), 
                        pds4 = pds.api_client.models.pds4.pds4(), )
                    ],
                summary = pds.api_client.models.summary.summary(
                    hits = 56, 
                    limit = 56, 
                    properties = [
                        ''
                        ], 
                    q = '', 
                    search_after = [
                        ''
                        ], 
                    sort = [
                        ''
                        ], 
                    took = 56, )
            )
        else:
            return Pds4Products(
                data = [
                    pds.api_client.models.pds4_product.pds4Product(
                        id = '', 
                        metadata = pds.api_client.models.pds4_metadata.pds4Metadata(
                            node_name = '', 
                            ops:data_files = [
                                pds.api_client.models.pds4_metadata_ops_data_file.pds4_metadata_ops_data_file(
                                    ops:creation_date = '', 
                                    ops:file_name = '', 
                                    ops:file_ref = '', 
                                    ops:file_size = '', 
                                    ops:md5_checksum = '', 
                                    ops:mime_type = '', )
                                ], 
                            ops:label_file_info = pds.api_client.models.pds4_metadata_ops_label_file_info.pds4Metadata_ops_Label_File_Info(
                                ops:creation_date = '', 
                                ops:file_name = '', 
                                ops:file_ref = '', 
                                ops:file_size = '', 
                                ops:md5_checksum = '', ), 
                            ops:tracking_meta = pds.api_client.models.pds4_metadata_ops_tracking_meta.pds4Metadata_ops_Tracking_Meta(
                                ops:archive_status = '', ), ), 
                        pds4 = pds.api_client.models.pds4.pds4(), )
                    ],
                summary = pds.api_client.models.summary.summary(
                    hits = 56, 
                    limit = 56, 
                    properties = [
                        ''
                        ], 
                    q = '', 
                    search_after = [
                        ''
                        ], 
                    sort = [
                        ''
                        ], 
                    took = 56, ),
        )
        """

    def testPds4Products(self):
        """Test Pds4Products"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
