# coding: utf-8

"""
    CCT Customer Service Requests

    API for interacting with City of Cape Town's eServices

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RequestAttributesSchema(BaseModel):
    """
    RequestAttributesSchema
    """ # noqa: E501
    type: Annotated[int, Field(le=9999, strict=True, ge=1000)] = Field(description="A 4-digit code identifying a specific grouping of services. See path /zsreq/config/types for acceptable values.")
    subtype: Annotated[int, Field(le=9999, strict=True, ge=1000)] = Field(description="A 4-digit code identifying an individual service. See path /zsreq/config/subtypes for acceptable values.")
    message: StrictStr = Field(description="The text describing the requested service as entered by the user.")
    address: Optional[StrictStr] = Field(default=None, description="The comma-delimited address of the location of the service request.")
    latitude: Union[Annotated[float, Field(le=-33.47, strict=True, ge=-34.35)], Annotated[int, Field(le=-34, strict=True, ge=-34)]] = Field(description="The latitude of the location of the issue (in decimal degrees)")
    longitude: Union[Annotated[float, Field(le=19, strict=True, ge=18.3)], Annotated[int, Field(le=19, strict=True, ge=19)]] = Field(description="The longitude of the location of the issue (in decimal degrees)")
    email: Optional[StrictStr] = Field(default=None, description="Valid email address (required if comm is “email”)")
    telephone: Annotated[str, Field(strict=True)] = Field(description="Valid local mobile telephone number")
    comm: StrictStr = Field(description="Communication preference. 'INT' is selects correspondence via email, 'SMS' is SMS text message via the telephone number.")
    suburb: StrictStr = Field(description="The suburb name component of the location of the service request.")
    street: StrictStr = Field(description="The street name component of the location of the service request.")
    street_number: StrictStr = Field(description="The street number component of the location of the service request.")
    first_name: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The first name of the contact person.", alias="firstName")
    last_name: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The last name of the contact person.", alias="lastName")
    __properties: ClassVar[List[str]] = ["type", "subtype", "message", "address", "latitude", "longitude", "email", "telephone", "comm", "suburb", "street", "street_number", "firstName", "lastName"]

    @field_validator('telephone')
    def telephone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\+27|0)\d{9}$", value):
            raise ValueError(r"must validate the regular expression /^(\+27|0)\d{9}$/")
        return value

    @field_validator('comm')
    def comm_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EMAIL', 'SMS', 'NONE']):
            raise ValueError("must be one of enum values ('EMAIL', 'SMS', 'NONE')")
        return value

    @field_validator('first_name')
    def first_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,40}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,40}$/")
        return value

    @field_validator('last_name')
    def last_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,40}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,40}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestAttributesSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestAttributesSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "subtype": obj.get("subtype"),
            "message": obj.get("message"),
            "address": obj.get("address"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "email": obj.get("email"),
            "telephone": obj.get("telephone"),
            "comm": obj.get("comm"),
            "suburb": obj.get("suburb"),
            "street": obj.get("street"),
            "street_number": obj.get("street_number"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName")
        })
        return _obj


