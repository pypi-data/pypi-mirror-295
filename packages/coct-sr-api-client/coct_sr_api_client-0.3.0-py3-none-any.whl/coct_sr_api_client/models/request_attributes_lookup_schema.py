# coding: utf-8

"""
    CCT Customer Service Requests

    API for interacting with City of Cape Town's eServices

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RequestAttributesLookupSchema(BaseModel):
    """
    RequestAttributesLookupSchema
    """ # noqa: E501
    reference_number: StrictStr
    type: Annotated[str, Field(strict=True)] = Field(description="The four-digit code of the service group containing the selected service. See path /zsreq/config/types for possible values.")
    subtype: Annotated[str, Field(strict=True)] = Field(description="The four-digit code of the specific service selected. See path /zsreq/config/subtypes for possible values.")
    description: StrictStr = Field(description="A text description including further details of the requested service and feedback")
    status: StrictStr = Field(description="Current state of work")
    message: StrictStr = Field(description="A text description including further details of the requested service and feedback")
    time_created: Annotated[str, Field(strict=True)] = Field(description="The ISO8601 compliant partial time (HH:MM:SS) at which the request was created. SAST timezone is implied.")
    date_created: Annotated[str, Field(strict=True)] = Field(description="The date (NB not ISO8601 compliant, DD.MM.YYYY) on which the request was created. SAST timezone is implied.")
    __properties: ClassVar[List[str]] = ["reference_number", "type", "subtype", "description", "status", "message", "time_created", "date_created"]

    @field_validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\d{4}|)$", value):
            raise ValueError(r"must validate the regular expression /^(\d{4}|)$/")
        return value

    @field_validator('subtype')
    def subtype_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\d{4}|)$", value):
            raise ValueError(r"must validate the regular expression /^(\d{4}|)$/")
        return value

    @field_validator('time_created')
    def time_created_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$", value):
            raise ValueError(r"must validate the regular expression /^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/")
        return value

    @field_validator('date_created')
    def date_created_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([0-2]\d|3[0-1])\.(0\d|1[0-2])\.\d{4}$", value):
            raise ValueError(r"must validate the regular expression /^([0-2]\d|3[0-1])\.(0\d|1[0-2])\.\d{4}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestAttributesLookupSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestAttributesLookupSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference_number": obj.get("reference_number"),
            "type": obj.get("type"),
            "subtype": obj.get("subtype"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "time_created": obj.get("time_created"),
            "date_created": obj.get("date_created")
        })
        return _obj


