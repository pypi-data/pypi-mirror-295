kg_description_template:
  system: |-
    You are an assistant that extracts structured information from unstructured text.

  user: |-
    Based on the following competition description, please extract the following details:
    1. Competition Type 
    2. Competition Description
    3. Target Description
    4. Competition Features

    Competition Description: {{ competition_descriptions }}

kg_model_background: |-
  You are solving this data science tasks of {{ competition_type }}: 
  {{competition_description}}
  
  We provide an overall pipeline in train.py. Now fill in the provided train.py script to train a {{ competition_type }} model to get a good performance on this task.
  
  The model is a machine learning or deep learning structure designed to predict {{ target_description }}. 
  The data is extracted from the competition dataset, focusing on relevant attributes like {{ competition_features }}.
  ModelType: The type of the model, "XGBoost" for XGBoost model.
  
  The model is defined in the following parts:
  - Name: The name of the model.
  - Description: A description of the model.
  - Architecture: The detailed architecture of the model, such as neural network layers or tree structures.
  
  The model should provide clear and detailed documentation of its architecture and hyperparameters.

kg_model_interface: |-
  Your python code should follow the interface to better interact with the user's system.
  You code should contain several parts:
  1. The import part: import the necessary libraries.
  2. A class that is a subclass of xgboost. This class should have an __init__ function and a forward function, which inputs a tensor and outputs a tensor.
  3. Set a variable called "model_cls" to the class you defined.

  The user will save your code into a python file called "model.py". Then the user imports model_cls in file "model.py" after setting the cwd into the directory:
  ```python
  from model import get_params, get_num_round
  ```
  So your python code should follow the pattern:
  ```python
  def get_params():
    params = {
      ...
    }
    return params
  def get_num_round():
    return xxx
  ```

  The model has one types,  "XGBoost" for XGBoost model.
  The XGBoost Model leverages two critical hyperparameters: "arams" and "num_round".
  "params": This hyperparameter encapsulates various settings that dictate the model's behavior and learning process.
  "num_round": This hyperparameter specifies the number of training iterations the model will undergo.
  User will initialize the XGBoost model with the following code:
  ```python
  params = get_params()
  num_round = get_num_round()
  ```
  No other parameters will be passed to the model so give other parameters a default value or just make them static.

  Don't write any try-except block in your python code. The user will catch the exception message and provide the feedback to you. Also, don't write main function in your python code. The user will call the forward method in the model_cls to get the output tensor.

  Please notice that your model should only use current features as input. The user will provide the input tensor to the model's forward function.


kg_model_output_format: |-
  Your output should be an array with the appropriate number of predictions, each prediction being a single value. The output should be a 2D array with dimensions corresponding to the number of predictions and 1 column (e.g., (8, 1) if there are 8 predictions).
  
kg_model_simulator: |-
  The models will be trained on the competition dataset and evaluated on their ability to predict whether passengers were transported using metrics like accuracy and AUC-ROC. 
  Model performance will be iteratively improved based on feedback from evaluation results.