# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpandedContact(BaseModel):
    """
    ExpandedContact
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    county: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    fax: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    home_phone: Optional[StrictStr] = Field(default=None, alias="homePhone")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    mobile_phone: Optional[StrictStr] = Field(default=None, alias="mobilePhone")
    nick_name: Optional[StrictStr] = Field(default=None, alias="nickName")
    other_phone: Optional[StrictStr] = Field(default=None, alias="otherPhone")
    other_phone_type: Optional[StrictStr] = Field(default=None, alias="otherPhoneType")
    personal_email: Optional[StrictStr] = Field(default=None, alias="personalEmail")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    state: Optional[StrictStr] = None
    tax_region: Optional[StrictStr] = Field(default=None, alias="taxRegion")
    work_email: Optional[StrictStr] = Field(default=None, alias="workEmail")
    work_phone: Optional[StrictStr] = Field(default=None, alias="workPhone")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "createdById", "createdDate", "updatedById", "updatedDate", "accountId", "address1", "address2", "city", "country", "county", "description", "fax", "firstName", "homePhone", "lastName", "mobilePhone", "nickName", "otherPhone", "otherPhoneType", "personalEmail", "postalCode", "state", "taxRegion", "workEmail", "workPhone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "accountId": obj.get("accountId"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "description": obj.get("description"),
            "fax": obj.get("fax"),
            "firstName": obj.get("firstName"),
            "homePhone": obj.get("homePhone"),
            "lastName": obj.get("lastName"),
            "mobilePhone": obj.get("mobilePhone"),
            "nickName": obj.get("nickName"),
            "otherPhone": obj.get("otherPhone"),
            "otherPhoneType": obj.get("otherPhoneType"),
            "personalEmail": obj.get("personalEmail"),
            "postalCode": obj.get("postalCode"),
            "state": obj.get("state"),
            "taxRegion": obj.get("taxRegion"),
            "workEmail": obj.get("workEmail"),
            "workPhone": obj.get("workPhone")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


