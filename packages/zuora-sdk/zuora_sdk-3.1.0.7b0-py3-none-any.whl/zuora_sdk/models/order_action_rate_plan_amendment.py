# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderActionRatePlanAmendment(BaseModel):
    """
    The amendment that is related to the subscription rate plan. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    code: Optional[StrictStr] = Field(default=None, description="The amendment code. ")
    contract_effective_date: Optional[date] = Field(default=None, description="The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`. ", alias="contractEffectiveDate")
    created_by: Optional[StrictStr] = Field(default=None, description="The ID of the user who created this amendment. ", alias="createdBy")
    created_date: Optional[StrictStr] = Field(default=None, description="The time that the amendment gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.", alias="createdDate")
    customer_acceptance_date: Optional[date] = Field(default=None, description="The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`. ", alias="customerAcceptanceDate")
    description: Optional[StrictStr] = Field(default=None, description="Description of the amendment. ")
    effective_date: Optional[date] = Field(default=None, description="The date when the amendment changes take effective.  ", alias="effectiveDate")
    id: Optional[StrictStr] = Field(default=None, description="The amendment ID. ")
    name: Optional[StrictStr] = Field(default=None, description="The name of the amendment. ")
    service_activation_date: Optional[date] = Field(default=None, description="The date when service is activated, as `yyyy-mm-dd`. ", alias="serviceActivationDate")
    type: Optional[StrictStr] = Field(default=None, description="Type of the amendment. Possible values are:   - NewProduct - RemoveProduct - UpdateProduct ")
    updated_by: Optional[StrictStr] = Field(default=None, description="The ID of the user who updated this amendment.", alias="updatedBy")
    updated_date: Optional[StrictStr] = Field(default=None, description="The time that the amendment gets updated in the system, in the `YYYY-MM-DD HH:MM:SS` format.", alias="updatedDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["code", "contractEffectiveDate", "createdBy", "createdDate", "customerAcceptanceDate", "description", "effectiveDate", "id", "name", "serviceActivationDate", "type", "updatedBy", "updatedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanAmendment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanAmendment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "contractEffectiveDate": obj.get("contractEffectiveDate"),
            "createdBy": obj.get("createdBy"),
            "createdDate": obj.get("createdDate"),
            "customerAcceptanceDate": obj.get("customerAcceptanceDate"),
            "description": obj.get("description"),
            "effectiveDate": obj.get("effectiveDate"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "serviceActivationDate": obj.get("serviceActivationDate"),
            "type": obj.get("type"),
            "updatedBy": obj.get("updatedBy"),
            "updatedDate": obj.get("updatedDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


