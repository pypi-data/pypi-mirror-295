# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.configuration_template_content import ConfigurationTemplateContent
from zuora_sdk.models.setting_source_component_response import SettingSourceComponentResponse
from typing import Optional, Set
from typing_extensions import Self

class CreateTemplateRequestContent(BaseModel):
    """
    CreateTemplateRequestContent object contains information for creating template. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    content: Optional[SettingSourceComponentResponse] = None
    custom_fields: Optional[StrictBool] = Field(default=None, description="Selected custom fields component or not.", alias="customFields")
    custom_objects: Optional[StrictBool] = Field(default=None, description="Selected custom objects component or not.", alias="customObjects")
    description: StrictStr = Field(description="Creates template description.")
    name: StrictStr = Field(description="Name of the Template.")
    notifications: Optional[StrictBool] = Field(default=None, description="Selected Notification component or not.")
    selected_components: Optional[List[ConfigurationTemplateContent]] = Field(default=None, description="ConfigurationTemplateContent object contains the selected meta data information.", alias="selectedComponents")
    settings: Optional[StrictBool] = Field(default=None, description="Selected Settings component or not.")
    template_tenant: StrictStr = Field(description="ID of the template tenant.", alias="templateTenant")
    workflows: Optional[StrictBool] = Field(default=None, description="Selected Workflow component or not.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["content", "customFields", "customObjects", "description", "name", "notifications", "selectedComponents", "settings", "templateTenant", "workflows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTemplateRequestContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in selected_components (list)
        _items = []
        if self.selected_components:
            for _item_selected_components in self.selected_components:
                if _item_selected_components:
                    _items.append(_item_selected_components.to_dict())
            _dict['selectedComponents'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTemplateRequestContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": SettingSourceComponentResponse.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "customFields": obj.get("customFields"),
            "customObjects": obj.get("customObjects"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "notifications": obj.get("notifications"),
            "selectedComponents": [ConfigurationTemplateContent.from_dict(_item) for _item in obj["selectedComponents"]] if obj.get("selectedComponents") is not None else None,
            "settings": obj.get("settings"),
            "templateTenant": obj.get("templateTenant"),
            "workflows": obj.get("workflows")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


