# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.get_payment_run_data_transaction_element_response import GetPaymentRunDataTransactionElementResponse
from typing import Optional, Set
from typing_extensions import Self

class GetPaymentRunDataElementResponse(BaseModel):
    """
    GetPaymentRunDataElementResponse
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The customer account ID specified in the `data` field when creating the payment run. ", alias="accountId")
    account_number: Optional[StrictStr] = Field(default=None, description="The customer account number specified in the `data` field when creating the payment run. ", alias="accountNumber")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ")
    amount_collected: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount that is collected. ", alias="amountCollected")
    amount_to_collect: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount to be collected. ", alias="amountToCollect")
    comment: Optional[StrictStr] = Field(default=None, description="The comment specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ")
    currency: Optional[StrictStr] = Field(default=None, description="This field is only available if support for standalone payments is enabled.  The currency of the standalone payment. The currency of the standalone payment can be different from the payment currency defined in the customer account settings. ")
    document_id: Optional[StrictStr] = Field(default=None, description="The billing document ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ", alias="documentId")
    document_number: Optional[StrictStr] = Field(default=None, description="The billing document number specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ", alias="documentNumber")
    document_type: Optional[StrictStr] = Field(default=None, description="The billing document type specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ", alias="documentType")
    error_code: Optional[StrictStr] = Field(default=None, description="The error code of the response. ", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="The detailed information of the error response. ", alias="errorMessage")
    payment_gateway_id: Optional[StrictStr] = Field(default=None, description="The payment gateway ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ", alias="paymentGatewayId")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="The payment method ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified. ", alias="paymentMethodId")
    result: Optional[StrictStr] = Field(default=None, description="Indicates whether the data is processed successfully or not. ")
    standalone: Optional[StrictBool] = Field(default=None, description="This field is only available if the support for standalone payment is enabled.  The value `true` indicates this is a standalone payment that is created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. No settlement data will be created. The standalone payment cannot be applied, unapplied, or transferred. ")
    transactions: Optional[List[GetPaymentRunDataTransactionElementResponse]] = Field(default=None, description="Container for transactions that apply to the current request. Each element contains an array of the settlement/payment applied to the record. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "accountNumber", "amount", "amountCollected", "amountToCollect", "comment", "currency", "documentId", "documentNumber", "documentType", "errorCode", "errorMessage", "paymentGatewayId", "paymentMethodId", "result", "standalone", "transactions"]

    @field_validator('document_type')
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invoice', 'DebitMemo']):
            raise ValueError("must be one of enum values ('Invoice', 'DebitMemo')")
        return value

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Processed', 'Error']):
            raise ValueError("must be one of enum values ('Processed', 'Error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPaymentRunDataElementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPaymentRunDataElementResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountNumber": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "amountCollected": obj.get("amountCollected"),
            "amountToCollect": obj.get("amountToCollect"),
            "comment": obj.get("comment"),
            "currency": obj.get("currency"),
            "documentId": obj.get("documentId"),
            "documentNumber": obj.get("documentNumber"),
            "documentType": obj.get("documentType"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "paymentGatewayId": obj.get("paymentGatewayId"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "result": obj.get("result"),
            "standalone": obj.get("standalone"),
            "transactions": [GetPaymentRunDataTransactionElementResponse.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


