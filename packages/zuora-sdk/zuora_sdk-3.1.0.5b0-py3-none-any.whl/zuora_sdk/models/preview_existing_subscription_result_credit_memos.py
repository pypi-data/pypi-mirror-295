# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.preview_existing_subscription_credit_memo_item_result import PreviewExistingSubscriptionCreditMemoItemResult
from typing import Optional, Set
from typing_extensions import Self

class PreviewExistingSubscriptionResultCreditMemos(BaseModel):
    """
    PreviewExistingSubscriptionResultCreditMemos
    """ # noqa: E501
    credit_memo_number: Optional[StrictStr] = Field(default=None, description="The credit memo number.", alias="creditMemoNumber")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Credit memo amount.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Credit memo amount minus tax.", alias="amountWithoutTax")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax amount of the credit memo.", alias="taxAmount")
    target_date: Optional[date] = Field(default=None, description="Date through which to calculate charges if a credit memo is generated, as yyyy-mm-dd.", alias="targetDate")
    credit_memo_items: Optional[List[PreviewExistingSubscriptionCreditMemoItemResult]] = Field(default=None, description="Container for credit memo items.", alias="creditMemoItems")
    status: Optional[StrictStr] = Field(default=None, description="The status of the credit memo.")
    is_from_existing_credit_memo: Optional[StrictBool] = Field(default=None, description="Indicates whether the credit memo information is from an existing credit memo.", alias="isFromExistingCreditMemo")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["creditMemoNumber", "amount", "amountWithoutTax", "taxAmount", "targetDate", "creditMemoItems", "status", "isFromExistingCreditMemo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreviewExistingSubscriptionResultCreditMemos from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credit_memo_items (list)
        _items = []
        if self.credit_memo_items:
            for _item_credit_memo_items in self.credit_memo_items:
                if _item_credit_memo_items:
                    _items.append(_item_credit_memo_items.to_dict())
            _dict['creditMemoItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreviewExistingSubscriptionResultCreditMemos from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creditMemoNumber": obj.get("creditMemoNumber"),
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "taxAmount": obj.get("taxAmount"),
            "targetDate": obj.get("targetDate"),
            "creditMemoItems": [PreviewExistingSubscriptionCreditMemoItemResult.from_dict(_item) for _item in obj["creditMemoItems"]] if obj.get("creditMemoItems") is not None else None,
            "status": obj.get("status"),
            "isFromExistingCreditMemo": obj.get("isFromExistingCreditMemo")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


