# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.setting_item_http_operation import SettingItemHttpOperation
from typing import Optional, Set
from typing_extensions import Self

class SettingItemWithOperationsInformation(BaseModel):
    """
    SettingItemWithOperationsInformation
    """ # noqa: E501
    context: Optional[StrictStr] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the setting item as you see from Zuora UI.")
    http_operations: Optional[List[SettingItemHttpOperation]] = Field(default=None, description="An array of HTTP operation methods that are supported on this setting endpoint.", alias="httpOperations")
    key: Optional[StrictStr] = Field(default=None, description="The unique key to distinguish the setting item.")
    path_pattern: Optional[StrictStr] = Field(default=None, description="The path pattern of the setting endpoint, relative to `/settings`. For example, `/billing-rules`.", alias="pathPattern")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["context", "description", "httpOperations", "key", "pathPattern"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SettingItemWithOperationsInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in http_operations (list)
        _items = []
        if self.http_operations:
            for _item_http_operations in self.http_operations:
                if _item_http_operations:
                    _items.append(_item_http_operations.to_dict())
            _dict['httpOperations'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SettingItemWithOperationsInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context"),
            "description": obj.get("description"),
            "httpOperations": [SettingItemHttpOperation.from_dict(_item) for _item in obj["httpOperations"]] if obj.get("httpOperations") is not None else None,
            "key": obj.get("key"),
            "pathPattern": obj.get("pathPattern")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


