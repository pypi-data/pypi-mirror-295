# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionObjectQTFields(BaseModel):
    """
    Container for Subscription fields provided by Zuora Quotes. 
    """ # noqa: E501
    cpq_bundle_json_id__qt: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field. ", alias="CpqBundleJsonId__QT")
    opportunity_close_date__qt: Optional[date] = Field(default=None, description="The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes. ", alias="OpportunityCloseDate__QT")
    opportunity_name__qt: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes. ", alias="OpportunityName__QT")
    quote_business_type__qt: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes. ", alias="QuoteBusinessType__QT")
    quote_number__qt: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes. ", alias="QuoteNumber__QT")
    quote_type__qt: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes. ", alias="QuoteType__QT")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["CpqBundleJsonId__QT", "OpportunityCloseDate__QT", "OpportunityName__QT", "QuoteBusinessType__QT", "QuoteNumber__QT", "QuoteType__QT"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionObjectQTFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionObjectQTFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CpqBundleJsonId__QT": obj.get("CpqBundleJsonId__QT"),
            "OpportunityCloseDate__QT": obj.get("OpportunityCloseDate__QT"),
            "OpportunityName__QT": obj.get("OpportunityName__QT"),
            "QuoteBusinessType__QT": obj.get("QuoteBusinessType__QT"),
            "QuoteNumber__QT": obj.get("QuoteNumber__QT"),
            "QuoteType__QT": obj.get("QuoteType__QT")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


