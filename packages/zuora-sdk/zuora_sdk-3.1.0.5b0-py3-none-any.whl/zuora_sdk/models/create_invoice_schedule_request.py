# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_invoice_schedule_item import CreateInvoiceScheduleItem
from zuora_sdk.models.invoice_schedule_subscription import InvoiceScheduleSubscription
from typing import Optional, Set
from typing_extensions import Self

class CreateInvoiceScheduleRequest(BaseModel):
    """
    CreateInvoiceScheduleRequest
    """ # noqa: E501
    account_key: Optional[StrictStr] = Field(default=None, description="The ID or number of the account associated with the invoice schedule. ", alias="accountKey")
    additional_subscriptions_to_bill: Optional[List[StrictStr]] = Field(default=None, description="A list of the numbers of the subscriptions that need to be billed together with the invoice schedule.   One invoice schedule can have at most 600 additional subscriptions. ", alias="additionalSubscriptionsToBill")
    invoice_separately: Optional[StrictBool] = Field(default=None, description="Whether the invoice items created from the invoice schedule appears on a separate invoice when Zuora generates invoices. ", alias="invoiceSeparately")
    notes: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Comments on the invoice schedule. ")
    orders: Optional[List[StrictStr]] = Field(default=None, description="A list of the IDs or numbers of the orders associated with the invoice schedule. One invoice schedule can be associated with at most 10 orders. ")
    schedule_items: Optional[List[CreateInvoiceScheduleItem]] = Field(default=None, description="Container for invoice schedule items. One invoice schedule can have at most 50 invoice schedule items. ", alias="scheduleItems")
    specific_subscriptions: Optional[List[InvoiceScheduleSubscription]] = Field(default=None, description="A list of the numbers of specific subscriptions associated with the invoice schedule.  - If the subscriptions specified in this field belong to the orders specified in the `orders` field, only the specific subscriptions instead of the orders are associated with the invoice schedule.  - If only the `orders` field is specified, all the subscriptions from the order are associated with the invoice schedule.  Example: ``` {   \"orders\": [     \"O-00000001\", \"O-00000002\"   ],   \"specificSubscriptions\": [     {       \"orderKey\": \"O-00000001\",       \"subscriptionKey\": \"S-00000001\"     }   ] } ``` - For the order with number O-00000001, only subscription S-00000001 contained in the order is associated with the invoice schedule. - For the order with number O-00000002, all subscriptions contained in the order are associated with the invoice schedule. ", alias="specificSubscriptions")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountKey", "additionalSubscriptionsToBill", "invoiceSeparately", "notes", "orders", "scheduleItems", "specificSubscriptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInvoiceScheduleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_items (list)
        _items = []
        if self.schedule_items:
            for _item_schedule_items in self.schedule_items:
                if _item_schedule_items:
                    _items.append(_item_schedule_items.to_dict())
            _dict['scheduleItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in specific_subscriptions (list)
        _items = []
        if self.specific_subscriptions:
            for _item_specific_subscriptions in self.specific_subscriptions:
                if _item_specific_subscriptions:
                    _items.append(_item_specific_subscriptions.to_dict())
            _dict['specificSubscriptions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInvoiceScheduleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountKey": obj.get("accountKey"),
            "additionalSubscriptionsToBill": obj.get("additionalSubscriptionsToBill"),
            "invoiceSeparately": obj.get("invoiceSeparately"),
            "notes": obj.get("notes"),
            "orders": obj.get("orders"),
            "scheduleItems": [CreateInvoiceScheduleItem.from_dict(_item) for _item in obj["scheduleItems"]] if obj.get("scheduleItems") is not None else None,
            "specificSubscriptions": [InvoiceScheduleSubscription.from_dict(_item) for _item in obj["specificSubscriptions"]] if obj.get("specificSubscriptions") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


