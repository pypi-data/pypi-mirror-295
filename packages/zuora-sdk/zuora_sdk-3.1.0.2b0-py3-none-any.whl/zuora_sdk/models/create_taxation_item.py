# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from decimal import Decimal
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateTaxationItem(BaseModel):
    """
    CreateTaxationItem
    """ # noqa: E501
    exempt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The calculated tax amount excluded due to the exemption.", alias="exemptAmount")
    jurisdiction: Optional[StrictStr] = Field(default=None, description="The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.")
    location_code: Optional[StrictStr] = Field(default=None, description="The identifier for the location based on the value of the `taxCode` field.", alias="locationCode")
    name: StrictStr = Field(description="The name of taxation.")
    tax_amount: Union[StrictFloat, StrictInt] = Field(description="The amount of the taxation item in the invoice item.", alias="taxAmount")
    tax_code: StrictStr = Field(description="The tax code identifies which tax rules and tax rates to apply to a specific invoice item.", alias="taxCode")
    tax_code_description: Optional[StrictStr] = Field(default=None, description="The description of the tax code.", alias="taxCodeDescription")
    tax_date: date = Field(description="The date that the tax is applied to the invoice item, in `yyyy-mm-dd` format.", alias="taxDate")
    tax_mode: StrictStr = Field(alias="taxMode")
    tax_rate: Decimal = Field(description="The tax rate applied to the invoice item.", alias="taxRate")
    tax_rate_description: Optional[StrictStr] = Field(default=None, description="The description of the tax rate.", alias="taxRateDescription")
    tax_rate_type: StrictStr = Field(alias="taxRateType")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["exemptAmount", "jurisdiction", "locationCode", "name", "taxAmount", "taxCode", "taxCodeDescription", "taxDate", "taxMode", "taxRate", "taxRateDescription", "taxRateType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTaxationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTaxationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exemptAmount": obj.get("exemptAmount"),
            "jurisdiction": obj.get("jurisdiction"),
            "locationCode": obj.get("locationCode"),
            "name": obj.get("name"),
            "taxAmount": obj.get("taxAmount"),
            "taxCode": obj.get("taxCode"),
            "taxCodeDescription": obj.get("taxCodeDescription"),
            "taxDate": obj.get("taxDate"),
            "taxMode": obj.get("taxMode"),
            "taxRate": obj.get("taxRate"),
            "taxRateDescription": obj.get("taxRateDescription"),
            "taxRateType": obj.get("taxRateType")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


