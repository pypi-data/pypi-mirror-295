# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.gateway_options import GatewayOptions
from typing import Optional, Set
from typing_extensions import Self

class VerifyPaymentMethodRequest(BaseModel):
    """
    VerifyPaymentMethodRequest
    """ # noqa: E501
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency used for payment method authorization.  ", alias="currencyCode")
    gateway_options: Optional[GatewayOptions] = Field(default=None, alias="gatewayOptions")
    payment_gateway_name: Optional[StrictStr] = Field(default=None, description="The name of the payment gateway instance. If no value is specified for this field, the default payment gateway of the customer account will be used. ", alias="paymentGatewayName")
    security_code: Optional[StrictStr] = Field(default=None, description="The CVV or CVV2 security code for the credit card or debit card. To ensure PCI compliance, the value of this field is not stored and cannot be queried. ", alias="securityCode")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["currencyCode", "gatewayOptions", "paymentGatewayName", "securityCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyPaymentMethodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyPaymentMethodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currencyCode": obj.get("currencyCode"),
            "gatewayOptions": GatewayOptions.from_dict(obj["gatewayOptions"]) if obj.get("gatewayOptions") is not None else None,
            "paymentGatewayName": obj.get("paymentGatewayName"),
            "securityCode": obj.get("securityCode")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


