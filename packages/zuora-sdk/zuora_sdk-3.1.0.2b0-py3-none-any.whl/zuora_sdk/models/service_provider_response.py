# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.failed_reason import FailedReason
from typing import Optional, Set
from typing_extensions import Self

class ServiceProviderResponse(BaseModel):
    """
    ServiceProviderResponse
    """ # noqa: E501
    process_id: Optional[StrictStr] = Field(default=None, description="The Id of the process that handle the operation. ", alias="processId")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ", alias="requestId")
    reasons: Optional[List[FailedReason]] = None
    success: Optional[StrictBool] = Field(default=None, description="Indicates whether the call succeeded. ")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the e-invoicing service provider. ")
    name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The name of the e-invoicing service provider. ")
    test: Optional[StrictBool] = Field(default=None, description="Whether the e-invoicing service provider's configuration is intended for testing.   - If you set this field to `true`, requests are directed to the testing integration endpoints. If you set this field to `false`, requests are directed to the production integration endpoints. ")
    provider: Optional[StrictStr] = Field(default=None, description="The name of the e-invoicing service provider that can help you generate e-invoice files for billing documents. ")
    service_provider_number: Optional[StrictStr] = Field(default=None, description="The unique number of the e-invoicing service provider. ", alias="serviceProviderNumber")
    company_identifier: Optional[StrictStr] = Field(default=None, description="The Company Identifier is used to create a SenderSystemId, which serves to identify the system from which the transactions are sent. ", alias="companyIdentifier")
    api_key: Optional[StrictStr] = Field(default=None, description="The API key is used to authenticate the e-invoicing service provider's requests. ", alias="apiKey")
    client_certificate: Optional[StrictStr] = Field(default=None, description="The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format. ", alias="clientCertificate")
    client_certificate_type: Optional[StrictStr] = Field(default=None, description="The client certificate type is used to authenticate the e-invoicing service provider's requests. The default value is `PKCS12`. ", alias="clientCertificateType")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["processId", "requestId", "reasons", "success", "id", "name", "test", "provider", "serviceProviderNumber", "companyIdentifier", "apiKey", "clientCertificate", "clientCertificateType"]

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Sovos']):
            raise ValueError("must be one of enum values ('Sovos')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceProviderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceProviderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "processId": obj.get("processId"),
            "requestId": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "test": obj.get("test"),
            "provider": obj.get("provider"),
            "serviceProviderNumber": obj.get("serviceProviderNumber"),
            "companyIdentifier": obj.get("companyIdentifier"),
            "apiKey": obj.get("apiKey"),
            "clientCertificate": obj.get("clientCertificate"),
            "clientCertificateType": obj.get("clientCertificateType")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


