# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.billing_update import BillingUpdate
from zuora_sdk.models.preview_order_pricing_update import PreviewOrderPricingUpdate
from zuora_sdk.models.trigger_params import TriggerParams
from typing import Optional, Set
from typing_extensions import Self

class PreviewOrderChargeUpdate(BaseModel):
    """
    PreviewOrderChargeUpdate
    """ # noqa: E501
    billing: Optional[BillingUpdate] = None
    charge_number: Optional[StrictStr] = Field(default=None, description="The number of the charge to be updated. The value of this field is inherited from the `subscriptions` > `orderActions` > `addProduct` > `chargeOverrides` > `chargeNumber` field. ", alias="chargeNumber")
    product_rate_plan_charge_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate-plan charge for this subscription.", alias="productRatePlanChargeNumber")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(default=None, description="ID of a product rate-plan charge for this subscription. ", alias="productRatePlanChargeId")
    custom_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Container for custom fields of a Rate Plan Charge object. ", alias="customFields")
    description: Optional[StrictStr] = None
    effective_date: Optional[TriggerParams] = Field(default=None, alias="effectiveDate")
    prepaid_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).       ", alias="prepaidQuantity")
    pricing: Optional[PreviewOrderPricingUpdate] = Field(default=None, description="Pricing information about the charge. ")
    unique_token: Optional[StrictStr] = Field(default=None, description="A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan charge. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan charge and use that token in future order actions. ", alias="uniqueToken")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["billing", "chargeNumber", "productRatePlanChargeNumber", "productRatePlanChargeId", "customFields", "description", "effectiveDate", "prepaidQuantity", "pricing", "uniqueToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreviewOrderChargeUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of effective_date
        if self.effective_date:
            _dict['effectiveDate'] = self.effective_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreviewOrderChargeUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing": BillingUpdate.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "chargeNumber": obj.get("chargeNumber"),
            "productRatePlanChargeNumber": obj.get("productRatePlanChargeNumber"),
            "productRatePlanChargeId": obj.get("productRatePlanChargeId"),
            "customFields": obj.get("customFields"),
            "description": obj.get("description"),
            "effectiveDate": TriggerParams.from_dict(obj["effectiveDate"]) if obj.get("effectiveDate") is not None else None,
            "prepaidQuantity": obj.get("prepaidQuantity"),
            "pricing": PreviewOrderPricingUpdate.from_dict(obj["pricing"]) if obj.get("pricing") is not None else None,
            "uniqueToken": obj.get("uniqueToken")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


