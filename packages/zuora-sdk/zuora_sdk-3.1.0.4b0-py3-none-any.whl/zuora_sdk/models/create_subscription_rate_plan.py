# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.create_subscription_component import CreateSubscriptionComponent
from typing import Optional, Set
from typing_extensions import Self

class CreateSubscriptionRatePlan(BaseModel):
    """
    CreateSubscriptionRatePlan
    """ # noqa: E501
    charge_overrides: Optional[List[CreateSubscriptionComponent]] = Field(default=None, description="This optional container is used to override the quantity of one or more product rate plan charges for this subscription. ", alias="chargeOverrides")
    external_catalog_plan_id: Optional[StrictStr] = Field(default=None, description="An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.  **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ", alias="externalCatalogPlanId")
    external_id_source_system: Optional[StrictStr] = Field(default=None, description="The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ", alias="externalIdSourceSystem")
    externally_managed_plan_id: Optional[StrictStr] = Field(default=None, description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores. ", alias="externallyManagedPlanId")
    product_rate_plan_id: Optional[StrictStr] = Field(default=None, description="ID of a product rate plan for this subscription. ", alias="productRatePlanId")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate plan for this subscription. ", alias="productRatePlanNumber")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["chargeOverrides", "externalCatalogPlanId", "externalIdSourceSystem", "externallyManagedPlanId", "productRatePlanId", "productRatePlanNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSubscriptionRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charge_overrides (list)
        _items = []
        if self.charge_overrides:
            for _item_charge_overrides in self.charge_overrides:
                if _item_charge_overrides:
                    _items.append(_item_charge_overrides.to_dict())
            _dict['chargeOverrides'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSubscriptionRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeOverrides": [CreateSubscriptionComponent.from_dict(_item) for _item in obj["chargeOverrides"]] if obj.get("chargeOverrides") is not None else None,
            "externalCatalogPlanId": obj.get("externalCatalogPlanId"),
            "externalIdSourceSystem": obj.get("externalIdSourceSystem"),
            "externallyManagedPlanId": obj.get("externallyManagedPlanId"),
            "productRatePlanId": obj.get("productRatePlanId"),
            "productRatePlanNumber": obj.get("productRatePlanNumber")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


