# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Workflow(BaseModel):
    """
    A workflow. 
    """ # noqa: E501
    callout_trigger: Optional[StrictBool] = Field(default=None, description="Indicates whether the callout trigger is enabled for the retrieved workflow. ", alias="calloutTrigger")
    created_at: Optional[StrictStr] = Field(default=None, description="The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format. ", alias="createdAt")
    description: Optional[StrictStr] = Field(default=None, description="The description of the workflow. ")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID of the workflow. ")
    interval: Optional[StrictStr] = Field(default=None, description="The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled. ")
    name: Optional[StrictStr] = Field(default=None, description="The name of the workflow. ")
    ondemand_trigger: Optional[StrictBool] = Field(default=None, description="Indicates whether the ondemand trigger is enabled for the workflow. ", alias="ondemandTrigger")
    scheduled_trigger: Optional[StrictBool] = Field(default=None, description="Indicates whether the scheduled trigger is enabled for the workflow. ", alias="scheduledTrigger")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled. ")
    type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = Field(default=None, description="The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format. ", alias="updatedAt")
    version: Optional[StrictStr] = Field(default=None, description="The version number of the workflow.  ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["calloutTrigger", "createdAt", "description", "id", "interval", "name", "ondemandTrigger", "scheduledTrigger", "timezone", "type", "updatedAt", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calloutTrigger": obj.get("calloutTrigger"),
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "interval": obj.get("interval"),
            "name": obj.get("name"),
            "ondemandTrigger": obj.get("ondemandTrigger"),
            "scheduledTrigger": obj.get("scheduledTrigger"),
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt"),
            "version": obj.get("version")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


