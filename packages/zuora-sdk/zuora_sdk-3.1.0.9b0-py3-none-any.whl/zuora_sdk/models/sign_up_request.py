# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.account_data import AccountData
from zuora_sdk.models.options import Options
from zuora_sdk.models.payment_data import PaymentData
from zuora_sdk.models.subscription_data import SubscriptionData
from typing import Optional, Set
from typing_extensions import Self

class SignUpRequest(BaseModel):
    """
    SignUpRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_data: Optional[AccountData] = Field(default=None, alias="accountData")
    account_identifier_field: Optional[StrictStr] = Field(default=None, description="Specify the name of the field that holds external account id", alias="accountIdentifierField")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields. ", alias="customFields")
    options: Optional[Options] = None
    payment_data: Optional[PaymentData] = Field(default=None, alias="paymentData")
    subscription_data: Optional[SubscriptionData] = Field(default=None, alias="subscriptionData")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountData", "accountIdentifierField", "customFields", "options", "paymentData", "subscriptionData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignUpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_data
        if self.account_data:
            _dict['accountData'] = self.account_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_data
        if self.payment_data:
            _dict['paymentData'] = self.payment_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_data
        if self.subscription_data:
            _dict['subscriptionData'] = self.subscription_data.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignUpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.__properties)

        _obj = cls.model_validate({
            "accountData": AccountData.from_dict(obj["accountData"]) if obj.get("accountData") is not None else None,
            "accountIdentifierField": obj.get("accountIdentifierField"),
            "customFields": obj.get("customFields"),
            "options": Options.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "paymentData": PaymentData.from_dict(obj["paymentData"]) if obj.get("paymentData") is not None else None,
            "subscriptionData": SubscriptionData.from_dict(obj["subscriptionData"]) if obj.get("subscriptionData") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


def convert_snake_dict_to_camel(_dict: dict, properties: list[str]):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        new_key = snake_to_camel(k)
        if properties is not None and isinstance(properties, list) and new_key in properties:
            new_dict[new_key] = v
        else:
            new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
