# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.expanded_credit_memo_item import ExpandedCreditMemoItem
from zuora_sdk.models.expanded_invoice_item import ExpandedInvoiceItem
from zuora_sdk.models.expanded_usage import ExpandedUsage
from typing import Optional, Set
from typing_extensions import Self

class ExpandedProcessedUsage(BaseModel):
    """
    ExpandedProcessedUsage
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    usage_id: Optional[StrictStr] = Field(default=None, alias="usageId")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    billing_period_end_date: Optional[StrictStr] = Field(default=None, alias="billingPeriodEndDate")
    billing_period_start_date: Optional[StrictStr] = Field(default=None, alias="billingPeriodStartDate")
    invoice_item_id: Optional[StrictStr] = Field(default=None, alias="invoiceItemId")
    rate_plan_charge_id: Optional[StrictStr] = Field(default=None, alias="ratePlanChargeId")
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    credit_memo_item_id: Optional[StrictStr] = Field(default=None, alias="creditMemoItemId")
    usage: Optional[ExpandedUsage] = None
    invoice_item: Optional[ExpandedInvoiceItem] = Field(default=None, alias="invoiceItem")
    credit_memo_item: Optional[ExpandedCreditMemoItem] = Field(default=None, alias="creditMemoItem")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["usageId", "amount", "billingPeriodEndDate", "billingPeriodStartDate", "invoiceItemId", "ratePlanChargeId", "id", "createdById", "createdDate", "updatedById", "updatedDate", "creditMemoItemId", "usage", "invoiceItem", "creditMemoItem"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedProcessedUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_item
        if self.invoice_item:
            _dict['invoiceItem'] = self.invoice_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_memo_item
        if self.credit_memo_item:
            _dict['creditMemoItem'] = self.credit_memo_item.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedProcessedUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usageId": obj.get("usageId"),
            "amount": obj.get("amount"),
            "billingPeriodEndDate": obj.get("billingPeriodEndDate"),
            "billingPeriodStartDate": obj.get("billingPeriodStartDate"),
            "invoiceItemId": obj.get("invoiceItemId"),
            "ratePlanChargeId": obj.get("ratePlanChargeId"),
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "creditMemoItemId": obj.get("creditMemoItemId"),
            "usage": ExpandedUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "invoiceItem": ExpandedInvoiceItem.from_dict(obj["invoiceItem"]) if obj.get("invoiceItem") is not None else None,
            "creditMemoItem": ExpandedCreditMemoItem.from_dict(obj["creditMemoItem"]) if obj.get("creditMemoItem") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


