# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.order_action_rate_plan_charge_remove import OrderActionRatePlanChargeRemove
from typing import Optional, Set
from typing_extensions import Self

class OrderActionRemoveProduct(BaseModel):
    """
    Information about an order action of type `RemoveProduct`.  A rate plan can be removed from a subscription through one order action. - If you remove a rate plan, specify the following fields:   - `externalCatalogPlanId`   - `ratePlanId`   - `subscriptionRatePlanNumber`   - `productRatePlanNumber`   - `uniqueToken` 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    external_catalog_plan_id: Optional[StrictStr] = Field(default=None, description="An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ", alias="externalCatalogPlanId")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate plan for this subscription. ", alias="productRatePlanNumber")
    product_rate_plan_id: Optional[StrictStr] = Field(default=None, description="ID of a product rate plan for this subscription. ", alias="productRatePlanId")
    rate_plan_id: Optional[StrictStr] = Field(default=None, description="ID of the rate plan to remove. This can be the latest version or any history version of ID. ", alias="ratePlanId")
    subscription_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a rate plan for this subscription. ", alias="subscriptionRatePlanNumber")
    unique_token: Optional[StrictStr] = Field(default=None, description="Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.", alias="uniqueToken")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of a Rate Plan object. ", alias="customFields")
    charge_updates: Optional[List[OrderActionRatePlanChargeRemove]] = Field(default=None, alias="chargeUpdates")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["externalCatalogPlanId", "productRatePlanNumber", "productRatePlanId", "ratePlanId", "subscriptionRatePlanNumber", "uniqueToken", "customFields", "chargeUpdates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionRemoveProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charge_updates (list)
        _items = []
        if self.charge_updates:
            for _item_charge_updates in self.charge_updates:
                if _item_charge_updates:
                    _items.append(_item_charge_updates.to_dict())
            _dict['chargeUpdates'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionRemoveProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalCatalogPlanId": obj.get("externalCatalogPlanId"),
            "productRatePlanNumber": obj.get("productRatePlanNumber"),
            "productRatePlanId": obj.get("productRatePlanId"),
            "ratePlanId": obj.get("ratePlanId"),
            "subscriptionRatePlanNumber": obj.get("subscriptionRatePlanNumber"),
            "uniqueToken": obj.get("uniqueToken"),
            "customFields": obj.get("customFields"),
            "chargeUpdates": [OrderActionRatePlanChargeRemove.from_dict(_item) for _item in obj["chargeUpdates"]] if obj.get("chargeUpdates") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


