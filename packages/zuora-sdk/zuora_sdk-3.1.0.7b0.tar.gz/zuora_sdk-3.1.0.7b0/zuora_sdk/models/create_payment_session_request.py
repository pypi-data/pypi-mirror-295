# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.create_payment_session_invoice import CreatePaymentSessionInvoice
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentSessionRequest(BaseModel):
    """
    CreatePaymentSessionRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer account in Zuora that is associated with this payment method. ", alias="accountId")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the payment.  This field is required if `processPayment` is `true`. ")
    auth_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The authorization amount for the payment method. Specify a value greater than 0.  This field is required if `processPayment` is false. ", alias="authAmount")
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the payment in the format of the three-character ISO currency code. ")
    payment_gateway: Optional[StrictStr] = Field(default=None, description="The ID of the payment gateway instance configured in Zuora that will process the payment, such as `e884322ab8c711edab030242ac120004`. ", alias="paymentGateway")
    process_payment: Optional[StrictBool] = Field(default=True, description="Indicate whether a payment should be processed after creating the payment method.  If this field is set to `true`, you must specify the `amount` field.  If this field is set to `false`, you must specify the `authAmount` field. The payment method will be verified through the payment gateway instance specified in the `paymentGateway` field. ", alias="processPayment")
    store_payment_method: Optional[StrictBool] = Field(default=True, description="true indicates that the payment method will be stored in Zuora and will be used in subsequent recurring payments. false indicates that the payment method will not be stored in Zuora. End-customers need to be brought back on-session to authenticate the payment. ", alias="storePaymentMethod")
    invoices: Optional[List[CreatePaymentSessionInvoice]] = Field(default=None, description="Container for invoices. The maximum number of invoices is 1,000. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "amount", "authAmount", "currency", "paymentGateway", "processPayment", "storePaymentMethod", "invoices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentSessionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict['invoices'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentSessionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "amount": obj.get("amount"),
            "authAmount": obj.get("authAmount"),
            "currency": obj.get("currency"),
            "paymentGateway": obj.get("paymentGateway"),
            "processPayment": obj.get("processPayment") if obj.get("processPayment") is not None else True,
            "storePaymentMethod": obj.get("storePaymentMethod") if obj.get("storePaymentMethod") is not None else True,
            "invoices": [CreatePaymentSessionInvoice.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


