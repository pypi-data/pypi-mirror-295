# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpandedOrders(BaseModel):
    """
    ExpandedOrders
    """ # noqa: E501
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    description: Optional[StrictStr] = None
    order_date: Optional[date] = Field(default=None, alias="orderDate")
    order_number: Optional[StrictStr] = Field(default=None, alias="orderNumber")
    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    status: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    created_by_migration: Optional[StrictBool] = Field(default=None, alias="createdByMigration")
    category: Optional[StrictStr] = None
    invoice_schedule_id: Optional[StrictStr] = Field(default=None, alias="invoiceScheduleId")
    scheduled_date: Optional[date] = Field(default=None, alias="scheduledDate")
    scheduled_date_policy: Optional[StrictStr] = Field(default=None, alias="scheduledDatePolicy")
    error_code: Optional[StrictStr] = Field(default=None, alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    response: Optional[StrictStr] = None
    reverted_order_id: Optional[StrictStr] = Field(default=None, alias="revertedOrderId")
    reverted_by_order_id: Optional[StrictStr] = Field(default=None, alias="revertedByOrderId")
    reverted_order_number: Optional[StrictStr] = Field(default=None, alias="revertedOrderNumber")
    reversion_order: Optional[StrictBool] = Field(default=None, alias="reversionOrder")
    reverted_date: Optional[date] = Field(default=None, alias="revertedDate")
    account: Optional[ExpandedAccount] = None
    order_line_items: Optional[List[ExpandedOrderLineItem]] = Field(default=None, alias="orderLineItems")
    order_actions: Optional[List[ExpandedOrderAction]] = Field(default=None, alias="orderActions")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "createdById", "createdDate", "updatedById", "updatedDate", "description", "orderDate", "orderNumber", "accountId", "status", "state", "createdByMigration", "category", "invoiceScheduleId", "scheduledDate", "scheduledDatePolicy", "errorCode", "errorMessage", "response", "revertedOrderId", "revertedByOrderId", "revertedOrderNumber", "reversionOrder", "revertedDate", "account", "orderLineItems", "orderActions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedOrders from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item_order_line_items in self.order_line_items:
                if _item_order_line_items:
                    _items.append(_item_order_line_items.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_actions (list)
        _items = []
        if self.order_actions:
            for _item_order_actions in self.order_actions:
                if _item_order_actions:
                    _items.append(_item_order_actions.to_dict())
            _dict['orderActions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedOrders from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "description": obj.get("description"),
            "orderDate": obj.get("orderDate"),
            "orderNumber": obj.get("orderNumber"),
            "accountId": obj.get("accountId"),
            "status": obj.get("status"),
            "state": obj.get("state"),
            "createdByMigration": obj.get("createdByMigration"),
            "category": obj.get("category"),
            "invoiceScheduleId": obj.get("invoiceScheduleId"),
            "scheduledDate": obj.get("scheduledDate"),
            "scheduledDatePolicy": obj.get("scheduledDatePolicy"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "response": obj.get("response"),
            "revertedOrderId": obj.get("revertedOrderId"),
            "revertedByOrderId": obj.get("revertedByOrderId"),
            "revertedOrderNumber": obj.get("revertedOrderNumber"),
            "reversionOrder": obj.get("reversionOrder"),
            "revertedDate": obj.get("revertedDate"),
            "account": ExpandedAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "orderLineItems": [ExpandedOrderLineItem.from_dict(_item) for _item in obj["orderLineItems"]] if obj.get("orderLineItems") is not None else None,
            "orderActions": [ExpandedOrderAction.from_dict(_item) for _item in obj["orderActions"]] if obj.get("orderActions") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

from zuora_sdk.models.expanded_account import ExpandedAccount
from zuora_sdk.models.expanded_order_action import ExpandedOrderAction
from zuora_sdk.models.expanded_order_line_item import ExpandedOrderLineItem
# TODO: Rewrite to not use raise_errors
ExpandedOrders.model_rebuild(raise_errors=False)

