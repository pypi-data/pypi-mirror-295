# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountBillingAndPayment(BaseModel):
    """
    Container for billing and payment information for the account.
    """ # noqa: E501
    additional_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="A list of additional email addresses to receive email notifications. ", alias="additionalEmailAddresses")
    auto_pay: Optional[StrictBool] = Field(default=None, description="Whether future payments are automatically collected when they are due during a payment run.  ", alias="autoPay")
    bill_cycle_day: Optional[StrictInt] = Field(default=None, description="Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. ", alias="billCycleDay")
    currency: Optional[StrictStr] = Field(default=None, description="A currency defined in the web-based UI administrative settings. ")
    default_payment_method_id: Optional[StrictStr] = Field(default=None, description="ID of the default payment method for the account. ", alias="defaultPaymentMethodId")
    invoice_delivery_prefs_email: Optional[StrictBool] = Field(default=None, description="Whether the customer wants to receive invoices through email.  ", alias="invoiceDeliveryPrefsEmail")
    invoice_delivery_prefs_print: Optional[StrictBool] = Field(default=None, description="Whether the customer wants to receive printed invoices, such as through postal mail. ", alias="invoiceDeliveryPrefsPrint")
    payment_gateway: Optional[StrictStr] = Field(default=None, description="The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway. ", alias="paymentGateway")
    payment_term: Optional[StrictStr] = Field(default=None, description="A payment-terms indicator defined in the web-based UI administrative settings, e.g., \"Net 30\". ", alias="paymentTerm")
    payment_gateway_number: Optional[StrictStr] = Field(default=None, description="paymentGatewayNumber\". ", alias="paymentGatewayNumber")
    payment_method_cascading_consent: Optional[StrictBool] = Field(default=None, description="payment method cascading consent ", alias="paymentMethodCascadingConsent")
    roll_up_usage: Optional[StrictBool] = Field(default=None, description="whether roll up usage of the account to its parent account", alias="rollUpUsage")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["additionalEmailAddresses", "autoPay", "billCycleDay", "currency", "defaultPaymentMethodId", "invoiceDeliveryPrefsEmail", "invoiceDeliveryPrefsPrint", "paymentGateway", "paymentTerm", "paymentGatewayNumber", "paymentMethodCascadingConsent", "rollUpUsage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountBillingAndPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountBillingAndPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalEmailAddresses": obj.get("additionalEmailAddresses"),
            "autoPay": obj.get("autoPay"),
            "billCycleDay": obj.get("billCycleDay"),
            "currency": obj.get("currency"),
            "defaultPaymentMethodId": obj.get("defaultPaymentMethodId"),
            "invoiceDeliveryPrefsEmail": obj.get("invoiceDeliveryPrefsEmail"),
            "invoiceDeliveryPrefsPrint": obj.get("invoiceDeliveryPrefsPrint"),
            "paymentGateway": obj.get("paymentGateway"),
            "paymentTerm": obj.get("paymentTerm"),
            "paymentGatewayNumber": obj.get("paymentGatewayNumber"),
            "paymentMethodCascadingConsent": obj.get("paymentMethodCascadingConsent"),
            "rollUpUsage": obj.get("rollUpUsage")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


