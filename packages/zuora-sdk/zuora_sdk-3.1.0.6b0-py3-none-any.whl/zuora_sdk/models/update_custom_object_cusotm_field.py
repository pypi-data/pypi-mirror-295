# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.custom_object_custom_field_definition_update import CustomObjectCustomFieldDefinitionUpdate
from typing import Optional, Set
from typing_extensions import Self

class UpdateCustomObjectCusotmField(BaseModel):
    """
    A reference to a field.
    """ # noqa: E501
    auditable: Optional[StrictBool] = Field(default=None, description="Indicates whether Audit Trail will record changes of this custom field. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields. ")
    definition: Optional[CustomObjectCustomFieldDefinitionUpdate] = None
    filterable: Optional[StrictBool] = Field(default=None, description="Indicates whether the field is filterable or not. Applicable to `addField` and `updateField` actions.  You can change a filterable field to non-filterable and vice versa. You can also add a filterable field. One custom object can have a maximum of 10 filterable fields.  Note that changing filterable fields triggers reindexing. It will take 12-24 hours before all your data are reindexed and available to query. ")
    name: Optional[StrictStr] = Field(default=None, description="The name of the custom field to be updated")
    required: Optional[StrictBool] = Field(default=None, description="Indicates whether the field is required or optional.  You can update a required field to optional. On the other hand, you can only update an optional field to required on the custom object with no records.  You can only add a required field to the custom object with no records. ")
    target_name: Optional[StrictStr] = Field(default=None, description="Required if the `type` of the action is `renameField`", alias="targetName")
    unique: Optional[StrictBool] = Field(default=None, description="Indicates whether to specify a unique constraint to the field. You can remove the unique constraint on the field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["auditable", "definition", "filterable", "name", "required", "targetName", "unique"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCustomObjectCusotmField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCustomObjectCusotmField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auditable": obj.get("auditable"),
            "definition": CustomObjectCustomFieldDefinitionUpdate.from_dict(obj["definition"]) if obj.get("definition") is not None else None,
            "filterable": obj.get("filterable"),
            "name": obj.get("name"),
            "required": obj.get("required"),
            "targetName": obj.get("targetName"),
            "unique": obj.get("unique")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


