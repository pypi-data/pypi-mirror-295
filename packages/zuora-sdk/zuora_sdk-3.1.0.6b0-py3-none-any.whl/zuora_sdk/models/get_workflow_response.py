# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.get_workflow_response_tasks import GetWorkflowResponseTasks
from typing import Optional, Set
from typing_extensions import Self

class GetWorkflowResponse(BaseModel):
    """
    GetWorkflowResponse
    """ # noqa: E501
    cpu_time: Optional[StrictStr] = Field(default=None, description="The overall CPU time for the execution of the workflow. ", alias="cpuTime")
    created_at: Optional[StrictStr] = Field(default=None, description="The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.. ", alias="createdAt")
    finished_at: Optional[StrictStr] = Field(default=None, description="The date and time when the execution of the workflow completes, in the `YYYY-MM-DD HH:MM:SS` format. ", alias="finishedAt")
    id: Optional[StrictInt] = Field(default=None, description="The unique ID of the workflow. ")
    messages: Optional[Dict[str, Any]] = Field(default=None, description="Messages from tasks.   **Note:** This field is only returned in Production. ")
    name: Optional[StrictStr] = Field(default=None, description="The unique run number of the workflow. ")
    original_workflow_id: Optional[StrictStr] = Field(default=None, description="The ID of the workflow setup. ", alias="originalWorkflowId")
    run_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The execution time of the workflow including the waiting time, in seconds. ", alias="runTime")
    status: Optional[StrictStr] = None
    tasks: Optional[GetWorkflowResponseTasks] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of the current workflow. Possible values:   - `Workflow::Setup`: The workflow is a setup and is used for creating workflow instances.   - `Workflow::Instance`: The workflow is an execution that has data. ")
    updated_at: Optional[StrictStr] = Field(default=None, description="The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format. ", alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["cpuTime", "createdAt", "finishedAt", "id", "messages", "name", "originalWorkflowId", "runTime", "status", "tasks", "type", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetWorkflowResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tasks
        if self.tasks:
            _dict['tasks'] = self.tasks.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetWorkflowResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpuTime": obj.get("cpuTime"),
            "createdAt": obj.get("createdAt"),
            "finishedAt": obj.get("finishedAt"),
            "id": obj.get("id"),
            "messages": obj.get("messages"),
            "name": obj.get("name"),
            "originalWorkflowId": obj.get("originalWorkflowId"),
            "runTime": obj.get("runTime"),
            "status": obj.get("status"),
            "tasks": GetWorkflowResponseTasks.from_dict(obj["tasks"]) if obj.get("tasks") is not None else None,
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


