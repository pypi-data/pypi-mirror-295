# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.organization_label import OrganizationLabel
from typing import Optional, Set
from typing_extensions import Self

class CreateAccountingPeriodRequest(BaseModel):
    """
    CreateAccountingPeriodRequest
    """ # noqa: E501
    end_date: date = Field(description="The end date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\". ", alias="endDate")
    fiscal_year: StrictInt = Field(description="Fiscal year of the accounting period in yyyy format. ", alias="fiscalYear")
    fiscal_quarter: Optional[StrictInt] = Field(default=None, alias="fiscalQuarter")
    name: StrictStr = Field(description="Name of the accounting period.  Accounting period name must be unique. Maximum of 100 characters. ")
    notes: Optional[StrictStr] = Field(default=None, description="Notes about the accounting period.  Maximum of 255 characters. ")
    start_date: date = Field(description="The start date of the accounting period in yyyy-mm-dd format, for example, \"2016-02-19\". ", alias="startDate")
    organization_labels: Optional[List[OrganizationLabel]] = Field(default=None, description="Organization labels. ", alias="organizationLabels")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["endDate", "fiscalYear", "fiscalQuarter", "name", "notes", "startDate", "organizationLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccountingPeriodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in organization_labels (list)
        _items = []
        if self.organization_labels:
            for _item_organization_labels in self.organization_labels:
                if _item_organization_labels:
                    _items.append(_item_organization_labels.to_dict())
            _dict['organizationLabels'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccountingPeriodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endDate": obj.get("endDate"),
            "fiscalYear": obj.get("fiscalYear"),
            "fiscalQuarter": obj.get("fiscalQuarter"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "startDate": obj.get("startDate"),
            "organizationLabels": [OrganizationLabel.from_dict(_item) for _item in obj["organizationLabels"]] if obj.get("organizationLabels") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


