# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class StoredCredentialProfileResponse(BaseModel):
    """
    StoredCredentialProfileResponse
    """ # noqa: E501
    activated_on: Optional[datetime] = Field(default=None, description="The date when the stored credential profile was activated (if applicable). ", alias="activatedOn")
    agreed_on: Optional[datetime] = Field(default=None, description="The date when the stored credential profile was created. ", alias="agreedOn")
    brand: Optional[StrictStr] = Field(default=None, description="The stored credential transaction framework. For example, Visa. ")
    cancelled_on: Optional[datetime] = Field(default=None, description="The date when the stored credential profile was cancelled (if applicable). ", alias="cancelledOn")
    consent_agreement_ref: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Your reference for the consent agreement that you have established with the customer. ", alias="consentAgreementRef")
    consent_agreement_src: Optional[StrictStr] = Field(default=None, alias="consentAgreementSrc")
    expired_on: Optional[datetime] = Field(default=None, description="The date when the stored credential profile was expired (if applicable). ", alias="expiredOn")
    number: Optional[StrictInt] = Field(default=None, description="The number that identifies the stored credential profile within the payment method. ")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="ID of the payment method. ", alias="paymentMethodId")
    status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["activatedOn", "agreedOn", "brand", "cancelledOn", "consentAgreementRef", "consentAgreementSrc", "expiredOn", "number", "paymentMethodId", "status", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoredCredentialProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoredCredentialProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activatedOn": obj.get("activatedOn"),
            "agreedOn": obj.get("agreedOn"),
            "brand": obj.get("brand"),
            "cancelledOn": obj.get("cancelledOn"),
            "consentAgreementRef": obj.get("consentAgreementRef"),
            "consentAgreementSrc": obj.get("consentAgreementSrc"),
            "expiredOn": obj.get("expiredOn"),
            "number": obj.get("number"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


