# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetBillingDocumentsResponse(BaseModel):
    """
    GetBillingDocumentsResponse
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer account associated with the billing document.", alias="accountId")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the billing document.")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The balance of the billing document.")
    document_date: Optional[date] = Field(default=None, description="The date of the billing document. The date can be the invoice date for invoices, credit memo date for credit memos, or debit memo date for debit memos.", alias="documentDate")
    document_number: Optional[StrictStr] = Field(default=None, description="The number of the billing document.", alias="documentNumber")
    document_type: Optional[StrictStr] = Field(default=None, alias="documentType")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the billing document.")
    status: Optional[StrictStr] = None
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the billing document.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "amount", "balance", "documentDate", "documentNumber", "documentType", "id", "status", "currency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBillingDocumentsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBillingDocumentsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "amount": obj.get("amount"),
            "balance": obj.get("balance"),
            "documentDate": obj.get("documentDate"),
            "documentNumber": obj.get("documentNumber"),
            "documentType": obj.get("documentType"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "currency": obj.get("currency")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


