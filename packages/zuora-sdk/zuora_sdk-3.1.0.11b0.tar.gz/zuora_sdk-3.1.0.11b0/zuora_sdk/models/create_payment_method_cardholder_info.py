# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentMethodCardholderInfo(BaseModel):
    """
    Container for cardholder information. This container field is required for credit card payment methods. The nested `cardHolderName` field is required. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    address_line1: Optional[StrictStr] = Field(default=None, description="First address line, 255 characters or less. ", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="Second address line, 255 characters or less. ", alias="addressLine2")
    card_holder_name: Optional[StrictStr] = Field(default=None, description="The card holder's full name as it appears on the card, e.g., \"John J Smith\", 50 characters or less. ", alias="cardHolderName")
    city: Optional[StrictStr] = Field(default=None, description="City, 40 characters or less. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    country: Optional[StrictStr] = Field(default=None, description="Country, must be a valid country name or abbreviation. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    email: Optional[StrictStr] = Field(default=None, description="Card holder's email address, 80 characters or less. ")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number, 40 characters or less. ")
    state: Optional[StrictStr] = Field(default=None, description="State; must be a valid state name or 2-character abbreviation. ")
    zip_code: Optional[StrictStr] = Field(default=None, description="Zip code, 20 characters or less. ", alias="zipCode")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["addressLine1", "addressLine2", "cardHolderName", "city", "country", "email", "phone", "state", "zipCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentMethodCardholderInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentMethodCardholderInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.__properties)

        _obj = cls.model_validate({
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "cardHolderName": obj.get("cardHolderName"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "zipCode": obj.get("zipCode")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


def convert_snake_dict_to_camel(_dict: dict, properties: list[str]):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        new_key = snake_to_camel(k)
        if properties is not None and isinstance(properties, list) and new_key in properties:
            new_dict[new_key] = v
        else:
            new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
