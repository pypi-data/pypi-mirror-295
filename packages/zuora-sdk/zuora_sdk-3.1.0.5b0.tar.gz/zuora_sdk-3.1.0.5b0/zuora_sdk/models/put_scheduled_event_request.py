# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.post_scheduled_event_request_parameters_value import PostScheduledEventRequestParametersValue
from typing import Optional, Set
from typing_extensions import Self

class PutScheduledEventRequest(BaseModel):
    """
    PutScheduledEventRequest
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Indicate whether the scheduled event is active or inactive")
    condition: Optional[Annotated[str, Field(strict=True, max_length=65535)]] = Field(default=None, description="The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true. The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:  ```Invoice.Amount > 1000```  `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`. ")
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="The description of the scheduled event.")
    display_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=500)]] = Field(default=None, description="The display name of the scheduled event.", alias="displayName")
    hours: Optional[Annotated[int, Field(le=23, strict=True, ge=0)]] = Field(default=None, description="The scheduled time (hour) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.")
    minutes: Optional[Annotated[int, Field(le=59, strict=True, ge=0)]] = Field(default=None, description="The scheduled time (minute) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.")
    parameters: Optional[Dict[str, PostScheduledEventRequestParametersValue]] = Field(default=None, description="The parameters of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["active", "condition", "description", "displayName", "hours", "minutes", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutScheduledEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutScheduledEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "hours": obj.get("hours"),
            "minutes": obj.get("minutes"),
            "parameters": dict(
                (_k, PostScheduledEventRequestParametersValue.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


