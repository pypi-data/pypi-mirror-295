import numpy as np
from .hw_discovery import is_jetson as is_jetson
from _typeshed import Incomplete
from edgeiq.bounding_box import BoundingBox as BoundingBox
from typing import List, Optional, Tuple

nj: Incomplete

def translate(image: np.ndarray, x: int, y: int) -> np.ndarray: ...
def rotate(image: np.ndarray, angle: int) -> np.ndarray: ...
def resize(image: np.ndarray, width: Optional[int] = ..., height: Optional[int] = ..., keep_scale: bool = ..., inter: int = ...) -> np.ndarray: ...
def convert_to_jpg(image: np.ndarray, jpg_quality: int) -> bytes: ...
def list_images(base_path: str, contains: Optional[str] = ...) -> List[str]: ...
def list_files(base_path: str, valid_exts: List[str], contains: Optional[str] = ...) -> List[str]: ...
def safe_hstack(frames: List[np.ndarray], pad: bool = ...): ...
def safe_vstack(frames: List[np.ndarray], pad: bool = ...): ...
def pad_to_aspect_ratio(image: np.ndarray, a_ratio: float) -> Tuple[np.ndarray, int, int]: ...
def cutout_image(image: np.ndarray, box: BoundingBox) -> np.ndarray: ...
def blend_images(foreground_image: np.ndarray, background_image: np.ndarray, alpha: float) -> np.ndarray: ...
def overlay_image(foreground_image: np.ndarray, background_image: np.ndarray, foreground_mask: np.ndarray) -> np.ndarray: ...
def perform_histogram_equalization(image: np.ndarray, color_space: str = ..., adaptive: bool = ..., clip_limit: float = ..., tile_grid_size: Tuple[int, int] = ...) -> np.ndarray: ...
def perform_gamma_correction(image: np.ndarray, gamma_value: float = ..., color: bool = ...) -> np.ndarray: ...
