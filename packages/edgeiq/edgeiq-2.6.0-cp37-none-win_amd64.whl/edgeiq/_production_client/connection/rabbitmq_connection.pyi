import threading
from ..connection.base_connection import BaseCloudConnection as BaseCloudConnection
from ..util import create_base_message_packet as create_base_message_packet
from _typeshed import Incomplete
from edgeiq.app_config import AppConfig as AppConfig
from edgeiq.exceptions import ConnectionBlockedError as ConnectionBlockedError, ConnectionError as ConnectionError, PublishError as PublishError

DEFAULT_ROUTING_KEY: str
DEFAULT_RABBITMQ_HOST: str
DEFAULT_RABBITMQ_PORT: str
DEFAULT_RABBITMQ_INTERVAL: int

class TxHeartBeat(threading.Thread):
    channel: Incomplete
    heartbeat_interval: Incomplete
    daemon: bool
    def __init__(self, heartbeat_interval, send_lock, routing_key) -> None: ...
    def set_channel(self, channel) -> None: ...
    def run(self) -> None: ...
    def close(self) -> None: ...
    def check_for_errors(self) -> None: ...

class RabbitMQConnection(BaseCloudConnection):
    def __new__(cls): ...
    connection: Incomplete
    channel: Incomplete
    previous_id: int
    heartbeat_thread: Incomplete
    def __init__(self) -> None: ...
    def connect(self) -> None: ...
    def reconnect(self) -> None: ...
    def publish(self, message) -> None: ...
    def disconnect(self) -> None: ...
