import edgeiq
import numpy as np
from edgeiq import performance_analysis as performance_analysis
from typing import Optional, Tuple

class TrackerPerformanceReport:
    def __init__(self, report: dict) -> None: ...
    @property
    def id_change_report(self) -> dict: ...
    @property
    def id_swap_report(self) -> dict: ...
    def write_to_file(self, output_dir: str): ...

class TrackerPerformanceAnalyzer:
    def __init__(self, annotations_path: str, max_distance: int, start_frame: int = ..., end_frame: Optional[int] = ...) -> None: ...
    def get_annotation_predictions(self, frame_idx: int) -> list: ...
    def update(self, frame_idx: int, tracked_results: edgeiq.TrackingResults): ...
    def markup_image(self, frame_idx: int, frame: np.ndarray, color: Tuple[int, int, int]) -> np.ndarray: ...
    def generate_report(self) -> TrackerPerformanceReport: ...
