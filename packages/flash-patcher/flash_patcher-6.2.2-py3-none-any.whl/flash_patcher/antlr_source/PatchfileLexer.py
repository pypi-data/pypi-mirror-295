# Generated from ../flash_patcher/antlr_source/PatchfileLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,420,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
        4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,
        12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,
        18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,
        25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
        31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,
        38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,
        44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,
        51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,
        57,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,223,8,9,1,9,4,9,226,8,9,11,9,12,
        9,227,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,242,8,
        9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
        37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
        44,1,44,1,45,1,45,1,46,1,46,1,47,4,47,354,8,47,11,47,12,47,355,1,
        48,1,48,1,49,1,49,1,50,1,50,1,51,4,51,365,8,51,11,51,12,51,366,1,
        52,4,52,370,8,52,11,52,12,52,371,1,52,1,52,1,53,1,53,5,53,378,8,
        53,10,53,12,53,381,9,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,55,4,55,398,8,55,11,55,12,55,399,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,57,4,57,417,8,57,11,57,12,57,418,3,227,399,418,0,58,3,1,5,
        2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,
        31,15,33,16,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,
        0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,
        0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,17,99,18,101,19,103,20,105,
        21,107,22,109,23,111,24,113,25,115,26,117,27,3,0,1,2,32,2,0,65,65,
        97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,
        101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,
        0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,
        108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,
        80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,
        2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,
        119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,2,
        0,65,90,97,122,1,0,48,57,2,0,47,47,92,92,5,0,10,10,13,13,32,32,45,
        45,61,61,3,0,9,10,12,13,32,32,2,0,10,10,13,13,395,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        107,1,0,0,0,0,109,1,0,0,0,1,111,1,0,0,0,1,113,1,0,0,0,2,115,1,0,
        0,0,2,117,1,0,0,0,3,119,1,0,0,0,5,123,1,0,0,0,7,133,1,0,0,0,9,140,
        1,0,0,0,11,148,1,0,0,0,13,160,1,0,0,0,15,168,1,0,0,0,17,179,1,0,
        0,0,19,191,1,0,0,0,21,241,1,0,0,0,23,243,1,0,0,0,25,257,1,0,0,0,
        27,273,1,0,0,0,29,282,1,0,0,0,31,286,1,0,0,0,33,288,1,0,0,0,35,290,
        1,0,0,0,37,292,1,0,0,0,39,294,1,0,0,0,41,296,1,0,0,0,43,298,1,0,
        0,0,45,300,1,0,0,0,47,302,1,0,0,0,49,304,1,0,0,0,51,306,1,0,0,0,
        53,308,1,0,0,0,55,310,1,0,0,0,57,312,1,0,0,0,59,314,1,0,0,0,61,316,
        1,0,0,0,63,318,1,0,0,0,65,320,1,0,0,0,67,322,1,0,0,0,69,324,1,0,
        0,0,71,326,1,0,0,0,73,328,1,0,0,0,75,330,1,0,0,0,77,332,1,0,0,0,
        79,334,1,0,0,0,81,336,1,0,0,0,83,338,1,0,0,0,85,340,1,0,0,0,87,342,
        1,0,0,0,89,344,1,0,0,0,91,346,1,0,0,0,93,348,1,0,0,0,95,350,1,0,
        0,0,97,353,1,0,0,0,99,357,1,0,0,0,101,359,1,0,0,0,103,361,1,0,0,
        0,105,364,1,0,0,0,107,369,1,0,0,0,109,375,1,0,0,0,111,384,1,0,0,
        0,113,397,1,0,0,0,115,401,1,0,0,0,117,416,1,0,0,0,119,120,3,35,16,
        0,120,121,3,41,19,0,121,122,3,41,19,0,122,4,1,0,0,0,123,124,3,35,
        16,0,124,125,3,41,19,0,125,126,3,41,19,0,126,127,5,45,0,0,127,128,
        3,35,16,0,128,129,3,71,34,0,129,130,3,71,34,0,130,131,3,43,20,0,
        131,132,3,73,35,0,132,6,1,0,0,0,133,134,3,69,33,0,134,135,3,43,20,
        0,135,136,3,59,28,0,136,137,3,63,30,0,137,138,3,77,37,0,138,139,
        3,43,20,0,139,8,1,0,0,0,140,141,3,69,33,0,141,142,3,43,20,0,142,
        143,3,65,31,0,143,144,3,57,27,0,144,145,3,35,16,0,145,146,3,39,18,
        0,146,147,3,43,20,0,147,10,1,0,0,0,148,149,3,69,33,0,149,150,3,43,
        20,0,150,151,3,65,31,0,151,152,3,57,27,0,152,153,3,35,16,0,153,154,
        3,39,18,0,154,155,3,43,20,0,155,156,5,45,0,0,156,157,3,35,16,0,157,
        158,3,57,27,0,158,159,3,57,27,0,159,12,1,0,0,0,160,161,3,71,34,0,
        161,162,3,43,20,0,162,163,3,73,35,0,163,164,5,45,0,0,164,165,3,77,
        37,0,165,166,3,35,16,0,166,167,3,69,33,0,167,14,1,0,0,0,168,169,
        3,43,20,0,169,170,3,81,39,0,170,171,3,65,31,0,171,172,3,63,30,0,
        172,173,3,69,33,0,173,174,3,73,35,0,174,175,5,45,0,0,175,176,3,77,
        37,0,176,177,3,35,16,0,177,178,3,69,33,0,178,16,1,0,0,0,179,180,
        3,35,16,0,180,181,3,65,31,0,181,182,3,65,31,0,182,183,3,57,27,0,
        183,184,3,83,40,0,184,185,5,45,0,0,185,186,3,65,31,0,186,187,3,35,
        16,0,187,188,3,73,35,0,188,189,3,39,18,0,189,190,3,49,23,0,190,18,
        1,0,0,0,191,192,3,43,20,0,192,193,3,81,39,0,193,194,3,43,20,0,194,
        195,3,39,18,0,195,196,5,45,0,0,196,197,3,65,31,0,197,198,3,83,40,
        0,198,199,3,73,35,0,199,200,3,49,23,0,200,201,3,63,30,0,201,202,
        3,61,29,0,202,20,1,0,0,0,203,204,3,41,19,0,204,205,3,43,20,0,205,
        206,3,45,21,0,206,207,3,51,24,0,207,208,3,61,29,0,208,209,3,43,20,
        0,209,210,3,71,34,0,210,211,3,65,31,0,211,212,3,69,33,0,212,213,
        3,51,24,0,213,214,3,73,35,0,214,215,3,43,20,0,215,223,1,0,0,0,216,
        217,3,45,21,0,217,218,3,69,33,0,218,219,3,35,16,0,219,220,3,59,28,
        0,220,221,3,43,20,0,221,223,1,0,0,0,222,203,1,0,0,0,222,216,1,0,
        0,0,223,225,1,0,0,0,224,226,9,0,0,0,225,224,1,0,0,0,226,227,1,0,
        0,0,227,228,1,0,0,0,227,225,1,0,0,0,228,229,1,0,0,0,229,230,5,46,
        0,0,230,231,5,97,0,0,231,232,5,115,0,0,232,242,1,0,0,0,233,234,3,
        71,34,0,234,235,3,79,38,0,235,236,3,45,21,0,236,237,5,46,0,0,237,
        238,5,120,0,0,238,239,5,109,0,0,239,240,5,108,0,0,240,242,1,0,0,
        0,241,222,1,0,0,0,241,233,1,0,0,0,242,22,1,0,0,0,243,244,3,37,17,
        0,244,245,3,43,20,0,245,246,3,47,22,0,246,247,3,51,24,0,247,248,
        3,61,29,0,248,249,5,45,0,0,249,250,3,65,31,0,250,251,3,35,16,0,251,
        252,3,73,35,0,252,253,3,39,18,0,253,254,3,49,23,0,254,255,1,0,0,
        0,255,256,6,10,0,0,256,24,1,0,0,0,257,258,3,37,17,0,258,259,3,43,
        20,0,259,260,3,47,22,0,260,261,3,51,24,0,261,262,3,61,29,0,262,263,
        5,45,0,0,263,264,3,39,18,0,264,265,3,63,30,0,265,266,3,61,29,0,266,
        267,3,73,35,0,267,268,3,43,20,0,268,269,3,61,29,0,269,270,3,73,35,
        0,270,271,1,0,0,0,271,272,6,11,1,0,272,26,1,0,0,0,273,274,3,45,21,
        0,274,275,3,75,36,0,275,276,3,61,29,0,276,277,3,39,18,0,277,278,
        3,73,35,0,278,279,3,51,24,0,279,280,3,63,30,0,280,281,3,61,29,0,
        281,28,1,0,0,0,282,283,3,43,20,0,283,284,3,61,29,0,284,285,3,41,
        19,0,285,30,1,0,0,0,286,287,5,40,0,0,287,32,1,0,0,0,288,289,5,41,
        0,0,289,34,1,0,0,0,290,291,7,0,0,0,291,36,1,0,0,0,292,293,7,1,0,
        0,293,38,1,0,0,0,294,295,7,2,0,0,295,40,1,0,0,0,296,297,7,3,0,0,
        297,42,1,0,0,0,298,299,7,4,0,0,299,44,1,0,0,0,300,301,7,5,0,0,301,
        46,1,0,0,0,302,303,7,6,0,0,303,48,1,0,0,0,304,305,7,7,0,0,305,50,
        1,0,0,0,306,307,7,8,0,0,307,52,1,0,0,0,308,309,7,9,0,0,309,54,1,
        0,0,0,310,311,7,10,0,0,311,56,1,0,0,0,312,313,7,11,0,0,313,58,1,
        0,0,0,314,315,7,12,0,0,315,60,1,0,0,0,316,317,7,13,0,0,317,62,1,
        0,0,0,318,319,7,14,0,0,319,64,1,0,0,0,320,321,7,15,0,0,321,66,1,
        0,0,0,322,323,7,16,0,0,323,68,1,0,0,0,324,325,7,17,0,0,325,70,1,
        0,0,0,326,327,7,18,0,0,327,72,1,0,0,0,328,329,7,19,0,0,329,74,1,
        0,0,0,330,331,7,20,0,0,331,76,1,0,0,0,332,333,7,21,0,0,333,78,1,
        0,0,0,334,335,7,22,0,0,335,80,1,0,0,0,336,337,7,23,0,0,337,82,1,
        0,0,0,338,339,7,24,0,0,339,84,1,0,0,0,340,341,7,25,0,0,341,86,1,
        0,0,0,342,343,7,26,0,0,343,88,1,0,0,0,344,345,7,27,0,0,345,90,1,
        0,0,0,346,347,5,32,0,0,347,92,1,0,0,0,348,349,7,28,0,0,349,94,1,
        0,0,0,350,351,5,46,0,0,351,96,1,0,0,0,352,354,3,89,43,0,353,352,
        1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,98,1,
        0,0,0,357,358,5,45,0,0,358,100,1,0,0,0,359,360,5,43,0,0,360,102,
        1,0,0,0,361,362,5,61,0,0,362,104,1,0,0,0,363,365,8,29,0,0,364,363,
        1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,106,
        1,0,0,0,368,370,7,30,0,0,369,368,1,0,0,0,370,371,1,0,0,0,371,369,
        1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,6,52,2,0,374,108,
        1,0,0,0,375,379,5,35,0,0,376,378,8,31,0,0,377,376,1,0,0,0,378,381,
        1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,379,
        1,0,0,0,382,383,6,53,2,0,383,110,1,0,0,0,384,385,3,43,20,0,385,386,
        3,61,29,0,386,387,3,41,19,0,387,388,5,45,0,0,388,389,3,65,31,0,389,
        390,3,35,16,0,390,391,3,73,35,0,391,392,3,39,18,0,392,393,3,49,23,
        0,393,394,1,0,0,0,394,395,6,54,3,0,395,112,1,0,0,0,396,398,9,0,0,
        0,397,396,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,399,397,1,0,0,
        0,400,114,1,0,0,0,401,402,3,43,20,0,402,403,3,61,29,0,403,404,3,
        41,19,0,404,405,5,45,0,0,405,406,3,39,18,0,406,407,3,63,30,0,407,
        408,3,61,29,0,408,409,3,73,35,0,409,410,3,43,20,0,410,411,3,61,29,
        0,411,412,3,73,35,0,412,413,1,0,0,0,413,414,6,56,3,0,414,116,1,0,
        0,0,415,417,9,0,0,0,416,415,1,0,0,0,417,418,1,0,0,0,418,419,1,0,
        0,0,418,416,1,0,0,0,419,118,1,0,0,0,12,0,1,2,222,227,241,355,366,
        371,379,399,418,4,2,1,0,2,2,0,6,0,0,2,0,0
    ]

class PatchfileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD_BLOCK_MODE = 1
    CONTENT_MODE = 2

    ADD = 1
    ADD_ASSET = 2
    REMOVE = 3
    REPLACE = 4
    REPLACE_ALL = 5
    SET_VAR = 6
    EXPORT_VAR = 7
    EXEC_PATCHER = 8
    EXEC_PYTHON = 9
    FILENAME = 10
    BEGIN_PATCH = 11
    BEGIN_CONTENT = 12
    FUNCTION = 13
    END = 14
    OPEN_BLOCK = 15
    CLOSE_BLOCK = 16
    INTEGER = 17
    DASH = 18
    PLUS = 19
    EQUALS = 20
    TEXT_BLOCK = 21
    WHITESPACE = 22
    COMMENT = 23
    END_PATCH = 24
    AS_TEXT = 25
    END_CONTENT = 26
    CONTENT_TEXT = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "ADD_BLOCK_MODE", "CONTENT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'-'", "'+'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "ADD_ASSET", "REMOVE", "REPLACE", "REPLACE_ALL", "SET_VAR", 
            "EXPORT_VAR", "EXEC_PATCHER", "EXEC_PYTHON", "FILENAME", "BEGIN_PATCH", 
            "BEGIN_CONTENT", "FUNCTION", "END", "OPEN_BLOCK", "CLOSE_BLOCK", 
            "INTEGER", "DASH", "PLUS", "EQUALS", "TEXT_BLOCK", "WHITESPACE", 
            "COMMENT", "END_PATCH", "AS_TEXT", "END_CONTENT", "CONTENT_TEXT" ]

    ruleNames = [ "ADD", "ADD_ASSET", "REMOVE", "REPLACE", "REPLACE_ALL", 
                  "SET_VAR", "EXPORT_VAR", "EXEC_PATCHER", "EXEC_PYTHON", 
                  "FILENAME", "BEGIN_PATCH", "BEGIN_CONTENT", "FUNCTION", 
                  "END", "OPEN_BLOCK", "CLOSE_BLOCK", "A", "B", "C", "D", 
                  "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
                  "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 
                  "LETTER", "NUMBER", "SPACE", "SLASH", "DOT", "INTEGER", 
                  "DASH", "PLUS", "EQUALS", "TEXT_BLOCK", "WHITESPACE", 
                  "COMMENT", "END_PATCH", "AS_TEXT", "END_CONTENT", "CONTENT_TEXT" ]

    grammarFileName = "PatchfileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


