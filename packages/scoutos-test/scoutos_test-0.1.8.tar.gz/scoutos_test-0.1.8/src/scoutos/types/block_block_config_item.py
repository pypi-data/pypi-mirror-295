# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .block_config_item_number_default_value import BlockConfigItemNumberDefaultValue
from .block_config_item_number_minimum_value import BlockConfigItemNumberMinimumValue
from .block_config_item_number_maximum_value import BlockConfigItemNumberMaximumValue
from .block_config_item_number_value import BlockConfigItemNumberValue
from .prompt import Prompt
from .select_option_item import SelectOptionItem
from .block_config_item_text_long_value import BlockConfigItemTextLongValue


class BlockBlockConfigItem_Boolean(UniversalBaseModel):
    type: typing.Literal["boolean"] = "boolean"
    id: str
    display_name: str
    default_value: typing.Optional[bool] = None
    value: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlockBlockConfigItem_Json(UniversalBaseModel):
    type: typing.Literal["json"] = "json"
    id: str
    display_name: str
    default_value: typing.Optional[str] = None
    value: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlockBlockConfigItem_Number(UniversalBaseModel):
    type: typing.Literal["number"] = "number"
    id: str
    display_name: str
    default_value: typing.Optional[BlockConfigItemNumberDefaultValue] = None
    minimum_value: typing.Optional[BlockConfigItemNumberMinimumValue] = None
    maximum_value: typing.Optional[BlockConfigItemNumberMaximumValue] = None
    value: typing.Optional[BlockConfigItemNumberValue] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlockBlockConfigItem_Prompt(UniversalBaseModel):
    type: typing.Literal["prompt"] = "prompt"
    id: str
    display_name: str
    value: typing.Optional[typing.List[Prompt]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlockBlockConfigItem_Select(UniversalBaseModel):
    type: typing.Literal["select"] = "select"
    id: str
    display_name: str
    options: typing.List[SelectOptionItem]
    selected_option: typing.Optional[int] = None
    value: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlockBlockConfigItem_TextLong(UniversalBaseModel):
    type: typing.Literal["text-long"] = "text-long"
    id: str
    display_name: str
    default_value: typing.Optional[str] = None
    value: typing.Optional[BlockConfigItemTextLongValue] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlockBlockConfigItem_TextShort(UniversalBaseModel):
    type: typing.Literal["text-short"] = "text-short"
    id: str
    display_name: str
    default_value: typing.Optional[str] = None
    value: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


BlockBlockConfigItem = typing.Union[
    BlockBlockConfigItem_Boolean,
    BlockBlockConfigItem_Json,
    BlockBlockConfigItem_Number,
    BlockBlockConfigItem_Prompt,
    BlockBlockConfigItem_Select,
    BlockBlockConfigItem_TextLong,
    BlockBlockConfigItem_TextShort,
]
