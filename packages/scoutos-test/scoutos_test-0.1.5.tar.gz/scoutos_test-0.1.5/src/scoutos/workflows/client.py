# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.req_body_input_value import ReqBodyInputValue
from ..core.request_options import RequestOptions
from ..types.workflow_run_response_streaming import WorkflowRunResponseStreaming
from ..core.jsonable_encoder import jsonable_encoder
import httpx_sse
from ..core.pydantic_utilities import parse_obj_as
import json
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.workflow_run_response_batch import WorkflowRunResponseBatch
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WorkflowsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def execute_stream(
        self,
        workflow_id: str,
        *,
        input: typing.Dict[str, ReqBodyInputValue],
        revision_id: typing.Optional[str] = None,
        session_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[WorkflowRunResponseStreaming]:
        """
        Parameters
        ----------
        workflow_id : str

        input : typing.Dict[str, ReqBodyInputValue]

        revision_id : typing.Optional[str]

        session_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[WorkflowRunResponseStreaming]


        Examples
        --------
        from scoutos import ScoutosApi

        client = ScoutosApi(
            api_key="YOUR_API_KEY",
        )
        response = client.workflows.execute_stream(
            workflow_id="string",
            revision_id="string",
            session_id="string",
            input={"string": 1},
        )
        for chunk in response:
            yield chunk
        """
        with self._client_wrapper.httpx_client.stream(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/execute",
            method="POST",
            params={
                "revision_id": revision_id,
                "session_id": session_id,
            },
            json={
                "input": input,
                "streaming": True,
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _event_source = httpx_sse.EventSource(_response)
                    for _sse in _event_source.iter_sse():
                        try:
                            yield typing.cast(
                                WorkflowRunResponseStreaming,
                                parse_obj_as(
                                    type_=WorkflowRunResponseStreaming,  # type: ignore
                                    object_=json.loads(_sse.data),
                                ),
                            )
                        except:
                            pass
                    return
                _response.read()
                if _response.status_code == 422:
                    raise UnprocessableEntityError(
                        typing.cast(
                            HttpValidationError,
                            parse_obj_as(
                                type_=HttpValidationError,  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def execute(
        self,
        workflow_id: str,
        *,
        input: typing.Dict[str, ReqBodyInputValue],
        revision_id: typing.Optional[str] = None,
        session_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkflowRunResponseBatch:
        """
        Parameters
        ----------
        workflow_id : str

        input : typing.Dict[str, ReqBodyInputValue]

        revision_id : typing.Optional[str]

        session_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkflowRunResponseBatch


        Examples
        --------
        from scoutos import ScoutosApi

        client = ScoutosApi(
            api_key="YOUR_API_KEY",
        )
        client.workflows.execute(
            workflow_id="workflow_id",
            input={"key": 1},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/execute",
            method="POST",
            params={
                "revision_id": revision_id,
                "session_id": session_id,
            },
            json={
                "input": input,
                "streaming": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkflowRunResponseBatch,
                    parse_obj_as(
                        type_=WorkflowRunResponseBatch,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWorkflowsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def execute_stream(
        self,
        workflow_id: str,
        *,
        input: typing.Dict[str, ReqBodyInputValue],
        revision_id: typing.Optional[str] = None,
        session_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[WorkflowRunResponseStreaming]:
        """
        Parameters
        ----------
        workflow_id : str

        input : typing.Dict[str, ReqBodyInputValue]

        revision_id : typing.Optional[str]

        session_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[WorkflowRunResponseStreaming]


        Examples
        --------
        import asyncio

        from scoutos import AsyncScoutosApi

        client = AsyncScoutosApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            response = await client.workflows.execute_stream(
                workflow_id="string",
                revision_id="string",
                session_id="string",
                input={"string": 1},
            )
            async for chunk in response:
                yield chunk


        asyncio.run(main())
        """
        async with self._client_wrapper.httpx_client.stream(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/execute",
            method="POST",
            params={
                "revision_id": revision_id,
                "session_id": session_id,
            },
            json={
                "input": input,
                "streaming": True,
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _event_source = httpx_sse.EventSource(_response)
                    async for _sse in _event_source.aiter_sse():
                        try:
                            yield typing.cast(
                                WorkflowRunResponseStreaming,
                                parse_obj_as(
                                    type_=WorkflowRunResponseStreaming,  # type: ignore
                                    object_=json.loads(_sse.data),
                                ),
                            )
                        except:
                            pass
                    return
                await _response.aread()
                if _response.status_code == 422:
                    raise UnprocessableEntityError(
                        typing.cast(
                            HttpValidationError,
                            parse_obj_as(
                                type_=HttpValidationError,  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def execute(
        self,
        workflow_id: str,
        *,
        input: typing.Dict[str, ReqBodyInputValue],
        revision_id: typing.Optional[str] = None,
        session_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkflowRunResponseBatch:
        """
        Parameters
        ----------
        workflow_id : str

        input : typing.Dict[str, ReqBodyInputValue]

        revision_id : typing.Optional[str]

        session_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkflowRunResponseBatch


        Examples
        --------
        import asyncio

        from scoutos import AsyncScoutosApi

        client = AsyncScoutosApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.workflows.execute(
                workflow_id="workflow_id",
                input={"key": 1},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/execute",
            method="POST",
            params={
                "revision_id": revision_id,
                "session_id": session_id,
            },
            json={
                "input": input,
                "streaming": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkflowRunResponseBatch,
                    parse_obj_as(
                        type_=WorkflowRunResponseBatch,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
