import argparse
import sqlite3
import tempfile
import zipfile

import ytmusicapi


def get_it_song_db(backup: zipfile.ZipFile) -> sqlite3.Connection:
    """Return a connection to an in-memory copy of InnerTune's song database"""
    with tempfile.TemporaryDirectory() as tmp_dir:
        song_db_file = backup.extract("song.db", tmp_dir)
        tmp_song_db = sqlite3.connect(song_db_file)
        song_db = sqlite3.connect(":memory:")
        tmp_song_db.backup(song_db)
        return song_db


def get_it_liked_songs(conn: sqlite3.Connection) -> dict[str, str]:
    """Return a mapping of liked song IDs to titles from InnerTune's song.db"""
    return dict(conn.execute("SELECT id, title FROM song WHERE liked > 0"))


def get_ytm_liked_songs(ytm_api: ytmusicapi.YTMusic) -> set[str]:
    """Return a set of liked song IDs from YouTube Music"""
    liked_music_playlist = ytm_api.get_playlist("LM", None)
    liked_tracks = liked_music_playlist["tracks"]
    return {track["videoId"] for track in liked_tracks}


class _ArgsNamespace(argparse.Namespace):
    backup: zipfile.ZipFile
    ytm_api: ytmusicapi.YTMusic


def main():
    parser = argparse.ArgumentParser(
        description="Add liked songs from InnerTune to YouTube Music likes"
    )
    parser.add_argument(
        "--backup",
        help="Path to backup file exported from InnerTune",
        metavar="FILE",
        required=True,
        type=zipfile.ZipFile,
    )
    parser.add_argument(
        "--credentials",
        dest="ytm_api",
        help="Path to YouTube credentials generated by `ytmusicapi oauth`",
        metavar="FILE",
        required=True,
        type=ytmusicapi.YTMusic,
    )

    args = parser.parse_args(namespace=_ArgsNamespace())

    with args.backup as backup, get_it_song_db(backup) as conn:
        liked_songs = get_it_liked_songs(conn)

    ytm_liked_songs = get_ytm_liked_songs(args.ytm_api)

    for song_id in liked_songs.keys() - ytm_liked_songs:
        print(f"Liking {song_id}: {liked_songs[song_id]}")
        args.ytm_api.rate_song(song_id, "LIKE")


if __name__ == "__main__":
    main()
