spec_id,dependency_graph,conceptual_spec_json,transform_spec_json,model_spec_json,tisane_spec_json,annotate_cvar_spec_json,annotate_transform_spec_json
8cd96d2dc6a04ff7a76b0c2c970008cd,"{
  ""directed"": true,
  ""multigraph"": false,
  ""graph"": {},
  ""nodes"": [
    {
      ""id"": ""ROOT_SPEC_ID""
    },
    {
      ""id"": ""b67ed9caf96a41ed961c739bc9b8199e""
    },
    {
      ""id"": ""56efef418e2e404ba53ffb5c12e19aa7""
    },
    {
      ""id"": ""1e7a518108bd4391a3e3c8f3f71e01a7""
    },
    {
      ""id"": ""7e8bf09d5d8b49fe9357b852ece18cce""
    },
    {
      ""id"": ""b45c42e9a52c472b90f42b35fcd8a777""
    },
    {
      ""id"": ""3934c6ab265744b88bda1d8059356ba4""
    },
    {
      ""id"": ""4fb3f76c54f1451cbcee9b936a959e2e""
    },
    {
      ""id"": ""5a62e87744d644abad88f93613ca9f0e""
    },
    {
      ""id"": ""48895f47533c44b2ad71e2aac9c4ffa3""
    },
    {
      ""id"": ""cd20bdca415944c1bed053ca628b7e1d""
    },
    {
      ""id"": ""cc6d9c6f9dae4b678625fe406d695463""
    },
    {
      ""id"": ""57080380684246b896467ec5e6b0bf5e""
    },
    {
      ""id"": ""ea89a1bef4304878b13fde06c2120764""
    },
    {
      ""id"": ""7686eb76094d4b57b65fca9577d3bd79""
    },
    {
      ""id"": ""333e4a92588a4d0db24659825cec159c""
    },
    {
      ""id"": ""470def9185454f7b8d01800ea2690bed""
    },
    {
      ""id"": ""1e7c202244904cdea043147439659ff1""
    }
  ],
  ""links"": [
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""b67ed9caf96a41ed961c739bc9b8199e""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""cc6d9c6f9dae4b678625fe406d695463""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""57080380684246b896467ec5e6b0bf5e""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""ea89a1bef4304878b13fde06c2120764""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""7686eb76094d4b57b65fca9577d3bd79""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""cd20bdca415944c1bed053ca628b7e1d""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""1e7a518108bd4391a3e3c8f3f71e01a7""
    },
    {
      ""source"": ""ROOT_SPEC_ID"",
      ""target"": ""56efef418e2e404ba53ffb5c12e19aa7""
    },
    {
      ""source"": ""1e7a518108bd4391a3e3c8f3f71e01a7"",
      ""target"": ""7e8bf09d5d8b49fe9357b852ece18cce""
    },
    {
      ""source"": ""1e7a518108bd4391a3e3c8f3f71e01a7"",
      ""target"": ""56efef418e2e404ba53ffb5c12e19aa7""
    },
    {
      ""source"": ""7e8bf09d5d8b49fe9357b852ece18cce"",
      ""target"": ""b45c42e9a52c472b90f42b35fcd8a777""
    },
    {
      ""source"": ""b45c42e9a52c472b90f42b35fcd8a777"",
      ""target"": ""3934c6ab265744b88bda1d8059356ba4""
    },
    {
      ""source"": ""b45c42e9a52c472b90f42b35fcd8a777"",
      ""target"": ""48895f47533c44b2ad71e2aac9c4ffa3""
    },
    {
      ""source"": ""cd20bdca415944c1bed053ca628b7e1d"",
      ""target"": ""7e8bf09d5d8b49fe9357b852ece18cce""
    },
    {
      ""source"": ""cd20bdca415944c1bed053ca628b7e1d"",
      ""target"": ""1e7a518108bd4391a3e3c8f3f71e01a7""
    },
    {
      ""source"": ""cd20bdca415944c1bed053ca628b7e1d"",
      ""target"": ""56efef418e2e404ba53ffb5c12e19aa7""
    },
    {
      ""source"": ""57080380684246b896467ec5e6b0bf5e"",
      ""target"": ""1e7a518108bd4391a3e3c8f3f71e01a7""
    },
    {
      ""source"": ""57080380684246b896467ec5e6b0bf5e"",
      ""target"": ""56efef418e2e404ba53ffb5c12e19aa7""
    },
    {
      ""source"": ""7686eb76094d4b57b65fca9577d3bd79"",
      ""target"": ""333e4a92588a4d0db24659825cec159c""
    },
    {
      ""source"": ""7686eb76094d4b57b65fca9577d3bd79"",
      ""target"": ""56efef418e2e404ba53ffb5c12e19aa7""
    }
  ]
}",,,,,,
ROOT_SPEC_ID,,,"{""spec_name"": ""ROOT""}",,,,
b67ed9caf96a41ed961c739bc9b8199e,,,"{""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Apply dummy encoding to the tooth class"", ""spec_name"": ""encode_tooth_class"", ""trans_verb"": [""derive""], ""code"": ""df = pd.get_dummies(df, columns=['tooth_class'])"", ""rationale"": ""Apply dummy encoding to the tooth class"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""tooth_class""], ""tooth_class_Anterior""], [[""tooth_class""], ""tooth_class_Posterior""], [[""tooth_class""], ""tooth_class_Premolar""]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}]}",,,,
56efef418e2e404ba53ffb5c12e19aa7,,,"{""time_stamp"": ""08-13-2024 at 06:10:08 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Convert number of AMTL larger or equal to 1 as  1"", ""spec_name"": ""derive_num_amtl_01"", ""trans_verb"": [""derive""], ""code"": ""df['num_amtl_01'] = df['num_amtl'].apply(lambda x: 1 if x >= 1 else 0)"", ""rationale"": ""Convert it to 0 or 1 for logistic regression model"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""num_amtl""], ""num_amtl_01""]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}, {""dependencies"": [""1e7a518108bd4391a3e3c8f3f71e01a7""], ""condition"": """"}, {""dependencies"": [""cd20bdca415944c1bed053ca628b7e1d""], ""condition"": """"}, {""dependencies"": [""57080380684246b896467ec5e6b0bf5e""], ""condition"": """"}, {""dependencies"": [""7686eb76094d4b57b65fca9577d3bd79""], ""condition"": """"}], ""annotator"": null}",,,,
1e7a518108bd4391a3e3c8f3f71e01a7,,,"{""time_stamp"": ""08-13-2024 at 06:07:35 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""filter age above 55"", ""spec_name"": ""filter_age"", ""trans_verb"": [""filter""], ""code"": ""df = df[df['age'] <= 55]"", ""rationale"": ""Filter the outliers of age"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""age""], """"]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}, {""dependencies"": [""cd20bdca415944c1bed053ca628b7e1d""], ""condition"": """"}, {""dependencies"": [""57080380684246b896467ec5e6b0bf5e""], ""condition"": """"}], ""annotator"": null}",,,,
7e8bf09d5d8b49fe9357b852ece18cce,,,"{""time_stamp"": ""06-13-2024 at 09:42:15 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Derive gender through estimate of sex"", ""spec_name"": ""derive_gender"", ""trans_verb"": [""derive""], ""code"": ""df['gender'] = df['prob_male'].apply(lambda x: 1 if x >= 0.5 else 0)"", ""rationale"": ""Classify probability higher or equal to 0.5 as male and the rest as female"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""prob_male""], ""gender""]], ""branches"": [{""dependencies"": [""1e7a518108bd4391a3e3c8f3f71e01a7""], ""condition"": """"}, {""dependencies"": [""cd20bdca415944c1bed053ca628b7e1d""], ""condition"": """"}], ""annotator"": null}",,,,
b45c42e9a52c472b90f42b35fcd8a777,,,"{""time_stamp"": ""06-13-2024 at 09:42:15 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Classify genus as 0 or 1"", ""spec_name"": ""map_genus_to_01"", ""trans_verb"": [""derive""], ""code"": ""def map_genus_to_01(genus):\n    if genus in ['Papio', 'Pan', 'Pongo']:\n        return 0\n    elif genus == 'Homo sapiens':\n        return 1\n\ndf['genus_01'] = df['genus'].apply(map_genus_to_01)"", ""rationale"": ""Classify 'Homo sapiens' as 1 and 'Papio', 'Pan', 'Pongo' as 0"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""genus""], ""genus_01""]], ""branches"": [{""dependencies"": [""7e8bf09d5d8b49fe9357b852ece18cce""], ""condition"": """"}], ""annotator"": null}",,,,
3934c6ab265744b88bda1d8059356ba4,,,"{""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Classify specimen origination to three categories"", ""spec_name"": ""map_pop_to_class"", ""trans_verb"": [""derive""], ""code"": ""def map_pop_to_class(pop):\n    if pop in ['Native Californian','Alaska','Yaghan','Fuegian']:\n        return 0\n    elif pop in ['East Africa','Ebolwa','Afalou','West Africa','Khoi-San','French Cameroons','Khoi-San or bushman half-caste','Central Africa','South Africa']:\n        return 1\n    else:\n        return 2\ndf['pop_class'] = df['pop'].apply(map_pop_to_class)\ndf = pd.get_dummies(df, columns=['pop_class'])"", ""rationale"": ""Classify the specimen origination by American region, African region and others"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""pop""], ""pop_class_0""], [[""pop""], ""pop_class_1""], [[""pop""], ""pop_class_2""]], ""branches"": [{""dependencies"": [""b45c42e9a52c472b90f42b35fcd8a777""], ""condition"": """"}]}",,,,
66c412b5fb114e7e9e16a79efec062fa,,"{""time_stamp"": ""06-13-2024 at 09:42:15 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""gender"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce""], ""column_rationales"": {""\ud83d\udfe8 age"": ""We need to account for the effects of age as control variable"", ""\ud83d\udfe8 sockets"": ""We need to account for the effects of sockets as control variable"", ""\ud83d\udfe9 gender"": ""We need to account for the effects of gender  as control variable"", ""\ud83d\udfe8 prob_male"": ""Instead of classifying it to 0 or 1, we can keep the original probability. This is original estimate of sex""}, ""interaction"": false, ""rationale"": ""We need to take account of the effects of gender"", ""on"": """", ""random_effect"": false, ""annotator"": null}",,,,,
4fb3f76c54f1451cbcee9b936a959e2e,,,,"{""time_stamp"": ""06-14-2024 at 06:51:03 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Logistic Regression"", ""spec_name"": ""logistic_regression"", ""rationale"": ""Build logistic regression model based on the independent variable genus_01(Homo sapiens or others) and control variables age, gender and sockets"", ""dependencies"": [], ""code"": ""logreg = smf.logit(formula = 'num_amtl_01 ~ genus_01 + age + sockets + tooth_class_Anterior + tooth_class_Posterior + tooth_class_Premolar + gender + pop_class_0 + pop_class_1 + pop_class_2 + pop_class_3',\n                       data = df).fit()"", ""associated_columns_derived_spec_ids"": [""ROOT_SPEC_ID"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""cd20bdca415944c1bed053ca628b7e1d"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""7e8bf09d5d8b49fe9357b852ece18cce"", ""3934c6ab265744b88bda1d8059356ba4"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""b67ed9caf96a41ed961c739bc9b8199e""], ""associated_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 sockets""], ""associated_columns_derived"": [""\ud83d\udfe9 num_amtl_01"", ""\ud83d\udfe9 genus_01"", ""\ud83d\udfe9 gender"", ""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Posterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 pop_class_3""], ""associated_columns_leaf_spec_ids"": [""56efef418e2e404ba53ffb5c12e19aa7"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""7e8bf09d5d8b49fe9357b852ece18cce"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""associated_specified_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4""], ""annotator"": null}",,,
76c1580a16004a768469981ee8241314,,"{""time_stamp"": ""06-14-2024 at 12:46:53 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""age"", ""final_columns_derived_spec_ids"": [""57080380684246b896467ec5e6b0bf5e"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age""], ""final_columns_derived"": [""\ud83d\udfe9 normalized_age""], ""final_columns_leaf_spec_ids"": [""57080380684246b896467ec5e6b0bf5e""], ""column_rationales"": {""\ud83d\udfe8 age"": ""We need to account for the effects of age as control variable"", ""\ud83d\udfe9 normalized_age"": ""normalized age variable""}, ""interaction"": false, ""rationale"": ""We need to account for the effects of age as control variable"", ""on"": """", ""random_effect"": false, ""annotator"": null}",,,,,
2737e355011d4f84b0f0ba5930997309,,"{""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {""\ud83d\udfe8 sockets"": ""We need to account for the effects of sockets as control variable""}, ""interaction"": false, ""rationale"": ""We need to account for the effects of sockets as control variable"", ""on"": """", ""random_effect"": false}",,,,,
334edc20f2874214adc50e7eeb7764a0,,"{""time_stamp"": ""06-14-2024 at 12:47:21 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""tooth class type"", ""final_columns_derived_spec_ids"": [""b67ed9caf96a41ed961c739bc9b8199e"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 tooth_class_Posterior""], ""final_columns_leaf_spec_ids"": [""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e""], ""column_rationales"": {""\ud83d\udfe9 tooth_class_Anterior"": ""This is Anterior tooth class column"", ""\ud83d\udfe9 tooth_class_Premolar"": ""This is Premolar tooth class column"", ""\ud83d\udfe9 tooth_class_Posterior"": ""This is Posterior tooth class column""}, ""interaction"": false, ""rationale"": ""We need to account for the effects of tooth class as control variable"", ""on"": """", ""random_effect"": false, ""annotator"": null}",,,,,
9d00db855cdf480fb36dbf193302d8c3,,"{""time_stamp"": ""06-14-2024 at 12:48:11 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""specimen origination"", ""final_columns_derived_spec_ids"": [""1e7a518108bd4391a3e3c8f3f71e01a7"", ""ea89a1bef4304878b13fde06c2120764"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""cd20bdca415944c1bed053ca628b7e1d"", ""ROOT_SPEC_ID"", ""7e8bf09d5d8b49fe9357b852ece18cce"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3"", ""\ud83d\udfe9 from_specified_regions""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""ea89a1bef4304878b13fde06c2120764""], ""column_rationales"": {""\ud83d\udfe9 pop_class_0"": ""American region specimen origination"", ""\ud83d\udfe9 pop_class_1"": ""African region specimen origination"", ""\ud83d\udfe9 pop_class_2"": ""other specimen origination"", ""\ud83d\udfe9 pop_class_3"": ""Asian region specimen origination"", ""\ud83d\udfe9 from_specified_regions"": ""binary variable for whether the specimen is from the specified origin""}, ""interaction"": false, ""rationale"": ""There are too many different specimen regions. So it's reasonable to classify it into different large regions"", ""on"": """", ""random_effect"": false, ""annotator"": null}",,,,,
5a62e87744d644abad88f93613ca9f0e,,,,"{""time_stamp"": ""06-14-2024 at 01:54:01 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Logistic Regression "", ""spec_name"": ""logistic_regression"", ""rationale"": ""Compared with version 1, this one uses the original probability of male and also does not include the specimen origination region. Because it's difficult to classify more than 10 different specimen regions."", ""dependencies"": [], ""code"": ""logreg = smf.logit(formula = 'amtl_rate~ genus_01 + age + sockets + tooth_class_Anterior + tooth_class_Posterior + tooth_class_Premolar + prob_male',\n                       data = df).fit()"", ""associated_columns_derived_spec_ids"": [""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cc6d9c6f9dae4b678625fe406d695463"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""cd20bdca415944c1bed053ca628b7e1d"", ""ROOT_SPEC_ID"", ""7e8bf09d5d8b49fe9357b852ece18cce"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""associated_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 sockets"", ""\ud83d\udfe8 prob_male""], ""associated_columns_derived"": [""\ud83d\udfe9 genus_01"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Posterior"", ""\ud83d\udfe9 amtl_rate""], ""associated_columns_leaf_spec_ids"": [""b45c42e9a52c472b90f42b35fcd8a777"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""cc6d9c6f9dae4b678625fe406d695463""], ""associated_specified_spec_ids"": [], ""annotator"": null}",,,
48895f47533c44b2ad71e2aac9c4ffa3,,,"{""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Classify specimen origination into 4 groups: American, African, Asian and others"", ""spec_name"": ""map_pop_to_class_2"", ""trans_verb"": [""derive""], ""code"": ""def map_pop_to_class(pop):\n    if pop in ['Native Californian','Alaska','Yaghan','Fuegian']:\n        return 0\n    elif pop in ['East Africa','Ebolwa','Afalou','West Africa','Khoi-San','French Cameroons','Khoi-San or bushman half-caste','Central Africa','South Africa']:\n        return 1\n    elif pop in ['Borneo','Australian aboriginie','Buriat','Tasmanien']:\n        return 3\n    else:\n        return 2\ndf['pop_class'] = df['pop'].apply(map_pop_to_class)\ndf = pd.get_dummies(df, columns=['pop_class'])"", ""rationale"": ""Classify specimen origination into 4 groups: American, African, Asian and others"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""pop""], ""pop_class_0""], [[""pop""], ""pop_class_1""], [[""pop""], ""pop_class_2""], [[""pop""], ""pop_class_3""]], ""branches"": [{""dependencies"": [""b45c42e9a52c472b90f42b35fcd8a777""], ""condition"": """"}]}",,,,
cd20bdca415944c1bed053ca628b7e1d,,,"{""time_stamp"": ""08-13-2024 at 05:52:38 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""filter the age to keep only data within two standard deviation in order to remove outliers"", ""spec_name"": ""filter_age_2std"", ""trans_verb"": [""filter""], ""code"": ""mean_value = df['age'].mean()\nstd_value = df['age'].std()\ndf = df[(df['age'] >= mean_value - 2 * std_value) & (df['age'] <= mean_value + 2 * std_value)]"", ""rationale"": ""filter the age to keep only data within two standard deviation in order to remove outliers"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""age""], """"]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}], ""annotator"": null}",,,,
1d56865b57934ef186e0741d4e9769fb,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The current transformations operationalize the conceptual variable \""specimen origination\"" by grouping the 'pop' column into different classes and then creating dummy variables for these classes. Some of the transformations are redundant as they return the same derived column. One alternative way to operationalize the variable could be by creating a binary column that indicates whether a specimen is from a specific region or not. For example, we can create a binary column that indicates whether a specimen is from 'Native Californian', 'Alaska', 'Yaghan', or 'Fuegian' region."", ""annotator"": null, ""code"": ""df['from_specified_regions'] = df['pop'].apply(lambda x: 1 if x in [\n    'Native Californian', 'Alaska', 'Yaghan', 'Fuegian'] else 0)\n"", ""output_col"": ""from_specified_regions"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
ee8ebc002c2c4b30a949975a482ea9b1,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations have tried to map the 'pop' column to different classes based on the region the specimen originates from. They have also created one-hot encoded features for these classes. Another transformation has tried to create a binary feature indicating if the specimen is from a specified list of regions. \n\nHowever, one potential transformation that has not been considered yet is mapping the 'pop' column directly to numerical codes. This would preserve the information about the specimen's origin in a single feature, rather than spreading it across multiple one-hot encoded features. This transformation would be useful for models that can handle categorical features represented as numerical codes, such as decision trees and random forests."", ""annotator"": null, ""code"": ""df['pop_code'] = df['pop'].astype('category').cat.codes\n"", ""output_col"": ""pop_code"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
7826ca34f94440878c281e4a19ae2af1,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We want to operationalize Specimen origination based on the available data. The currently specified transforms consider mapping the population to different classes based on the regions they belong to and creating dummy variables. Another way to consider operationalizing the specimen origination could be by encoding the 'pop' column using frequency encoding. This would give a numeric representation of the frequency of each region in the dataset, which could be useful for subsequent analysis."", ""annotator"": null, ""code"": ""freq_encode = df['pop'].value_counts(normalize=True)\ndf['pop_freq_encode'] = df['pop'].map(freq_encode)\n"", ""output_col"": ""pop_freq_encode"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
2c22da0211a94b13a83e59c013423870,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Unsure if it makes sense to group the regions based on the average age of the specimens in each region."", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""The existing transformations have considered various aspects of the data. They have encoded the 'pop' column using one-hot encoding, frequency encoding, and label encoding. They have also created a binary column to indicate if the specimen is from a specific set of regions. Here, we can consider another transformation where we group the regions based on the average age of the specimens in each region. We can then create a new column that indicates the age group of each region."", ""annotator"": null, ""code"": ""pop_age_group = df.groupby('pop')['age'].mean().apply(lambda x: 'young' if \n    x < 20 else 'middle' if x < 40 else 'old')\ndf['pop_age_group'] = df['pop'].map(pop_age_group)\n"", ""output_col"": ""pop_age_group"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Unsure"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
c769471763e7457598b7d36d6aaeff04,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Not sure if it makes sense to groups each 'pop' into 'young', 'middle', or 'old' based on the median age. Why not using the age/age group directly, instead of grouping them into pop?"", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""We want to operationalize Specimen origination based on the available data. The currently specified transforms consider mapping the 'pop' to certain classes, frequency encoding, and creating new features based on the mean age of each 'pop'. Another way to consider operationalizing the Specimen origination could be based on the median age of each 'pop'. We can create a new feature that groups each 'pop' into 'young', 'middle', or 'old' based on the median age."", ""annotator"": null, ""code"": ""pop_age_group = df.groupby('pop')['age'].median().apply(lambda x: 'young' if\n    x < 20 else 'middle' if x < 40 else 'old')\ndf['pop_age_group_median'] = df['pop'].map(pop_age_group)\n"", ""output_col"": ""pop_age_group_median"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Unsure"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
5c0c1dad795548cea0cfe440be3a038c,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations have considered various ways to operationalize the conceptual variable 'specimen origination'. They have used one-hot encoding, frequency encoding, and categorization based on age. However, one potential transformation that has not been considered is the use of label encoding. This method can preserve the information about the unique categories within the 'pop' column while transforming them into a numerical format suitable for subsequent analysis and modeling."", ""annotator"": null, ""code"": ""df['pop_label_encoded'] = df['pop'].astype('category').cat.codes\n"", ""output_col"": ""pop_label_encoded"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
dd82e2a5c2b3409bbbb4c1f4b4bbec0a,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We are trying to operationalize the variable 'specimen origination' based on the available data. The current transformations are considering the region of specimen origin and encoding it in various ways such as one-hot encoding, frequency encoding, and label encoding. They also categorize the regions based on the average and median age of the specimens from those regions. \n\nAnother way to operationalize the variable could be to consider the number of specimens originating from each region. This would provide us with a count of specimens per region which might be useful for subsequent analysis."", ""annotator"": null, ""code"": ""specimen_count_per_region = df['pop'].value_counts()\ndf['specimen_count'] = df['pop'].map(specimen_count_per_region)\n"", ""output_col"": ""specimen_count"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
fb473e50738544f5853d376aee35d653,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""The existing transformations have considered several aspects of the data. They have considered encoding the population region in multiple ways such as one-hot encoding, frequency encoding, and label encoding. They have also considered the age distribution within each population region. However, one aspect that can be considered is the average number of missing teeth per population region. This can provide an additional perspective on the data."", ""annotator"": null, ""code"": ""avg_amtl_per_pop = df.groupby('pop')['num_amtl'].mean()\ndf['avg_amtl_per_pop'] = df['pop'].map(avg_amtl_per_pop)\n"", ""output_col"": ""avg_amtl_per_pop"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
9fe8c33e3eb84a83a6ee94dd1262beaa,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""The existing transformations attempt to operationalize the conceptual variable \""Specimen origination\"" in various ways, including one-hot encoding of the population class, frequency encoding, label encoding, and deriving new features based on group statistics. However, one potential transformation that has not been implemented yet is the calculation of the proportion of male specimens in each population. This could provide additional insights into the sex distribution in different populations, which might be relevant for the research question."", ""annotator"": null, ""code"": ""male_proportion = df.groupby('pop')['prob_male'].mean()\ndf['male_proportion_per_pop'] = df['pop'].map(male_proportion)\n"", ""output_col"": ""male_proportion_per_pop"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
dbd86883cd6949838ecd30f73bfecf08,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""The existing transformations have operationalized the conceptual variable \""Specimen origination\"" in several ways including mapping the 'pop' variable to different classes, encoding the 'pop' variable, creating a new variable to indicate if the specimen is from specified regions, grouping the 'pop' variable based on the average and median age, counting the number of specimens per region, calculating the average number of antemortem tooth loss (AMTL) per population, and calculating the proportion of males per population. \n\nAn alternative transformation could be to create a variable that represents the average number of observable sockets that could be scored for missing teeth per population. This would provide additional information about the average dental health of the population from which the specimen originates."", ""annotator"": null, ""code"": ""avg_sockets_per_pop = df.groupby('pop')['sockets'].mean()\ndf['avg_sockets_per_pop'] = df['pop'].map(avg_sockets_per_pop)\n"", ""output_col"": ""avg_sockets_per_pop"", ""associated_cvar_spec_id"": ""db80cdaa6eee4cd4ba2bf258a710ffdf"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Specimen origination"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 pop_class_0"", ""\ud83d\udfe9 pop_class_1"", ""\ud83d\udfe9 pop_class_2"", ""\ud83d\udfe9 pop_class_3""], ""final_columns_leaf_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""3934c6ab265744b88bda1d8059356ba4"", ""48895f47533c44b2ad71e2aac9c4ffa3"", ""48895f47533c44b2ad71e2aac9c4ffa3""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
405c4916c2f44924922f83d635a6fbff,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The current transformation directly uses the 'sockets' column from the dataframe. Another way to represent the number of sockets could be to calculate the ratio of the number of missing teeth to the number of sockets for each specimen. This would provide a normalized measure of tooth loss that could be more comparable across different specimens."", ""annotator"": null, ""code"": ""df['socket_tooth_ratio'] = df['num_amtl'] / df['sockets']\n"", ""output_col"": ""socket_tooth_ratio"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
137c2c1d7e464e74857d819dd593bbb0,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations consider the direct use of the 'sockets' column and the ratio of number of missing teeth to sockets. Another possible transformation could be to create a new feature that represents the proportion of missing teeth to total sockets for each genus. This could provide a more direct comparison of AMTL rates across genera, which can be useful for the research question."", ""annotator"": null, ""code"": ""df_genus_group = df.groupby('genus')\ndf['genus_amtl_rate'] = df_genus_group['num_amtl'].transform('sum'\n    ) / df_genus_group['sockets'].transform('sum')\n"", ""output_col"": ""genus_amtl_rate"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
19ea10d1c6734b8a942eff7a451395bb,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations consider the number of sockets directly, the ratio of missing teeth to sockets, and the rate of AMTL across the different genera. Another possible transformation could be to calculate the average number of sockets across different tooth classes for each genus. This would give us an understanding of the average number of sockets that each genus has for each tooth class."", ""annotator"": null, ""code"": ""df_genus_tooth_class_group = df.groupby(['genus', 'tooth_class'])\ndf['avg_sockets_genus_tooth_class'] = df_genus_tooth_class_group['sockets'\n    ].transform('mean')\n"", ""output_col"": ""avg_sockets_genus_tooth_class"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
19801f2d0e1d4fbdb87af8577a55f6b7,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The current transformations operationalize the conceptual variable \""Number of sockets\"" in various ways such as direct use, calculating ratios, and calculating averages within certain groups. Another way to operationalize the variable could be to calculate the standard deviation of sockets within each genus group. This would provide a measure of how much the number of sockets varies within each genus, which could be useful in subsequent analysis and modeling."", ""annotator"": null, ""code"": ""df_genus_group = df.groupby('genus')\ndf['std_sockets_genus'] = df_genus_group['sockets'].transform('std')\n"", ""output_col"": ""std_sockets_genus"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
cfc7070870124d04b493fa8c52d24639,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The current transformations consider both the raw number of sockets and various ratios and statistics related to the number of sockets within different groupings of the data. Another possible transformation could be to create a binary variable indicating whether or not the number of sockets for a given specimen is above or below the average number of sockets across all specimens. This could provide a simple way to differentiate between specimens with a high or low number of sockets."", ""annotator"": null, ""code"": ""avg_sockets = df['sockets'].mean()\ndf['above_avg_sockets'] = df['sockets'].apply(lambda x: 1 if x >\n    avg_sockets else 0)\n"", ""output_col"": ""above_avg_sockets"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
73f5c942f7174613b89b021a93d0c65c,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations have considered the number of sockets in relation to other variables such as the number of missing teeth, the genus, and tooth class. They have also considered the standard deviation of sockets per genus and whether the number of sockets is above average. Another way to operationalize the number of sockets could be to consider the ratio of the number of sockets to the age of the specimen. This could provide insight into the rate of tooth loss over time."", ""annotator"": null, ""code"": ""df['sockets_age_ratio'] = df['sockets'] / df['age']\n"", ""output_col"": ""sockets_age_ratio"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
275ac742ac884f2993ce417f95e293f2,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""The current transformations consider the number of sockets in relation to missing teeth, genus, tooth class, and age. However, we can also consider the relationship between the number of sockets and the sex of the specimen. It might be interesting to see if there are any differences in the number of sockets between males and females."", ""annotator"": null, ""code"": ""df_sex_group = df.groupby('prob_male')\ndf['avg_sockets_sex'] = df_sex_group['sockets'].transform('mean')\n"", ""output_col"": ""avg_sockets_sex"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
b3003ac30d88415f9b9468e0036a16c8,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""No"", ""rationale"": ""The current transformations are already capturing the number of sockets in various ways such as the ratio of number of sockets to age, average number of sockets by sex, and whether the number of sockets is above average. One potential transformation that has not been considered yet is the ratio of number of sockets to the standard deviation of age, which can capture the variability of the number of sockets relative to the age variability."", ""annotator"": null, ""code"": ""df['sockets_stdev_age_ratio'] = df['sockets'] / df['stdev_age']\n"", ""output_col"": ""sockets_stdev_age_ratio"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
6dbed78c910549058a35117ab25b89ae,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""Given the dataset and the conceptual variable, we have already considered transformations such as socket to tooth ratio, genus AMTL rate, average sockets by genus and tooth class, standard deviation sockets by genus, above average sockets, sockets to age ratio, average sockets by sex, and sockets to standard deviation age ratio. \n\nAnother transformation that can be considered is the ratio of the number of sockets to the probability of the specimen being male. This could provide insights into whether there is a correlation between the sex of the specimen and the number of sockets."", ""annotator"": null, ""code"": ""df['sockets_prob_male_ratio'] = df['sockets'] / df['prob_male']\n"", ""output_col"": ""sockets_prob_male_ratio"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
b343fb86477049a5bdf75b81dd56a53c,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations have made use of the 'sockets' column in various ways, such as creating ratios with other variables, creating group-wise averages and standard deviations, and creating binary variables based on whether the number of sockets is above the average. However, one potential transformation that has not been done yet is to create a variable that represents the difference between the number of sockets and the number of antemortem tooth loss (AMTL). This could be a meaningful variable as it represents the number of remaining teeth in the specimen, which could potentially be a good predictor for the model."", ""annotator"": null, ""code"": ""df['remaining_teeth'] = df['sockets'] - df['num_amtl']\n"", ""output_col"": ""remaining_teeth"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
e2ba27c440964bd29676adc188d8cbd7,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""Based on the provided transformations, the number of sockets has been operationalized in various ways such as the ratio of sockets to age, standard deviation of age, and probability of being male, as well as the number of remaining teeth after accounting for AMTL. Another potential way to operationalize the number of sockets could be to calculate the ratio of the number of sockets to the total number of AMTL and remaining teeth. This would provide an insight into the proportion of total teeth that were sockets."", ""annotator"": null, ""code"": ""df['sockets_total_teeth_ratio'] = df['sockets'] / (df['num_amtl'] + df[\n    'sockets'])\n"", ""output_col"": ""sockets_total_teeth_ratio"", ""associated_cvar_spec_id"": ""40cf2354541c4e6eaf444b810b185260"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Number of sockets"", ""final_columns_derived_spec_ids"": [], ""final_columns_orig"": [""\ud83d\udfe8 sockets""], ""final_columns_derived"": [], ""final_columns_leaf_spec_ids"": [], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
6e8291b0cd8c4739a5ef093bd281a89c,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations already consider the age as a variable directly and also in terms of the lower limit of age using the standard deviation. Additionally, they also consider the age in a grouped dataframe by the specimen. Another way to consider age could be the upper limit of age using the standard deviation."", ""annotator"": null, ""code"": ""df['age_max'] = df['age'] + 1.96 * df['stdev_age']\n"", ""output_col"": ""age_max"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
968b01dcfe6f4df6883a051c5d4c7279,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations consider the age of the specimen as is, and also create new variables 'age_min' and 'age_max' which represent the lower and upper bounds of the age estimate. They also group data by specimen and aggregate age, standard deviation of age, and other relevant variables. Another way to consider operationalizing age could be to categorize the age into different age groups (e.g., young, middle-aged, old). This might help in understanding the effect of age in different life stages on the outcome variable."", ""annotator"": null, ""code"": ""bins = [0, 20, 40, 60, 80]\nlabels = ['Young', 'YoungAdult', 'MiddleAged', 'Old']\ndf['age_group'] = pd.cut(df['age'], bins=bins, labels=labels)\n"", ""output_col"": ""age_group"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
70935d37a21044bc94fcc346d9a9c346,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We want to operationalize Age of specimen based on the available data. The currently specified transforms consider using the standard deviation to create an age range, grouping by specimen to get the data at a specimen level, and binning the age into categories amongst other decisions. Another way to consider calculating the age could be based on a normalized age which scales the age between 0 and 1. This could be useful in subsequent analysis where we need all the variables to be on the same scale."", ""annotator"": null, ""code"": ""df['normalized_age'] = (df['age'] - df['age'].min()) / (df['age'].max() -\n    df['age'].min())\n"", ""output_col"": ""normalized_age"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
ccb52e68c7f943d8bd2485ca6bfa6e9d,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""No"", ""rationale"": ""We want to operationalize Age of specimen based on the available data. The currently specified transforms consider the age directly, age with standard deviation, grouping by specimen to get unique age, age groups and normalized age amongst other decisions. Another way to consider calculating the age could be based on a weighted age which is age multiplied by the probability of the specimen being male. This could be interesting as it could potentially highlight any patterns in the age of male specimens."", ""annotator"": null, ""code"": ""df['weighted_age'] = df['age'] * df['prob_male']\n"", ""output_col"": ""weighted_age"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
fa9eed1dc9004f709f449be21382bd90,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The currently specified transformations consider the gender of the specimen based on the probability of being male. However, these transformations do not consider the possibility of the specimen being female. An alternative way to operationalize the gender of the specimen could be to create a new binary variable that indicates if the specimen is likely to be female (probability of being male < 0.5)."", ""annotator"": null, ""code"": ""df['likely_female'] = df['prob_male'].apply(lambda x: 1 if x < 0.5 else 0)\n"", ""output_col"": ""likely_female"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
7e86477a1b4744cebc68566496ce73ca,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We want to operationalize the gender of the specimen based on the available data. The currently specified transforms consider the probability of the specimen being male and use that to create a gender column, amongst other decisions. However, another way to consider operationalizing the gender of the specimen could be to create a binary variable indicating whether the specimen is likely male, by considering specimens with a probability of being male greater than 0.5 as likely male."", ""annotator"": null, ""code"": ""df['likely_male'] = df['prob_male'].apply(lambda x: 1 if x > 0.5 else 0)\n"", ""output_col"": ""likely_male"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
ee7d65fa92254163b54688e721872f17,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We want to operationalize Gender of specimen based on the available data. The currently specified transforms consider converting the probability of being male to a binary gender variable based on a threshold, grouping by specimen id to get the data at a specimen level, etc. Another way to consider calculating the gender of the specimen could be based on a new variable 'gender_uncertain' which is 1 when the probability of being male is exactly 0.5, and 0 otherwise. This will help us identify the specimens for which the gender is uncertain."", ""annotator"": null, ""code"": ""df['gender_uncertain'] = df['prob_male'].apply(lambda x: 1 if x == 0.5 else 0)\n"", ""output_col"": ""gender_uncertain"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
d55f3cce65f341108f953e270c02f005,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We want to operationalize Gender of specimen based on the available data. The currently specified transformations consider the probability of the specimen being male to determine the gender, with various thresholds and conditions. Another way to consider calculating the gender could be based on a combination of the 'prob_male' and 'genus' columns. We can create a new column 'gender_based_on_genus' where if the genus is 'Homo sapiens' and 'prob_male' is greater than or equal to 0.5, the specimen is considered male, else female. For other genera, we can consider them as 'non-human' or 'unknown'."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['genus'] == 'Homo sapiens':\n        return 'Male' if row['prob_male'] >= 0.5 else 'Female'\n    else:\n        return 'Non-human/Unknown'\ndf['gender_based_on_genus'] = df.apply(assign_gender, axis=1)\n"", ""output_col"": ""gender_based_on_genus"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
8af4768716c648aea10f49b3399bdd62,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""We want to operationalize the gender of the specimen based on the available data. The currently specified transformations consider various thresholds on the 'prob_male' column to assign gender. However, another approach could be to consider the 'prob_male' value in conjunction with the 'genus' of the specimen. For instance, if the specimen is of 'Homo sapiens' genus and the 'prob_male' is greater than 0.5, we can assign it as 'Male', otherwise 'Female'. For non-human genera, we can assign the gender as 'Non-human/Unknown'."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['genus'] == 'Homo sapiens':\n        return 'Male' if row['prob_male'] > 0.5 else 'Female'\n    else:\n        return 'Non-human/Unknown'\ndf['gender_based_on_prob_and_genus'] = df.apply(assign_gender, axis=1)\n"", ""output_col"": ""gender_based_on_prob_and_genus"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
2a92b67c596f41fa86a843adb5f44f24,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations have considered the 'prob_male' column to determine the gender of the specimen, with some transformations also taking into account the 'genus' column. These transformations have considered scenarios where the probability of the specimen being male is greater than, less than, or equal to 0.5. They have also considered the scenario where the genus is 'Homo sapiens'. An alternative transformation could be to consider the 'prob_male' column and also the 'age' column. We could create a new variable that takes into account both the probability of the specimen being male and the age of the specimen at death. This could give us a more nuanced view of the gender of the specimen, as it is possible that the gender could influence the age at death."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['prob_male'] > 0.5 and row['age'] > 30:\n        return 'Older Male'\n    elif row['prob_male'] > 0.5 and row['age'] <= 30:\n        return 'Younger Male'\n    elif row['prob_male'] <= 0.5 and row['age'] > 30:\n        return 'Older Female'\n    elif row['prob_male'] <= 0.5 and row['age'] <= 30:\n        return 'Younger Female'\n    else:\n        return 'Unknown'\ndf['gender_age_based'] = df.apply(assign_gender, axis=1)\n"", ""output_col"": ""gender_age_based"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
94b7b3e9ef7644e6b561ae73f8fb9e8c,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""The existing transformations have done a good job at operationalizing the gender of the specimen. They have used the 'prob_male' column and considered the 'genus' and 'age' columns to create different gender-based variables. However, one aspect that hasn't been considered is the 'pop' (region) column. It might be interesting to see if the gender determination varies by region. We can create a transformation that assigns gender based on 'prob_male', but separately for each region."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['prob_male'] > 0.5:\n        return 'Male'\n    else:\n        return 'Female'\ndf['gender_by_region'] = df.groupby('pop').apply(lambda group: group.apply(\n    assign_gender, axis=1)).reset_index(drop=True)\n"", ""output_col"": ""gender_by_region"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
a2e3128654944c66a5412d63ff759b26,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The existing transformations provide a variety of ways to operationalize the gender of the specimen, including using the 'prob_male' column directly, categorizing based on the 'prob_male' value, considering the 'genus' column, and even taking into account the 'age' and 'pop' (region) columns. However, one potential aspect that hasn't been considered is the uncertainty in the gender estimation, represented by the 'stdev_age' column. We can create a new transformation that categorizes specimens as 'Male', 'Female', or 'Uncertain' based on both the 'prob_male' column and the 'stdev_age' column. Specimens with a 'prob_male' value close to 0.5 and a high 'stdev_age' value could be considered 'Uncertain'."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['prob_male'] > 0.6:\n        return 'Male'\n    elif row['prob_male'] < 0.4:\n        return 'Female'\n    elif row['stdev_age'] > 10:\n        return 'Uncertain'\n    else:\n        return 'Male' if row['prob_male'] >= 0.5 else 'Female'\ndf['gender_with_uncertainty'] = df.apply(assign_gender, axis=1)\n"", ""output_col"": ""gender_with_uncertainty"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
32a9b3656fe945b28d71fb91c575a723,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Not sure why we can impute the gender by comparing the num_amtl and sockets"", ""annotator_is_rationale_reasonable"": ""Unsure"", ""rationale"": ""We want to operationalize the gender of the specimen based on the available data. The currently specified transformations consider the probability of the specimen being male to categorize it as male, female, or uncertain. They also consider the genus of the specimen and its age. Another way to consider the gender of the specimen could be based on the tooth class. It is known that tooth loss can vary by gender and tooth type. Hence, we can categorize the specimen as male if the number of missing anterior teeth is greater than the number of missing posterior teeth, and female otherwise. We can also filter on specimens that have more than one missing tooth to ensure that we have enough data to make this determination."", ""annotator"": null, ""code"": ""df = df[df['num_amtl'] > 1]\ndf['gender_based_on_tooth_class'] = df.apply(lambda row: 'Male' if row[\n    'num_amtl'] > row['sockets'] else 'Female', axis=1)\n"", ""output_col"": ""gender_based_on_tooth_class"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Unsure"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
9d46532dfb4141da9f911796e4af64f9,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""I don't think it's reasonable to impute independent variables by dependent variable."", ""annotator_is_rationale_reasonable"": ""No"", ""rationale"": ""We want to operationalize the gender of the specimen based on the available data. The currently specified transforms consider the probability of being male, genus of the specimen, age and tooth class amongst other factors. Another way to consider calculating the gender could be based on the number of missing teeth in the specimen. We can create a new feature that assigns a gender based on the number of missing teeth, where we can assume that a higher number of missing teeth might indicate a male specimen (assuming males might have been more involved in activities that could lead to tooth loss)."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['num_amtl'] > row['sockets'] / 2:\n        return 'Male'\n    else:\n        return 'Female'\ndf['gender_based_on_amtl'] = df.apply(assign_gender, axis=1)\n"", ""output_col"": ""gender_based_on_amtl"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
a5ef9bfe55cc4e6eaffc090967486125,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Not sure why we can impute the gender based on whether they originate Alaska & Yaghan or not"", ""annotator_is_rationale_reasonable"": ""No"", ""rationale"": ""We want to operationalize the gender of the specimen based on the available data. The currently specified transformations consider the probability of the specimen being male, the genus of the specimen, age of the specimen, and the number of antemortem tooth loss (AMTL) amongst other factors. Another way to consider calculating the gender could be based on the genus of the specimen and the region the specimen originates from."", ""annotator"": null, ""code"": ""def assign_gender(row):\n    if row['genus'] == 'Homo sapiens':\n        if row['pop'] in ['Alaska', 'Yaghan']:\n            return 'Male'\n        else:\n            return 'Female'\n    else:\n        return 'Non-human/Unknown'\ndf['gender_based_on_genus_and_region'] = df.apply(assign_gender, axis=1)\n"", ""output_col"": ""gender_based_on_genus_and_region"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Unsure"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [], ""state_col_val_hash"": null}"
48f6e651da8248f9a34bafeaf27ada83,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""To transform the number of amtl into a rate because different specimen have different numbers of teeth. Only comparing the number_amtl cannot show the exact level of amtl"", ""annotator"": null, ""code"": ""df['amtl'] = df['num_amtl'] / df['sockets']"", ""output_col"": ""amtl"", ""associated_cvar_spec_id"": ""8a52eb3026e740beb2265820580c0e9b"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""DV"", ""concept"": ""Degree of tooth loss"", ""final_columns_derived_spec_ids"": [""4ec6d0646f6a46e08b6c163e27ccf424"", ""230f355bbb0c48ef879dff00bc5b0a28"", ""ROOT_SPEC_ID"", ""6fbe6d51abe946cca034c589f2f4f84d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""502b563277d045f9a3a0c658d71ee0ec"", ""08fafcabccc349febc928df837d20b8e"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""94d18387fd3141c99c8fb9f3e6a3ad27"", ""ROOT_SPEC_ID"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 num_amtl_final"", ""\ud83d\udfe9 num_amtl_final_specimen"", ""\ud83d\udfe9 amtl_rate"", ""\ud83d\udfe9 amtl_rate_specimen"", ""\ud83d\udfe9 amtl"", ""\ud83d\udfe9 num_amtl_01""], ""final_columns_leaf_spec_ids"": [""4ec6d0646f6a46e08b6c163e27ccf424"", ""6fbe6d51abe946cca034c589f2f4f84d"", ""502b563277d045f9a3a0c658d71ee0ec"", ""230f355bbb0c48ef879dff00bc5b0a28"", ""94d18387fd3141c99c8fb9f3e6a3ad27"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [""94d18387fd3141c99c8fb9f3e6a3ad27""], ""state_col_val_hash"": ""daf3651a38b4d54a830884eaa989e78ae8288b23f2b37d340019b4aee220ce95""}"
94dfb78e10134207885c94a9c7b6b722,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""To show if the conclusion is consistent when considering age variance"", ""annotator"": null, ""code"": ""df['age_min'] = df['age'] - 1.96 * df['stdev_age']"", ""output_col"": ""age_min"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [""23da517fc2de4ff59a5da242e40a938d""], ""state_col_val_hash"": ""27e3c2a158f68c76f4c2e67eaa078521dcc7c945458adf2384e695063364f89f""}"
ad4f6925b6a246e0927b4653d9efd9a4,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV."", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]"", ""output_col"": ""genus_final"", ""associated_cvar_spec_id"": ""540876e327984e0bb466f1c6adb56841"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""IV"", ""concept"": ""Specimen genus category"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""ROOT_SPEC_ID"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""08fafcabccc349febc928df837d20b8e"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 genus""], ""final_columns_derived"": [""\ud83d\udfe9 genus_01"", ""\ud83d\udfe9 genus_final"", ""\ud83d\udfe9 genus_final_specimen""], ""final_columns_leaf_spec_ids"": [""b45c42e9a52c472b90f42b35fcd8a777"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d""], ""state_col_val_hash"": ""d6a1cc973b231cb13566b56c69112fe0758e100ab0b564656b39cca964246458""}"
c4490ecb925e45da9c03851a257c5a2d,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Although you can sum the amtl for each specimen, grouping by specimen will lose the \""tooth_class\"" feature."", ""annotator_is_rationale_reasonable"": ""No"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV.\nAnalyze at the specimen level."", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]\ndf_grp = df.groupby('specimen')\ndf = df_grp.agg(num_amtl_total=('num_amtl', 'sum'), sockets_total=('sockets', 'sum'), age_specimen=('age', 'first'), stdev_age_specimen=('stdev_age', 'first'), prob_male_specimen=('prob_male', 'first'), genus_final_specimen=('genus_final', 'first')).reset_index()"", ""output_col"": ""genus_final_specimen"", ""associated_cvar_spec_id"": ""540876e327984e0bb466f1c6adb56841"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""IV"", ""concept"": ""Specimen genus category"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""ROOT_SPEC_ID"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""08fafcabccc349febc928df837d20b8e"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 genus""], ""final_columns_derived"": [""\ud83d\udfe9 genus_01"", ""\ud83d\udfe9 genus_final"", ""\ud83d\udfe9 genus_final_specimen""], ""final_columns_leaf_spec_ids"": [""b45c42e9a52c472b90f42b35fcd8a777"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""08fafcabccc349febc928df837d20b8e""], ""state_col_val_hash"": ""1e66ac76ea3bb18da8c68afd5d487616fffbe61a3f73c4bb97f50761e576df39""}"
65b45c22ddac4b288569ef8db4ac3e88,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Although it is reasonable to classify the num_amtl_total to 0 and 1, grouping by specimen will lose the \""tooth_class\"" feature."", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV.\nAnalyze at the specimen level.\nUse for a logistic regression model"", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]\ndf_grp = df.groupby('specimen')\ndf = df_grp.agg(num_amtl_total=('num_amtl', 'sum'), sockets_total=('sockets', 'sum'), age_specimen=('age', 'first'), stdev_age_specimen=('stdev_age', 'first'), prob_male_specimen=('prob_male', 'first'), genus_final_specimen=('genus_final', 'first')).reset_index()\ndf['num_amtl_final_specimen'] = [1 if num_amtl_total > 0 else 0 for num_amtl_total in df['num_amtl_total']]"", ""output_col"": ""num_amtl_final_specimen"", ""associated_cvar_spec_id"": ""8a52eb3026e740beb2265820580c0e9b"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""DV"", ""concept"": ""Degree of tooth loss"", ""final_columns_derived_spec_ids"": [""4ec6d0646f6a46e08b6c163e27ccf424"", ""230f355bbb0c48ef879dff00bc5b0a28"", ""ROOT_SPEC_ID"", ""6fbe6d51abe946cca034c589f2f4f84d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""502b563277d045f9a3a0c658d71ee0ec"", ""08fafcabccc349febc928df837d20b8e"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""94d18387fd3141c99c8fb9f3e6a3ad27"", ""ROOT_SPEC_ID"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 num_amtl_final"", ""\ud83d\udfe9 num_amtl_final_specimen"", ""\ud83d\udfe9 amtl_rate"", ""\ud83d\udfe9 amtl_rate_specimen"", ""\ud83d\udfe9 amtl"", ""\ud83d\udfe9 num_amtl_01""], ""final_columns_leaf_spec_ids"": [""4ec6d0646f6a46e08b6c163e27ccf424"", ""6fbe6d51abe946cca034c589f2f4f84d"", ""502b563277d045f9a3a0c658d71ee0ec"", ""230f355bbb0c48ef879dff00bc5b0a28"", ""94d18387fd3141c99c8fb9f3e6a3ad27"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""08fafcabccc349febc928df837d20b8e"", ""6fbe6d51abe946cca034c589f2f4f84d""], ""state_col_val_hash"": ""ec1c797eb2d5e0a8300b1b8a4c8cc6f57a352215335b8218c4cc95e326779193""}"
aca5bd84dd774d1aadfd7714b4f137fa,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Although you can derive amtl rate this way, grouping by specimen will lose the \""tooth_class\"" feature."", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV.\nAnalyze at the specimen level.\nUse for a binomial regression model at specimen level"", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]\ndf_grp = df.groupby('specimen')\ndf = df_grp.agg(num_amtl_total=('num_amtl', 'sum'), sockets_total=('sockets', 'sum'), age_specimen=('age', 'first'), stdev_age_specimen=('stdev_age', 'first'), prob_male_specimen=('prob_male', 'first'), genus_final_specimen=('genus_final', 'first')).reset_index()\ndf['amtl_rate_specimen'] = df['num_amtl_total'] / df['sockets_total']"", ""output_col"": ""amtl_rate_specimen"", ""associated_cvar_spec_id"": ""8a52eb3026e740beb2265820580c0e9b"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""DV"", ""concept"": ""Degree of tooth loss"", ""final_columns_derived_spec_ids"": [""4ec6d0646f6a46e08b6c163e27ccf424"", ""230f355bbb0c48ef879dff00bc5b0a28"", ""ROOT_SPEC_ID"", ""6fbe6d51abe946cca034c589f2f4f84d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""502b563277d045f9a3a0c658d71ee0ec"", ""08fafcabccc349febc928df837d20b8e"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""94d18387fd3141c99c8fb9f3e6a3ad27"", ""ROOT_SPEC_ID"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 num_amtl_final"", ""\ud83d\udfe9 num_amtl_final_specimen"", ""\ud83d\udfe9 amtl_rate"", ""\ud83d\udfe9 amtl_rate_specimen"", ""\ud83d\udfe9 amtl"", ""\ud83d\udfe9 num_amtl_01""], ""final_columns_leaf_spec_ids"": [""4ec6d0646f6a46e08b6c163e27ccf424"", ""6fbe6d51abe946cca034c589f2f4f84d"", ""502b563277d045f9a3a0c658d71ee0ec"", ""230f355bbb0c48ef879dff00bc5b0a28"", ""94d18387fd3141c99c8fb9f3e6a3ad27"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""08fafcabccc349febc928df837d20b8e"", ""230f355bbb0c48ef879dff00bc5b0a28""], ""state_col_val_hash"": ""f6866c44967428c515c9bc45d5cffe0ee777f36361293312330cc0851ed5f6e7""}"
50ff1b520e104d2cb4438b00332eb1ad,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Although you can only keep the first age variable for the same specimen ID, grouping by specimen will lose the \""tooth_class\"" feature."", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV.\nAnalyze at the specimen level."", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]\ndf_grp = df.groupby('specimen')\ndf = df_grp.agg(num_amtl_total=('num_amtl', 'sum'), sockets_total=('sockets', 'sum'), age_specimen=('age', 'first'), stdev_age_specimen=('stdev_age', 'first'), prob_male_specimen=('prob_male', 'first'), genus_final_specimen=('genus_final', 'first')).reset_index()"", ""output_col"": ""age_specimen"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""08fafcabccc349febc928df837d20b8e""], ""state_col_val_hash"": ""f44a39f6bfac41d62fe0dbcfff7f889f6b0c04b95e63a19dee1344cb4e149aab""}"
978e8072818e48168fc25275244d3e9b,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Although you can only keep the stdev_age variable for the same specimen ID, grouping by specimen will lose the \""tooth_class\"" feature."", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV.\nAnalyze at the specimen level."", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]\ndf_grp = df.groupby('specimen')\ndf = df_grp.agg(num_amtl_total=('num_amtl', 'sum'), sockets_total=('sockets', 'sum'), age_specimen=('age', 'first'), stdev_age_specimen=('stdev_age', 'first'), prob_male_specimen=('prob_male', 'first'), genus_final_specimen=('genus_final', 'first')).reset_index()"", ""output_col"": ""stdev_age_specimen"", ""associated_cvar_spec_id"": ""c4f0ea148a4545789349d7c447b3701a"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Age of specimen"", ""final_columns_derived_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d"", ""23da517fc2de4ff59a5da242e40a938d"", ""ROOT_SPEC_ID""], ""final_columns_orig"": [""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 age"", ""\ud83d\udfe8 stdev_age""], ""final_columns_derived"": [""\ud83d\udfe9 age_specimen"", ""\ud83d\udfe9 stdev_age_specimen"", ""\ud83d\udfe9 age_min""], ""final_columns_leaf_spec_ids"": [""08fafcabccc349febc928df837d20b8e"", ""08fafcabccc349febc928df837d20b8e"", ""23da517fc2de4ff59a5da242e40a938d""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""08fafcabccc349febc928df837d20b8e""], ""state_col_val_hash"": ""8f614a0ea279f60eb73673c3b2f0f642c754863ff4effdb6d27fd74e2245bb9a""}"
3ee2918e75bd4ef69ef5d287c7951467,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": ""Although you can only keep the first prob_male variable for the same specimen ID, grouping by specimen will lose the \""tooth_class\"" feature."", ""annotator_is_rationale_reasonable"": ""No"", ""rationale"": ""The research question focuses on comparing AMTL between modern humans (Homo sapiens)  and non-human primate genera (Pan, Pongo, Papio), so we construct this genus_category as the IV.\nAnalyze at the specimen level."", ""annotator"": null, ""code"": ""df['genus_final'] = [1 if genus == 'Homo sapiens' else 0 for genus in df['genus']]\ndf_grp = df.groupby('specimen')\ndf = df_grp.agg(num_amtl_total=('num_amtl', 'sum'), sockets_total=('sockets', 'sum'), age_specimen=('age', 'first'), stdev_age_specimen=('stdev_age', 'first'), prob_male_specimen=('prob_male', 'first'), genus_final_specimen=('genus_final', 'first')).reset_index()"", ""output_col"": ""prob_male_specimen"", ""associated_cvar_spec_id"": ""cfc425e19fd249478599a14891383a2e"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Gender of specimen"", ""final_columns_derived_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""cd20bdca415944c1bed053ca628b7e1d"", ""5a71c0b9e17b442081bd35f198dce0c7"", ""56efef418e2e404ba53ffb5c12e19aa7"", ""08fafcabccc349febc928df837d20b8e"", ""ROOT_SPEC_ID"", ""a1fcedb11187412983dbba5a20e7adc0"", ""630ffb3c56ec4c9d83bd197d2195773d""], ""final_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 prob_male""], ""final_columns_derived"": [""\ud83d\udfe9 gender"", ""\ud83d\udfe9 prob_male_specimen""], ""final_columns_leaf_spec_ids"": [""7e8bf09d5d8b49fe9357b852ece18cce"", ""08fafcabccc349febc928df837d20b8e""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""No"", ""is_steps_reasonable"": null, ""associated_tspec_ids"": [""630ffb3c56ec4c9d83bd197d2195773d"", ""a1fcedb11187412983dbba5a20e7adc0"", ""08fafcabccc349febc928df837d20b8e""], ""state_col_val_hash"": ""447de3895b14fbfa8122fc3f4c54242a08f546c3eaf5bf820fd019e5a3c3c73a""}"
0145f921bc844fcf9628dadb6a92d03f,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""There are 3 tooth classes, so one hot encoding is necessary."", ""annotator"": null, ""code"": ""from sklearn.preprocessing import OneHotEncoder\ncategorical_columns = ['tooth_class']\nencoder = OneHotEncoder(sparse_output=False, drop='first')\none_hot_encoded = encoder.fit_transform(df[categorical_columns])\none_hot_df = pd.DataFrame(one_hot_encoded, columns=encoder.get_feature_names_out(categorical_columns))\ndf_encoded = pd.concat([df, one_hot_df], axis=1)\ndf = df_encoded.drop(categorical_columns, axis=1)"", ""output_col"": ""tooth_class_Posterior"", ""associated_cvar_spec_id"": ""4f388840c1404fb5bd72df43766b4267"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Tooth class type"", ""final_columns_derived_spec_ids"": [""40ba40c8894f42ba806a8457048cdcac"", ""ROOT_SPEC_ID"", ""b369dff114f84d3ab498cc5331afda3e"", ""ROOT_SPEC_ID"", ""b94b4370c5cf4d768520c02ade506d81"", ""ROOT_SPEC_ID"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""ROOT_SPEC_ID"", ""09ec9ea016964b7eafa2a131981d49aa""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 anterior"", ""\ud83d\udfe9 tooth_class_Posterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 posterior"", ""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 tooth_class_Posterior""], ""final_columns_leaf_spec_ids"": [""40ba40c8894f42ba806a8457048cdcac"", ""b369dff114f84d3ab498cc5331afda3e"", ""b369dff114f84d3ab498cc5331afda3e"", ""b94b4370c5cf4d768520c02ade506d81"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""09ec9ea016964b7eafa2a131981d49aa"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""09ec9ea016964b7eafa2a131981d49aa""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [""b369dff114f84d3ab498cc5331afda3e""], ""state_col_val_hash"": ""a7cf139bb116970733b528063e0a5417a2552b0872ead971eed20568bedf0ef9""}"
7c89e93df2e246bd82ca6df1f3727869,,,,,,,"{""time_stamp"": ""06-06-2024 at 07:54:36 PM"", ""annotator_labeled"": false, ""annotator_label"": null, ""annotator_explanation"": """", ""annotator_is_rationale_reasonable"": ""Yes"", ""rationale"": ""There are 3 tooth classes, so one hot encoding is necessary."", ""annotator"": null, ""code"": ""from sklearn.preprocessing import OneHotEncoder\ncategorical_columns = ['tooth_class']\nencoder = OneHotEncoder(sparse_output=False, drop='first')\none_hot_encoded = encoder.fit_transform(df[categorical_columns])\none_hot_df = pd.DataFrame(one_hot_encoded, columns=encoder.get_feature_names_out(categorical_columns))\ndf_encoded = pd.concat([df, one_hot_df], axis=1)\ndf = df_encoded.drop(categorical_columns, axis=1)"", ""output_col"": ""tooth_class_Premolar"", ""associated_cvar_spec_id"": ""4f388840c1404fb5bd72df43766b4267"", ""associated_cvar_spec"": {""time_stamp"": null, ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""Control"", ""concept"": ""Tooth class type"", ""final_columns_derived_spec_ids"": [""40ba40c8894f42ba806a8457048cdcac"", ""ROOT_SPEC_ID"", ""b369dff114f84d3ab498cc5331afda3e"", ""ROOT_SPEC_ID"", ""b94b4370c5cf4d768520c02ade506d81"", ""ROOT_SPEC_ID"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""ROOT_SPEC_ID"", ""09ec9ea016964b7eafa2a131981d49aa""], ""final_columns_orig"": [], ""final_columns_derived"": [""\ud83d\udfe9 anterior"", ""\ud83d\udfe9 tooth_class_Posterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 posterior"", ""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 tooth_class_Posterior""], ""final_columns_leaf_spec_ids"": [""40ba40c8894f42ba806a8457048cdcac"", ""b369dff114f84d3ab498cc5331afda3e"", ""b369dff114f84d3ab498cc5331afda3e"", ""b94b4370c5cf4d768520c02ade506d81"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""09ec9ea016964b7eafa2a131981d49aa"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""09ec9ea016964b7eafa2a131981d49aa""], ""column_rationales"": {}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}, ""is_suited_to_cv"": ""Yes"", ""is_steps_reasonable"": ""Yes"", ""associated_tspec_ids"": [""b369dff114f84d3ab498cc5331afda3e""], ""state_col_val_hash"": ""7e55d75f25b162d228167a0ce71019aeb453d9253450277952795542f368d66b""}"
cc6d9c6f9dae4b678625fe406d695463,,,"{""time_stamp"": ""06-13-2024 at 09:45:20 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""derive amtl rate per socket"", ""spec_name"": ""amtl_rate"", ""trans_verb"": [""derive""], ""code"": ""df['amtl_rate'] = df['num_amtl']/df['sockets']"", ""rationale"": """", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""sockets"", ""num_amtl""], ""amtl_rate""]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}], ""annotator"": null}",,,,
57080380684246b896467ec5e6b0bf5e,,,"{""time_stamp"": ""06-14-2024 at 12:15:29 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""normalize age variable"", ""spec_name"": ""normalize_age"", ""trans_verb"": [""derive""], ""code"": ""df['normalized_age'] = (df['age'] - df['age'].min()) / (df['age'].max() -\n        df['age'].min())"", ""rationale"": """", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""age""], ""normalized_age""]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}], ""annotator"": null}",,,,
ea89a1bef4304878b13fde06c2120764,,,"{""time_stamp"": ""06-14-2024 at 12:17:17 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""whether the specimen is from specified region"", ""spec_name"": ""from_specified_region"", ""trans_verb"": [""derive""], ""code"": ""df['from_specified_regions'] = df['pop'].apply(lambda x: 1 if x in [\n        'Native Californian', 'Alaska', 'Yaghan', 'Fuegian'] else 0)"", ""rationale"": """", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""pop""], ""from_specified_regions""]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}], ""annotator"": null}",,,,
7686eb76094d4b57b65fca9577d3bd79,,,"{""time_stamp"": ""06-14-2024 at 12:19:45 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""group by genus"", ""spec_name"": ""group_by_genus"", ""trans_verb"": [""groupby""], ""code"": ""df_genus_group = df.groupby('genus')"", ""rationale"": ""group by genus to calculate genus_amtl_rate"", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""genus""], """"]], ""branches"": [{""dependencies"": [""ROOT_SPEC_ID""], ""condition"": """"}], ""annotator"": null}",,,,
333e4a92588a4d0db24659825cec159c,,,"{""time_stamp"": ""06-14-2024 at 12:24:57 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""calculate atml rate per genus"", ""spec_name"": ""genus_amtl_rate"", ""trans_verb"": [""derive""], ""code"": ""numerator = df_genus_group_grp['num_amtl'].transform('sum')\ndenominator = df_genus_group_grp['sockets'].transform('sum')\n\n    # Calculate genus_amtl_rate\ngenus_amtl_rate = numerator / denominator\n\n    # Assign the calculated rates back to the original DataFrame\ndf['genus_amtl_rate'] = genus_amtl_rate"", ""rationale"": "" to create a new feature that represents the proportion of missing teeth to total sockets for each genus. This could provide a more direct comparison of AMTL rates across genera, which can be useful for the research question."", ""conditions"": """", ""input_cols_to_output_col_mapping"": [[[""sockets"", ""num_amtl""], ""genus_amtl_rate""]], ""branches"": [{""dependencies"": [""7686eb76094d4b57b65fca9577d3bd79""], ""condition"": """"}], ""annotator"": null}",,,,
2f309cda5d0749e5a5a40c38eb5c4387,,"{""time_stamp"": ""06-14-2024 at 12:45:50 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""DV"", ""concept"": ""AMTL"", ""final_columns_derived_spec_ids"": [""7686eb76094d4b57b65fca9577d3bd79"", ""333e4a92588a4d0db24659825cec159c"", ""cc6d9c6f9dae4b678625fe406d695463"", ""ROOT_SPEC_ID"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [""\ud83d\udfe8 num_amtl""], ""final_columns_derived"": [""\ud83d\udfe9 num_amtl_01"", ""\ud83d\udfe9 amtl_rate"", ""\ud83d\udfe9 genus_amtl_rate""], ""final_columns_leaf_spec_ids"": [""56efef418e2e404ba53ffb5c12e19aa7"", ""cc6d9c6f9dae4b678625fe406d695463"", ""333e4a92588a4d0db24659825cec159c""], ""column_rationales"": {""\ud83d\udfe9 num_amtl_01"": ""The categorical dependent variable num_amtl."", ""\ud83d\udfe8 num_amtl"": ""original variable for amtl"", ""\ud83d\udfe9 genus_amtl_rate"": ""amtl rate for genus"", ""\ud83d\udfe9 amtl_rate"": ""num_amtl/sockets""}, ""interaction"": false, ""rationale"": ""This is the dependent variable (higher frequencies of antemortem tooth loss (AMTL)) that I want to conduct research about. The categorical variable 'number of AMTL'. Classifying the num_amtl by values higher or equal to 1 as 1 and 0 as 0."", ""on"": """", ""random_effect"": false, ""annotator"": null}",,,,,
683e39a177e14b1b845fa50d5a4d1cf8,,"{""time_stamp"": ""06-14-2024 at 01:44:56 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""variable_type"": ""IV"", ""concept"": ""genus"", ""final_columns_derived_spec_ids"": [""1e7a518108bd4391a3e3c8f3f71e01a7"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""cd20bdca415944c1bed053ca628b7e1d"", ""7e8bf09d5d8b49fe9357b852ece18cce"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""final_columns_orig"": [""\ud83d\udfe8 genus""], ""final_columns_derived"": [""\ud83d\udfe9 genus_01""], ""final_columns_leaf_spec_ids"": [""b45c42e9a52c472b90f42b35fcd8a777""], ""column_rationales"": {""\ud83d\udfe8 genus"": ""original variable for genus"", ""\ud83d\udfe9 genus_01"": ""binary variable for genus""}, ""interaction"": false, ""rationale"": """", ""on"": """", ""random_effect"": false, ""annotator"": null}",,,,,
470def9185454f7b8d01800ea2690bed,,,,"{""time_stamp"": ""07-21-2024 at 10:05:35 PM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Logistic Regression"", ""spec_name"": ""logistic_regression"", ""rationale"": ""Build logistic regression model based on the independent variable genus_01(Homo sapiens or others) and control variables age, gender and sockets"", ""dependencies"": [], ""code"": ""model_2 = smf.glm('num_amtl ~ genus + normalized_age + prob_male + from_specified_region +tooth_class_Anterior + tooth_class_Posterior + tooth_class_Premolar', data=df, family=sm.families.Binomial()).fit()"", ""associated_columns_derived_spec_ids"": [""57080380684246b896467ec5e6b0bf5e"", ""ea89a1bef4304878b13fde06c2120764"", ""cc6d9c6f9dae4b678625fe406d695463"", ""ROOT_SPEC_ID"", ""b67ed9caf96a41ed961c739bc9b8199e""], ""associated_columns_orig"": [""\ud83d\udfe8 genus"", ""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 num_amtl""], ""associated_columns_derived"": [""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Posterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 amtl_rate"", ""\ud83d\udfe9 normalized_age"", ""\ud83d\udfe9 from_specified_regions""], ""associated_columns_leaf_spec_ids"": [""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""cc6d9c6f9dae4b678625fe406d695463"", ""57080380684246b896467ec5e6b0bf5e"", ""ea89a1bef4304878b13fde06c2120764""], ""associated_specified_spec_ids"": [""3934c6ab265744b88bda1d8059356ba4""], ""annotator"": null}",,,
1e7c202244904cdea043147439659ff1,,,,"{""time_stamp"": ""06-14-2024 at 01:58:03 AM"", ""tags"": [], ""read_only_tags"": [], ""is_negative"": false, ""specification"": ""Linear Regression"", ""spec_name"": ""linear_regression"", ""rationale"": """", ""dependencies"": [], ""code"": ""model = smf.ols('genus_amtl_rate~ genus_01 + age + prob_male + from_specified_region +tooth_class_Anterior + tooth_class_Posterior + tooth_class_Premolar', data=df).fit()"", ""associated_columns_derived_spec_ids"": [""7686eb76094d4b57b65fca9577d3bd79"", ""333e4a92588a4d0db24659825cec159c"", ""1e7a518108bd4391a3e3c8f3f71e01a7"", ""ea89a1bef4304878b13fde06c2120764"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""cd20bdca415944c1bed053ca628b7e1d"", ""ROOT_SPEC_ID"", ""7e8bf09d5d8b49fe9357b852ece18cce"", ""56efef418e2e404ba53ffb5c12e19aa7""], ""associated_columns_orig"": [""\ud83d\udfe8 prob_male"", ""\ud83d\udfe8 age""], ""associated_columns_derived"": [""\ud83d\udfe9 genus_amtl_rate"", ""\ud83d\udfe9 genus_01"", ""\ud83d\udfe9 tooth_class_Anterior"", ""\ud83d\udfe9 tooth_class_Premolar"", ""\ud83d\udfe9 tooth_class_Posterior"", ""\ud83d\udfe9 from_specified_regions""], ""associated_columns_leaf_spec_ids"": [""333e4a92588a4d0db24659825cec159c"", ""b45c42e9a52c472b90f42b35fcd8a777"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""b67ed9caf96a41ed961c739bc9b8199e"", ""ea89a1bef4304878b13fde06c2120764""], ""associated_specified_spec_ids"": [], ""annotator"": null}",,,