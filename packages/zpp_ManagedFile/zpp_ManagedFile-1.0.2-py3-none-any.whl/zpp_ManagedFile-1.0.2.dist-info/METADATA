Metadata-Version: 2.1
Name: zpp_ManagedFile
Version: 1.0.2
Summary: Système de fichier managé pour le contrôle des actions sur un fichier
Home-page: https://github.com/ZephyrOff/zpp_ManagedFile
Author: 
License: MIT License
Project-URL: Documentation, https://github.com/ZephyrOff/zpp_ManagedFile
Platform: ALL
Description-Content-Type: text/markdown
License-File: LICENSE

# zpp_ManagedFile
## Informations
SystÃ¨me de fichier managÃ© pour le contrÃ´le des actions sur un fichier tels que la fermeture du fichier.
Permet de crÃ©er plusieurs types de fichier:
- file: Ouverture d'un fichier prÃ©sent sur le systÃ¨me
- string: Simulation d'un fichier
- bytesio: Fichier bytes en mÃ©moire
- stringio: Fichier en mÃ©moire
- tempfile: Fichier temporaire

<br>

## Installation
```console
pip install zpp_ManagedFile
```
<br>

## Utilisation
```python
file = zpp_ManagedFile.ManagedFile()
```
filename=None, mode='r', typefile="stringio", encoding=None, closable=True
>En paramÃ¨tre supplÃ©mentaire, nous pouvons mettre:<br/>
>- filename = Chemin du fichier si typefile=file
>- mode = Option sur le fichier (w/r/a)   (default: r)
>- typefile = type de fichier  (file,string,bytesio,stringio,tempfile)  (default: stringio)
>- encoding = type d'encodage du fichier
>- closable = activer le blocage de la fermeture (True pour activer)

Le fichier a les mÃªmes actions q'un fichier classique.

### Bloquer la fermeture du fichier

Il est possible de bloquer la fermeture du fichier en utlisant la mÃ©thode isClosable
```python
file.isClosable(True)
```
<br>

## OpÃ©rations courantes sur les fichiers

### Fermeture du fichier
```python
file.close()
```

### Ecriture dans un fichier
```python
file.write(data)
```

### Ecriture d'une liste dans un fichier
```python
file.writelines(list)
```

### Flush des donnÃ©es du buffer
```python
file.flush()
```

### Tronquer le fichier
```python
file.truncate(size)
```
size dÃ©termine la taille du fichier tronquÃ©

### Lecture d'un fichier
```python
file.read(size)
```
Si size est dÃ©terminÃ©, lis seulement x bytes du fichier

### Lecture d'une ligne d'un fichier
```python
file.readline(size)
```
Si size est dÃ©terminÃ©, lis seulement x bytes du fichier

### RÃ©cupÃ©ration du contenu du fichier sous forme de liste
```python
file.readlines()
```

### DÃ©placer le curseur
```python
file.seek(offset, [mode])
```
offset correspond au dÃ©placement
mode (optionnel) correspond Ã  l'option de dÃ©placement (0: dÃ©placement depuis le dÃ©but du fichier, 1: dÃ©placement depuis la position actuelle, 2: dÃ©placement depuis la fin du fichier)

### Connaitre la position du curseur
```python
file.tell()
```
