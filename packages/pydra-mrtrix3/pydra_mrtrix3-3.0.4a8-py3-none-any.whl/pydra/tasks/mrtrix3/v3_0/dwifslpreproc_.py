# Auto-generated by mrtrix3/app.py:print_usage_pydra()

import typing
from pathlib import Path  # noqa: F401
from fileformats.generic import FsObject, File, Directory  # noqa: F401
from fileformats.medimage_mrtrix3 import Tracks, ImageIn, ImageOut  # noqa: F401
from pydra.engine.task import ShellCommandTask
from pydra.engine import specs

input_fields = [
    (
        "in_file",
        ImageIn,
        {
            "help_string": "The input DWI series to be corrected",
            "mandatory": True,
            "position": 0,
            "argstr": "",
        },
    ),
    (
        "out_file",
        Path,
        {
            "help_string": "The output corrected image series",
            "position": 1,
            "argstr": "",
            "output_file_template": "out_file.mif",
        },
    ),
    (
        "rpe_none",
        bool,
        {
            "help_string": "Specify that no reversed phase-encoding image data is being provided; eddy will perform eddy current and motion correction only",
            "argstr": "-rpe_none",
            "xor": ("rpe_none", "rpe_pair", "rpe_all", "rpe_header"),
        },
    ),
    (
        "rpe_pair",
        bool,
        {
            "help_string": "Specify that a set of images (typically b=0 volumes) will be provided for use in inhomogeneity field estimation only (using the -se_epi option)",
            "argstr": "-rpe_pair",
            "xor": ("rpe_none", "rpe_pair", "rpe_all", "rpe_header"),
        },
    ),
    (
        "rpe_all",
        bool,
        {
            "help_string": "Specify that ALL DWIs have been acquired with opposing phase-encoding",
            "argstr": "-rpe_all",
            "xor": ("rpe_none", "rpe_pair", "rpe_all", "rpe_header"),
        },
    ),
    (
        "rpe_header",
        bool,
        {
            "help_string": "Specify that the phase-encoding information can be found in the image header(s), and that this is the information that the script should use",
            "argstr": "-rpe_header",
            "xor": ("rpe_none", "rpe_pair", "rpe_all", "rpe_header"),
        },
    ),
    (
        "grad",
        File,
        {
            "help_string": "Provide the diffusion gradient table in MRtrix format",
            "argstr": "-grad",
            "xor": ("grad", "fslgrad"),
        },
    ),
    (
        "fslgrad",
        File,
        {
            "help_string": "Provide the diffusion gradient table in FSL bvecs/bvals format",
            "argstr": "-fslgrad",
            "xor": ("grad", "fslgrad"),
        },
    ),
    (
        "export_grad_mrtrix",
        typing.Union[Path, bool],
        False,
        {
            "help_string": "Export the final gradient table in MRtrix format",
            "argstr": "-export_grad_mrtrix",
            "xor": ("export_grad_mrtrix", "export_grad_fsl"),
            "output_file_template": "export_grad_mrtrix.txt",
        },
    ),
    (
        "export_grad_fsl",
        typing.Union[Path, bool],
        False,
        {
            "help_string": "Export the final gradient table in FSL bvecs/bvals format",
            "argstr": "-export_grad_fsl",
            "xor": ("export_grad_mrtrix", "export_grad_fsl"),
            "output_file_template": "export_grad_fsl.txt",
        },
    ),
    (
        "eddyqc_text",
        typing.Union[Path, bool],
        False,
        {
            "help_string": "Copy the various text-based statistical outputs generated by eddy, and the output of eddy_qc (if installed), into an output directory",
            "argstr": "-eddyqc_text",
            "xor": ("eddyqc_text", "eddyqc_all"),
            "output_file_template": "eddyqc_text",
        },
    ),
    (
        "eddyqc_all",
        typing.Union[Path, bool],
        False,
        {
            "help_string": "Copy ALL outputs generated by eddy (including images), and the output of eddy_qc (if installed), into an output directory",
            "argstr": "-eddyqc_all",
            "xor": ("eddyqc_text", "eddyqc_all"),
            "output_file_template": "eddyqc_all",
        },
    ),
    (
        "eddy_mask",
        ImageIn,
        {
            "help_string": "Provide a processing mask to use for eddy, instead of having dwifslpreproc generate one internally using dwi2mask",
            "argstr": "-eddy_mask",
        },
    ),
    (
        "eddy_slspec",
        File,
        {
            "help_string": "Provide a file containing slice groupings for eddy's slice-to-volume registration",
            "argstr": "-eddy_slspec",
        },
    ),
    (
        "eddy_options",
        str,
        {
            "help_string": "Manually provide additional command-line options to the eddy command (provide a string within quotation marks that contains at least one space, even if only passing a single command-line option to eddy)",
            "argstr": "-eddy_options",
        },
    ),
    (
        "se_epi",
        ImageIn,
        {
            "help_string": "Provide an additional image series consisting of spin-echo EPI images, which is to be used exclusively by topup for estimating the inhomogeneity field (i.e. it will not form part of the output image series)",
            "argstr": "-se_epi",
            "xor": ("topup_files", "se_epi"),
        },
    ),
    (
        "align_seepi",
        bool,
        {
            "help_string": "Achieve alignment between the SE-EPI images used for inhomogeneity field estimation and the DWIs (more information in Description section)",
            "argstr": "-align_seepi",
            "xor": ("topup_files", "align_seepi"),
        },
    ),
    (
        "topup_options",
        str,
        {
            "help_string": "Manually provide additional command-line options to the topup command (provide a string within quotation marks that contains at least one space, even if only passing a single command-line option to topup)",
            "argstr": "-topup_options",
            "xor": ("topup_files", "topup_options"),
        },
    ),
    (
        "topup_files",
        str,
        {
            "help_string": 'Provide files generated by prior execution of the FSL "topup" command to be utilised by eddy',
            "argstr": "-topup_files",
            "xor": ("topup_files", "se_epi"),
        },
    ),
    (
        "pe_dir",
        str,
        {
            "help_string": "Manually specify the phase encoding direction of the input series; can be a signed axis number (e.g. -0, 1, +2), an axis designator (e.g. RL, PA, IS), or NIfTI axis codes (e.g. i-, j, k)",
            "argstr": "-pe_dir",
            "xor": ("rpe_header", "pe_dir"),
        },
    ),
    (
        "readout_time",
        float,
        {
            "help_string": "Manually specify the total readout time of the input series (in seconds)",
            "argstr": "-readout_time",
            "xor": ("rpe_header", "readout_time"),
        },
    ),
    (
        "nocleanup",
        bool,
        {
            "help_string": "do not delete intermediate files during script execution, and do not delete scratch directory at script completion.",
            "argstr": "-nocleanup",
        },
    ),
    (
        "scratch",
        typing.Union[Path, bool],
        False,
        {
            "help_string": "manually specify the path in which to generate the scratch directory.",
            "argstr": "-scratch",
            "output_file_template": "scratch",
        },
    ),
    (
        "cont",
        typing.Any,
        {
            "help_string": "continue the script from a previous execution; must provide the scratch directory path, and the name of the last successfully-generated file.",
            "argstr": "-cont",
        },
    ),
    (
        "info",
        bool,
        {
            "help_string": "display information messages.",
            "argstr": "-info",
            "xor": ("info", "quiet", "debug"),
        },
    ),
    (
        "quiet",
        bool,
        {
            "help_string": "do not display information messages or progress status. Alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.",
            "argstr": "-quiet",
            "xor": ("info", "quiet", "debug"),
        },
    ),
    (
        "debug",
        bool,
        {
            "help_string": "display debugging messages.",
            "argstr": "-debug",
            "xor": ("info", "quiet", "debug"),
        },
    ),
    (
        "force",
        bool,
        {"help_string": "force overwrite of output files.", "argstr": "-force"},
    ),
    (
        "nthreads",
        int,
        {
            "help_string": "use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).",
            "argstr": "-nthreads",
        },
    ),
    (
        "config",
        specs.MultiInputObj[str],
        {
            "help_string": "temporarily set the value of an MRtrix config file entry.",
            "argstr": "-config",
        },
    ),
    (
        "help",
        bool,
        {"help_string": "display this information page and exit.", "argstr": "-help"},
    ),
    (
        "version",
        bool,
        {"help_string": "display version information and exit.", "argstr": "-version"},
    ),
    (
        "json_import",
        File,
        {
            "help_string": "Import image header information from an associated JSON file (may be necessary to determine phase encoding information)",
            "argstr": "-json_import",
        },
    ),
]
DwiFslpreprocInputSpec = specs.SpecInfo(
    name="DwiFslpreprocInput", fields=input_fields, bases=(specs.ShellSpec,)
)

output_fields = [
    ("out_file", ImageOut, {"help_string": "The output corrected image series"}),
    (
        "export_grad_mrtrix",
        File,
        {"help_string": "Export the final gradient table in MRtrix format"},
    ),
    (
        "export_grad_fsl",
        File,
        {"help_string": "Export the final gradient table in FSL bvecs/bvals format"},
    ),
    (
        "eddyqc_text",
        Directory,
        {
            "help_string": "Copy the various text-based statistical outputs generated by eddy, and the output of eddy_qc (if installed), into an output directory"
        },
    ),
    (
        "eddyqc_all",
        Directory,
        {
            "help_string": "Copy ALL outputs generated by eddy (including images), and the output of eddy_qc (if installed), into an output directory"
        },
    ),
    (
        "scratch",
        Directory,
        {
            "help_string": "manually specify the path in which to generate the scratch directory."
        },
    ),
]
DwiFslpreprocOutputSpec = specs.SpecInfo(
    name="DwiFslpreprocOutput", fields=output_fields, bases=(specs.ShellOutSpec,)
)


class DwiFslpreproc(ShellCommandTask):
    """
            References
        ----------

        * Andersson, J. L. & Sotiropoulos, S. N. An integrated approach to correction for off-resonance effects and subject movement in diffusion MR imaging. NeuroImage, 2015, 125, 1063-1078

        * Smith, S. M.; Jenkinson, M.; Woolrich, M. W.; Beckmann, C. F.; Behrens, T. E.; Johansen-Berg, H.; Bannister, P. R.; De Luca, M.; Drobnjak, I.; Flitney, D. E.; Niazy, R. K.; Saunders, J.; Vickers, J.; Zhang, Y.; De Stefano, N.; Brady, J. M. & Matthews, P. M. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 2004, 23, S208-S219

        * If performing recombination of diffusion-weighted volume pairs with opposing phase encoding directions: Skare, S. & Bammer, R. Jacobian weighting of distortion corrected EPI data. Proceedings of the International Society for Magnetic Resonance in Medicine, 2010, 5063

        * If performing EPI susceptibility distortion correction: Andersson, J. L.; Skare, S. & Ashburner, J. How to correct susceptibility distortions in spin-echo echo-planar images: application to diffusion tensor imaging. NeuroImage, 2003, 20, 870-888

        * If including "--repol" in -eddy_options input: Andersson, J. L. R.; Graham, M. S.; Zsoldos, E. & Sotiropoulos, S. N. Incorporating outlier detection and replacement into a non-parametric framework for movement and distortion correction of diffusion MR images. NeuroImage, 2016, 141, 556-572

        * If including "--mporder" in -eddy_options input: Andersson, J. L. R.; Graham, M. S.; Drobnjak, I.; Zhang, H.; Filippini, N. & Bastiani, M. Towards a comprehensive framework for movement and distortion correction of diffusion MR images: Within volume movement. NeuroImage, 2017, 152, 450-466

        * If using -eddyqc_text or -eddyqc_all option and eddy_quad is installed: Bastiani, M.; Cottaar, M.; Fitzgibbon, S.P.; Suri, S.; Alfaro-Almagro, F.; Sotiropoulos, S.N.; Jbabdi, S.; Andersson, J.L.R. Automated quality control for within and between studies diffusion MRI data using a non-parametric framework for movement and distortion correction. NeuroImage, 2019, 184, 801-812

        Tournier, J.-D.; Smith, R. E.; Raffelt, D.; Tabbara, R.; Dhollander, T.; Pietsch, M.; Christiaens, D.; Jeurissen, B.; Yeh, C.-H. & Connelly, A. MRtrix3: A fast, flexible and open software framework for medical image processing and visualisation. NeuroImage, 2019, 202, 116137

        --------------



        **Author:** Robert E. Smith (robert.smith@florey.edu.au)

        **Copyright:** Copyright (c) 2008-2024 the MRtrix3 contributors.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Covered Software is provided under this License on an "as is"
    basis, without warranty of any kind, either expressed, implied, or
    statutory, including, without limitation, warranties that the
    Covered Software is free of defects, merchantable, fit for a
    particular purpose or non-infringing.
    See the Mozilla Public License v. 2.0 for more details.

    For more details, see http://www.mrtrix.org/.

    """

    input_spec = DwiFslpreprocInputSpec
    output_spec = DwiFslpreprocOutputSpec
    executable = "dwifslpreproc"
