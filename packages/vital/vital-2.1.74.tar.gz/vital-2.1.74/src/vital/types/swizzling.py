# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .swizzling_bin_granularity import SwizzlingBinGranularity
import typing
from .period import Period
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Swizzling(UniversalBaseModel):
    """
    The Swizzling mode makes the reducer functions produce statistics
    based on X-of-Y granularity (e.g., day-of-week) for each and every data partition.

    ## Basic usages

    - Hour of Day — gather_every={1, hour}, bin_granularity=day, bin_count=1
    - Day of Week — gather_every={1, day}, bin_granularity=week, bin_count=1
    - Day of Month — gather_every={1, day}, bin_granularity=month, bin_count=1

    ## Output columns

    Swizzling mode adds two additional columns to the output dataframes:

    1. `swizzle_bin`: The bin index of the data point post-binning (with respect to `bin_count`
       and `bin_granularity); and 2 `swizzle_period_start`: The bin-relative period start of the data point with respect to `gather_every`.

    ## Supported combinations

    | gather_every | group_by          |
    | ------------ | ----------------- |
    | minute       | minute, hour, day |
    | hour         | hour, day, week   |
    | day          | day, week, month  |
    | week         | week, month       |
    | month        | month             |
    """

    bin_granularity: SwizzlingBinGranularity
    bin_count: typing.Optional[int] = None
    gather_every: Period

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
