# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from .s_3_public_access_block_configuration import S3PublicAccessBlockConfiguration
import typing
from .bucket_versioning_status import BucketVersioningStatus
from .s_3_mfa_delete_status import S3MfaDeleteStatus
from .encryption_rule import EncryptionRule
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Bucket(UniversalBaseModel):
    name: str
    arn: str
    url: str
    region: str
    creation_date: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="creationDate")]
    owner_id: typing_extensions.Annotated[str, FieldMetadata(alias="ownerID")]
    owner_name: typing_extensions.Annotated[str, FieldMetadata(alias="ownerName")]
    public_access_config: typing_extensions.Annotated[
        S3PublicAccessBlockConfiguration, FieldMetadata(alias="publicAccessConfig")
    ]
    policy: typing.Optional[str] = None
    bucket_versioning: typing_extensions.Annotated[
        typing.Optional[BucketVersioningStatus], FieldMetadata(alias="bucketVersioning")
    ] = None
    mfa_delete: typing_extensions.Annotated[typing.Optional[S3MfaDeleteStatus], FieldMetadata(alias="mfaDelete")] = None
    encryption_rules: typing_extensions.Annotated[typing.List[EncryptionRule], FieldMetadata(alias="encryptionRules")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
