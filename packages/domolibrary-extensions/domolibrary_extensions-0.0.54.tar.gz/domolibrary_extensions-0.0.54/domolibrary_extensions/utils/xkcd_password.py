# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/xkcd_pass.ipynb.

# %% auto 0
__all__ = ['LEET', 'PADDING', 'add_leet_to_string', 'process_add_leet', 'add_random_padding_to_str', 'process_pad_suffix_fn',
           'process_random_capitalization_fn', 'process_first_capitalization_fn', 'process_domo_password_fn',
           'generate_domo_password']

# %% ../../nbs/utils/xkcd_pass.ipynb 3
from xkcdpass import xkcd_password as xp
import random
from typing import Callable
import datetime as dt
import nbdev

# %% ../../nbs/utils/xkcd_pass.ipynb 4
LEET = {"a": "@", "i": "!", "A": "@", "I": "!", "o": "0", "O": "0"}


def add_leet_to_string(text, leet):
    return "".join(leet.get(k, k) for k in text)


def process_add_leet(
    my_pass, leet=None, **kwargs  # dict of letters and their substitution
):
    leet = leet or LEET
    keep_loop = False

    if not any((l for l in my_pass if l in leet.keys())):
        keep_loop = True
        return my_pass, keep_loop

    my_pass = add_leet_to_string(my_pass, leet=leet)
    return my_pass, keep_loop

# %% ../../nbs/utils/xkcd_pass.ipynb 6
PADDING = ".!?"


def add_random_padding_to_str(
    text,
    padding=None,  # str of characters to pad
):
    padding = padding or PADDING
    text += padding[random.randrange(0, len(padding))]
    return text


def process_pad_suffix_fn(my_pass, **kwargs):

    return (
        add_random_padding_to_str(
            my_pass,
            padding=PADDING,
        ),
        False,
    )

# %% ../../nbs/utils/xkcd_pass.ipynb 8
def process_random_capitalization_fn(text, delimiter, **kwargs):
    if delimiter not in text:
        return text, False

    word_ls = text.split(delimiter)

    word_ls = [random.choice((str.upper, str.lower))(word) for word in word_ls]

    return delimiter.join(word_ls), False


def process_first_capitalization_fn(text, delimiter, **kwargs):
    if delimiter not in text:
        return text, False

    word_ls = text.split(delimiter)

    word_ls = [
        word.upper() if idx == 0 else word.lower() for idx, word in enumerate(word_ls)
    ]

    return delimiter.join(word_ls), False

# %% ../../nbs/utils/xkcd_pass.ipynb 10
def process_domo_password_fn(my_pass, delimiter):
    my_pass, keep_loop = process_first_capitalization_fn(my_pass, delimiter)
    my_pass += dt.date.today().strftime("%Y")
    my_pass, keep_loop = process_pad_suffix_fn(my_pass)

    return my_pass, keep_loop


def generate_domo_password(delimiter="-", process_fn: Callable = None):

    wordfile = xp.locate_wordfile()
    mywords = xp.generate_wordlist(
        wordfile=wordfile, min_length=5, max_length=6, valid_chars="[a-z]"
    )

    my_pass = None
    keep_loop = True

    while keep_loop == True:
        my_pass = xp.generate_xkcdpassword(mywords, numwords=3, delimiter=delimiter)
        keep_loop = False

        if process_fn:
            my_pass, keep_loop = process_fn(my_pass=my_pass, delimiter=delimiter)

        return my_pass
