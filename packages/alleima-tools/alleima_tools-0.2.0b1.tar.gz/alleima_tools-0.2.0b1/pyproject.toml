[tool]
[tool.poetry]
name = "alleima-tools"
version = "0.2.0b1"
homepage = "http://uskegit.app.mtrltech.com/karlwooster/AlleimaTools"
description = "Functions, classes, other that are useful for Alleima purposes."
authors = ["karlwooster"]
readme = "README.md"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
]
packages = [
    { include = "alleima_tools" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.1.7"
toml = {version = "^0.10.2", optional = true}
pint = ">=0.23,<0.25"
pydantic = "^2.8.2"
marko = "^2.1.2"

# docs
mkdocs  = {version = "^1.6.1", optional = true}
mkdocs-include-markdown-plugin  = {version = "^6.2.2", optional = true}
mkdocs-material  = {version = "^9.5.33", optional = true}
mkdocstrings  = {extras = ["python"], version = "^0.25.2", optional = true}

# cli
typer = {version = "^0.12.5", optional = true}
pytz = "^2024.1"
pywin32 = {version = "^306", optional = true, platform = "win32"}
mkdocs-material-extensions = {version = "^1.3.1", optional = true}
mkdocs-autorefs = {version = "^1.2.0", optional = true}

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.2"
mypy = "^1.10.0"
commitizen = "^3.24.0"
pre-commit = "^3.7.0"
tox  = "^4.15.0"
bump2version = "^1.0.1"
types-toml = "^0.10.8.7"
poetry-types = "^0.5.0"
ipykernel = "^6.29.5"
types-pytz = "^2024.1.0.20240417"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-sugar = "^1.0.0"
polyfactory = "^2.16.2"
pytest-mock = "^3.14.0"

[tool.poetry.extras]

doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extensions",
    "mkdocs-autorefs"
    ]

cli = ["typer", "pywin32"]

[tool.poetry.scripts]
alleima-tools = 'alleima_tools.cli:app'

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF"
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "COM812",
  "ISC001",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true
version_files = ["alleima_tools/__init__.py"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
